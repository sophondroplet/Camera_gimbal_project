
gorgon test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011910  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08011af0  08011af0  00012af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012398  08012398  000141e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012398  08012398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123a0  080123a0  000141e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123a0  080123a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080123a4  080123a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080123a8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  200001e8  08012590  000141e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  08012590  00014864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d205  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fe  00000000  00000000  0003141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00034a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e4  00000000  00000000  00036390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229fc  00000000  00000000  00037774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1d0  00000000  00000000  0005a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1907  00000000  00000000  00078340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008518  00000000  00000000  00159c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001621a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011ad8 	.word	0x08011ad8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08011ad8 	.word	0x08011ad8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MPU6050_calc_drift>:
float pitch;
float yaw;



void MPU6050_calc_drift(I2C_HandleTypeDef* handle){
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af04      	add	r7, sp, #16
 800103a:	6078      	str	r0, [r7, #4]

	int16_t gyro_drift_sum [3];

	gyro_drift_sum[0] = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	82bb      	strh	r3, [r7, #20]
	gyro_drift_sum[1] = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	82fb      	strh	r3, [r7, #22]
	gyro_drift_sum[2] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	833b      	strh	r3, [r7, #24]

	float gyro_drift_sum_rps [3];

	gyro_drift_sum_rps[0] = 0;
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
	gyro_drift_sum_rps[1] = 0;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
	gyro_drift_sum_rps[2] = 0;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	613b      	str	r3, [r7, #16]


	for (int i = 0; i < 100; i++){
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e05f      	b.n	8001120 <MPU6050_calc_drift+0xec>

		HAL_I2C_Mem_Read(handle, MPU6050_I2C_ADDR, MPU6050_REG_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rx_data, 14,100);
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	230e      	movs	r3, #14
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <MPU6050_calc_drift+0x130>)
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	223b      	movs	r2, #59	@ 0x3b
 8001070:	21d0      	movs	r1, #208	@ 0xd0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f004 f990 	bl	8005398 <HAL_I2C_Mem_Read>
		gyro_drift_sum[0] = ( (((int16_t) rx_data[8]) << 8) | ((int16_t) rx_data[9]) );
 8001078:	4b3a      	ldr	r3, [pc, #232]	@ (8001164 <MPU6050_calc_drift+0x130>)
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b38      	ldr	r3, [pc, #224]	@ (8001164 <MPU6050_calc_drift+0x130>)
 8001082:	7a5b      	ldrb	r3, [r3, #9]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	82bb      	strh	r3, [r7, #20]
		gyro_drift_sum[1] = ( (((int16_t) rx_data[10]) << 8) | ((int16_t) rx_data[11]) );
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <MPU6050_calc_drift+0x130>)
 800108e:	7a9b      	ldrb	r3, [r3, #10]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <MPU6050_calc_drift+0x130>)
 8001096:	7adb      	ldrb	r3, [r3, #11]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	82fb      	strh	r3, [r7, #22]
		gyro_drift_sum[2] = ( (((int16_t) rx_data[12]) << 8) | ((int16_t) rx_data[13]) );
 80010a0:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <MPU6050_calc_drift+0x130>)
 80010a2:	7b1b      	ldrb	r3, [r3, #12]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <MPU6050_calc_drift+0x130>)
 80010aa:	7b5b      	ldrb	r3, [r3, #13]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	833b      	strh	r3, [r7, #24]

		gyro_drift_sum_rps[0] += (gyro_drift_sum[0]*RAW_TO_RPS);
 80010b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001168 <MPU6050_calc_drift+0x134>
 80010c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	edc7 7a02 	vstr	s15, [r7, #8]
		gyro_drift_sum_rps[1] += (gyro_drift_sum[1]*RAW_TO_RPS);
 80010d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001168 <MPU6050_calc_drift+0x134>
 80010e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	edc7 7a03 	vstr	s15, [r7, #12]
		gyro_drift_sum_rps[2] += (gyro_drift_sum[2]*RAW_TO_RPS);
 80010f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001168 <MPU6050_calc_drift+0x134>
 8001108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	edc7 7a04 	vstr	s15, [r7, #16]

		HAL_Delay(10);
 8001114:	200a      	movs	r0, #10
 8001116:	f002 f957 	bl	80033c8 <HAL_Delay>
	for (int i = 0; i < 100; i++){
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b63      	cmp	r3, #99	@ 0x63
 8001124:	dd9c      	ble.n	8001060 <MPU6050_calc_drift+0x2c>

	}

	gyro_drift[0] = gyro_drift_sum_rps[0]/100.0f;
 8001126:	ed97 7a02 	vldr	s14, [r7, #8]
 800112a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800116c <MPU6050_calc_drift+0x138>
 800112e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MPU6050_calc_drift+0x13c>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
	gyro_drift[1] = gyro_drift_sum_rps[1]/100.0f;
 8001138:	ed97 7a03 	vldr	s14, [r7, #12]
 800113c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800116c <MPU6050_calc_drift+0x138>
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MPU6050_calc_drift+0x13c>)
 8001146:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_drift[2] = gyro_drift_sum_rps[2]/100.0f;
 800114a:	ed97 7a04 	vldr	s14, [r7, #16]
 800114e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800116c <MPU6050_calc_drift+0x138>
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MPU6050_calc_drift+0x13c>)
 8001158:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000204 	.word	0x20000204
 8001168:	390bb3fd 	.word	0x390bb3fd
 800116c:	42c80000 	.word	0x42c80000
 8001170:	20000254 	.word	0x20000254

08001174 <MPU6050_init>:

HAL_StatusTypeDef MPU6050_init(I2C_HandleTypeDef* handle){
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af04      	add	r7, sp, #16
 800117a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t data = 0x01;
 800117c:	2301      	movs	r3, #1
 800117e:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle, MPU6050_I2C_ADDR, 0x6B, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 030e 	add.w	r3, r7, #14
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	226b      	movs	r2, #107	@ 0x6b
 8001194:	21d0      	movs	r1, #208	@ 0xd0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f003 ffea 	bl	8005170 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f002 f911 	bl	80033c8 <HAL_Delay>

	data = 0b00000001; /* DLPF = 1 (sample rate 1kHz), 188Hz BW Gyro */
 80011a6:	2301      	movs	r3, #1
 80011a8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle, MPU6050_I2C_ADDR, MPU6050_REG_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	f107 030e 	add.w	r3, r7, #14
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	221a      	movs	r2, #26
 80011be:	21d0      	movs	r1, #208	@ 0xd0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f003 ffd5 	bl	8005170 <HAL_I2C_Mem_Write>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 f8fc 	bl	80033c8 <HAL_Delay>

	data = 0b00000001; /* DLPF = 1 (sample rate 1kHz), 188Hz BW Gyro */
 80011d0:	2301      	movs	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle, MPU6050_I2C_ADDR, MPU6050_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	f107 030e 	add.w	r3, r7, #14
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	221b      	movs	r2, #27
 80011e8:	21d0      	movs	r1, #208	@ 0xd0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f003 ffc0 	bl	8005170 <HAL_I2C_Mem_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f002 f8e7 	bl	80033c8 <HAL_Delay>

	data = 0b00001000; /* full scale range +/- 4g */
 80011fa:	2308      	movs	r3, #8
 80011fc:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle,  MPU6050_I2C_ADDR, MPU6050_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	2301      	movs	r3, #1
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	f107 030e 	add.w	r3, r7, #14
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	221c      	movs	r2, #28
 8001212:	21d0      	movs	r1, #208	@ 0xd0
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f003 ffab 	bl	8005170 <HAL_I2C_Mem_Write>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]


	data = 0b00110000; /* latch interrupt, clear on read */
 800121e:	2330      	movs	r3, #48	@ 0x30
 8001220:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle,  MPU6050_I2C_ADDR, MPU6050_REG_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	2301      	movs	r3, #1
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	f107 030e 	add.w	r3, r7, #14
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2237      	movs	r2, #55	@ 0x37
 8001236:	21d0      	movs	r1, #208	@ 0xd0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f003 ff99 	bl	8005170 <HAL_I2C_Mem_Write>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f002 f8c0 	bl	80033c8 <HAL_Delay>

	data = 0b00000001; /* data ready interrupt */
 8001248:	2301      	movs	r3, #1
 800124a:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Write(handle,  MPU6050_I2C_ADDR, MPU6050_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f107 030e 	add.w	r3, r7, #14
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2238      	movs	r2, #56	@ 0x38
 8001260:	21d0      	movs	r1, #208	@ 0xd0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f003 ff84 	bl	8005170 <HAL_I2C_Mem_Write>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f002 f8ab 	bl	80033c8 <HAL_Delay>

	data = 0b00000000; /* DLPF = 1 (sample rate 1kHz), 188Hz BW Gyro */
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]
		status = HAL_I2C_Mem_Write(handle, MPU6050_I2C_ADDR, MPU6050_REG_SMPRT_DIV, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	f107 030e 	add.w	r3, r7, #14
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2219      	movs	r2, #25
 800128a:	21d0      	movs	r1, #208	@ 0xd0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f003 ff6f 	bl	8005170 <HAL_I2C_Mem_Write>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(100);
 8001296:	2064      	movs	r0, #100	@ 0x64
 8001298:	f002 f896 	bl	80033c8 <HAL_Delay>

	MPU6050_calc_drift(handle);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fec9 	bl	8001034 <MPU6050_calc_drift>

	HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f002 f890 	bl	80033c8 <HAL_Delay>

	return status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <MPU6050_read_DMA_data>:

HAL_StatusTypeDef MPU6050_read_DMA_data (I2C_HandleTypeDef *handle){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_DMA(handle, MPU6050_I2C_ADDR, MPU6050_REG_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rx_data, 14);
 80012bc:	230e      	movs	r3, #14
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MPU6050_read_DMA_data+0x3c>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	223b      	movs	r2, #59	@ 0x3b
 80012c8:	21d0      	movs	r1, #208	@ 0xd0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f004 f97e 	bl	80055cc <HAL_I2C_Mem_Read_DMA>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
	rx_flag = (status == HAL_OK);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <MPU6050_read_DMA_data+0x40>)
 80012e4:	701a      	strb	r2, [r3, #0]
	return status;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000204 	.word	0x20000204
 80012f4:	20000222 	.word	0x20000222

080012f8 <MPU6050_process_data>:

void MPU6050_process_data(){
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	ed2d 8b06 	vpush	{d8-d10}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	//shift buffer data into variables
	//raw data to rotation per second (131 LSB/deg/s)*(pi/180)

	acc[0]= ( (((int16_t) rx_data[0]) << 8) | ((int16_t) rx_data[1]) );
 8001302:	4bc6      	ldr	r3, [pc, #792]	@ (800161c <MPU6050_process_data+0x324>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	4bc4      	ldr	r3, [pc, #784]	@ (800161c <MPU6050_process_data+0x324>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	4bc2      	ldr	r3, [pc, #776]	@ (8001620 <MPU6050_process_data+0x328>)
 8001316:	801a      	strh	r2, [r3, #0]
	acc[1] = ( (((int16_t) rx_data[2]) << 8) | ((int16_t) rx_data[3]) );
 8001318:	4bc0      	ldr	r3, [pc, #768]	@ (800161c <MPU6050_process_data+0x324>)
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	4bbe      	ldr	r3, [pc, #760]	@ (800161c <MPU6050_process_data+0x324>)
 8001322:	78db      	ldrb	r3, [r3, #3]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4bbd      	ldr	r3, [pc, #756]	@ (8001620 <MPU6050_process_data+0x328>)
 800132c:	805a      	strh	r2, [r3, #2]
	acc[2] = ( (((int16_t) rx_data[4]) << 8) | ((int16_t) rx_data[5]) );
 800132e:	4bbb      	ldr	r3, [pc, #748]	@ (800161c <MPU6050_process_data+0x324>)
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4bb9      	ldr	r3, [pc, #740]	@ (800161c <MPU6050_process_data+0x324>)
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	4bb7      	ldr	r3, [pc, #732]	@ (8001620 <MPU6050_process_data+0x328>)
 8001342:	809a      	strh	r2, [r3, #4]

	temp = (rx_data[6]<<8)|rx_data[7];
 8001344:	4bb5      	ldr	r3, [pc, #724]	@ (800161c <MPU6050_process_data+0x324>)
 8001346:	799b      	ldrb	r3, [r3, #6]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	4bb3      	ldr	r3, [pc, #716]	@ (800161c <MPU6050_process_data+0x324>)
 800134e:	79db      	ldrb	r3, [r3, #7]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	4bb3      	ldr	r3, [pc, #716]	@ (8001624 <MPU6050_process_data+0x32c>)
 8001358:	801a      	strh	r2, [r3, #0]

	gyro[0] = ( (((int16_t) rx_data[8]) << 8) | ((int16_t) rx_data[9]) );
 800135a:	4bb0      	ldr	r3, [pc, #704]	@ (800161c <MPU6050_process_data+0x324>)
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	4bae      	ldr	r3, [pc, #696]	@ (800161c <MPU6050_process_data+0x324>)
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21a      	sxth	r2, r3
 800136c:	4bae      	ldr	r3, [pc, #696]	@ (8001628 <MPU6050_process_data+0x330>)
 800136e:	801a      	strh	r2, [r3, #0]
	gyro[1] = ( (((int16_t) rx_data[10]) << 8) | ((int16_t) rx_data[11]) );
 8001370:	4baa      	ldr	r3, [pc, #680]	@ (800161c <MPU6050_process_data+0x324>)
 8001372:	7a9b      	ldrb	r3, [r3, #10]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	4ba8      	ldr	r3, [pc, #672]	@ (800161c <MPU6050_process_data+0x324>)
 800137a:	7adb      	ldrb	r3, [r3, #11]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	4ba9      	ldr	r3, [pc, #676]	@ (8001628 <MPU6050_process_data+0x330>)
 8001384:	805a      	strh	r2, [r3, #2]
	gyro[2] = ( (((int16_t) rx_data[12]) << 8) | ((int16_t) rx_data[13]) );
 8001386:	4ba5      	ldr	r3, [pc, #660]	@ (800161c <MPU6050_process_data+0x324>)
 8001388:	7b1b      	ldrb	r3, [r3, #12]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	4ba3      	ldr	r3, [pc, #652]	@ (800161c <MPU6050_process_data+0x324>)
 8001390:	7b5b      	ldrb	r3, [r3, #13]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	4ba3      	ldr	r3, [pc, #652]	@ (8001628 <MPU6050_process_data+0x330>)
 800139a:	809a      	strh	r2, [r3, #4]


	gyro_rps[0] = (gyro[0]*RAW_TO_RPS) - gyro_drift[0];
 800139c:	4ba2      	ldr	r3, [pc, #648]	@ (8001628 <MPU6050_process_data+0x330>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800162c <MPU6050_process_data+0x334>
 80013ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001630 <MPU6050_process_data+0x338>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001634 <MPU6050_process_data+0x33c>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
	gyro_rps[1] = (gyro[1]*RAW_TO_RPS) - gyro_drift[1];
 80013c2:	4b99      	ldr	r3, [pc, #612]	@ (8001628 <MPU6050_process_data+0x330>)
 80013c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800162c <MPU6050_process_data+0x334>
 80013d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d8:	4b95      	ldr	r3, [pc, #596]	@ (8001630 <MPU6050_process_data+0x338>)
 80013da:	edd3 7a01 	vldr	s15, [r3, #4]
 80013de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e2:	4b94      	ldr	r3, [pc, #592]	@ (8001634 <MPU6050_process_data+0x33c>)
 80013e4:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_rps[2] = (gyro[2]*RAW_TO_RPS) - gyro_drift[2];
 80013e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001628 <MPU6050_process_data+0x330>)
 80013ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800162c <MPU6050_process_data+0x334>
 80013fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001630 <MPU6050_process_data+0x338>)
 8001400:	edd3 7a02 	vldr	s15, [r3, #8]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	4b8a      	ldr	r3, [pc, #552]	@ (8001634 <MPU6050_process_data+0x33c>)
 800140a:	edc3 7a02 	vstr	s15, [r3, #8]

	acc_mps2[0] = acc[0]*RAW_TO_MPS2;
 800140e:	4b84      	ldr	r3, [pc, #528]	@ (8001620 <MPU6050_process_data+0x328>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001638 <MPU6050_process_data+0x340>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	4b85      	ldr	r3, [pc, #532]	@ (800163c <MPU6050_process_data+0x344>)
 8001426:	edc3 7a00 	vstr	s15, [r3]
	acc_mps2[1] = acc[1]*RAW_TO_MPS2;
 800142a:	4b7d      	ldr	r3, [pc, #500]	@ (8001620 <MPU6050_process_data+0x328>)
 800142c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001638 <MPU6050_process_data+0x340>
 800143c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001440:	4b7e      	ldr	r3, [pc, #504]	@ (800163c <MPU6050_process_data+0x344>)
 8001442:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_mps2[2] = acc[2]*RAW_TO_MPS2;
 8001446:	4b76      	ldr	r3, [pc, #472]	@ (8001620 <MPU6050_process_data+0x328>)
 8001448:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001638 <MPU6050_process_data+0x340>
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	4b77      	ldr	r3, [pc, #476]	@ (800163c <MPU6050_process_data+0x344>)
 800145e:	edc3 7a02 	vstr	s15, [r3, #8]

//integrate over time
	float mpudt = 1.0f/1000.0f;
 8001462:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <MPU6050_process_data+0x348>)
 8001464:	607b      	str	r3, [r7, #4]
//	gyropos[1]+= gyro_rps[1]*mpudt;
//	gyropos[2]+= gyro_rps[2]*mpudt;

//integrate over time and convert to global frame

	gyropos[0] = gyropos[0] + (gyro_rps[0] + tanf(gyropos[1])*((gyro_rps[1])*sinf(gyropos[0])+(gyro_rps[2])*cosf(gyropos[0])))*mpudt;
 8001466:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <MPU6050_process_data+0x34c>)
 8001468:	ed93 8a00 	vldr	s16, [r3]
 800146c:	4b71      	ldr	r3, [pc, #452]	@ (8001634 <MPU6050_process_data+0x33c>)
 800146e:	edd3 8a00 	vldr	s17, [r3]
 8001472:	4b74      	ldr	r3, [pc, #464]	@ (8001644 <MPU6050_process_data+0x34c>)
 8001474:	edd3 7a01 	vldr	s15, [r3, #4]
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	f00f f994 	bl	80107a8 <tanf>
 8001480:	eeb0 aa40 	vmov.f32	s20, s0
 8001484:	4b6b      	ldr	r3, [pc, #428]	@ (8001634 <MPU6050_process_data+0x33c>)
 8001486:	ed93 9a01 	vldr	s18, [r3, #4]
 800148a:	4b6e      	ldr	r3, [pc, #440]	@ (8001644 <MPU6050_process_data+0x34c>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	f00f f942 	bl	801071c <sinf>
 8001498:	eef0 7a40 	vmov.f32	s15, s0
 800149c:	ee29 9a27 	vmul.f32	s18, s18, s15
 80014a0:	4b64      	ldr	r3, [pc, #400]	@ (8001634 <MPU6050_process_data+0x33c>)
 80014a2:	edd3 9a02 	vldr	s19, [r3, #8]
 80014a6:	4b67      	ldr	r3, [pc, #412]	@ (8001644 <MPU6050_process_data+0x34c>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb0 0a67 	vmov.f32	s0, s15
 80014b0:	f00f f8f0 	bl	8010694 <cosf>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	ee69 7aa7 	vmul.f32	s15, s19, s15
 80014bc:	ee79 7a27 	vadd.f32	s15, s18, s15
 80014c0:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80014c4:	ee38 7aa7 	vadd.f32	s14, s17, s15
 80014c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <MPU6050_process_data+0x34c>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]
	gyropos[1] = gyropos[1] + ((gyro_rps[1])*cosf(gyropos[0])-(gyro_rps[2])*sinf(gyropos[0]))*mpudt;
 80014da:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <MPU6050_process_data+0x34c>)
 80014dc:	ed93 8a01 	vldr	s16, [r3, #4]
 80014e0:	4b54      	ldr	r3, [pc, #336]	@ (8001634 <MPU6050_process_data+0x33c>)
 80014e2:	edd3 8a01 	vldr	s17, [r3, #4]
 80014e6:	4b57      	ldr	r3, [pc, #348]	@ (8001644 <MPU6050_process_data+0x34c>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	f00f f8d0 	bl	8010694 <cosf>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80014fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001634 <MPU6050_process_data+0x33c>)
 80014fe:	ed93 9a02 	vldr	s18, [r3, #8]
 8001502:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <MPU6050_process_data+0x34c>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	f00f f906 	bl	801071c <sinf>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	ee69 7a27 	vmul.f32	s15, s18, s15
 8001518:	ee38 7ae7 	vsub.f32	s14, s17, s15
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001528:	4b46      	ldr	r3, [pc, #280]	@ (8001644 <MPU6050_process_data+0x34c>)
 800152a:	edc3 7a01 	vstr	s15, [r3, #4]
	gyropos[2]+= gyro_rps[2]*mpudt;
 800152e:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <MPU6050_process_data+0x34c>)
 8001530:	ed93 7a02 	vldr	s14, [r3, #8]
 8001534:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <MPU6050_process_data+0x33c>)
 8001536:	edd3 6a02 	vldr	s13, [r3, #8]
 800153a:	edd7 7a01 	vldr	s15, [r7, #4]
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <MPU6050_process_data+0x34c>)
 8001548:	edc3 7a02 	vstr	s15, [r3, #8]

//	//roll
	accpos[0] = atan2((acc[1] ),(sqrt(acc[0]*acc[0] + acc[2]*acc[2])));
 800154c:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <MPU6050_process_data+0x328>)
 800154e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f80e 	bl	8000574 <__aeabi_i2d>
 8001558:	4604      	mov	r4, r0
 800155a:	460d      	mov	r5, r1
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <MPU6050_process_data+0x328>)
 800155e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001562:	461a      	mov	r2, r3
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MPU6050_process_data+0x328>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MPU6050_process_data+0x328>)
 8001570:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001574:	4619      	mov	r1, r3
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MPU6050_process_data+0x328>)
 8001578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe fff6 	bl	8000574 <__aeabi_i2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	ec43 2b10 	vmov	d0, r2, r3
 8001590:	f00f f854 	bl	801063c <sqrt>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	eef0 7a60 	vmov.f32	s15, s1
 800159c:	eeb0 1a47 	vmov.f32	s2, s14
 80015a0:	eef0 1a67 	vmov.f32	s3, s15
 80015a4:	ec45 4b10 	vmov	d0, r4, r5
 80015a8:	f00f f846 	bl	8010638 <atan2>
 80015ac:	ec53 2b10 	vmov	r2, r3, d0
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fb40 	bl	8000c38 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <MPU6050_process_data+0x350>)
 80015bc:	6013      	str	r3, [r2, #0]
	//pitch
	accpos[1] = atan2((-1 * acc[0] ),(sqrt(acc[1]*acc[1] + acc[2]*acc[2])));
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MPU6050_process_data+0x328>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	425b      	negs	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffd4 	bl	8000574 <__aeabi_i2d>
 80015cc:	4604      	mov	r4, r0
 80015ce:	460d      	mov	r5, r1
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MPU6050_process_data+0x328>)
 80015d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MPU6050_process_data+0x328>)
 80015da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015de:	fb03 f202 	mul.w	r2, r3, r2
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MPU6050_process_data+0x328>)
 80015e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MPU6050_process_data+0x328>)
 80015ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffbc 	bl	8000574 <__aeabi_i2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b10 	vmov	d0, r2, r3
 8001604:	f00f f81a 	bl	801063c <sqrt>
 8001608:	eeb0 7a40 	vmov.f32	s14, s0
 800160c:	eef0 7a60 	vmov.f32	s15, s1
 8001610:	eeb0 1a47 	vmov.f32	s2, s14
 8001614:	eef0 1a67 	vmov.f32	s3, s15
 8001618:	e018      	b.n	800164c <MPU6050_process_data+0x354>
 800161a:	bf00      	nop
 800161c:	20000204 	.word	0x20000204
 8001620:	2000021c 	.word	0x2000021c
 8001624:	2000021a 	.word	0x2000021a
 8001628:	20000214 	.word	0x20000214
 800162c:	390bb3fd 	.word	0x390bb3fd
 8001630:	20000254 	.word	0x20000254
 8001634:	20000224 	.word	0x20000224
 8001638:	3a9cf5c3 	.word	0x3a9cf5c3
 800163c:	20000248 	.word	0x20000248
 8001640:	3a83126f 	.word	0x3a83126f
 8001644:	20000230 	.word	0x20000230
 8001648:	2000023c 	.word	0x2000023c
 800164c:	ec45 4b10 	vmov	d0, r4, r5
 8001650:	f00e fff2 	bl	8010638 <atan2>
 8001654:	ec53 2b10 	vmov	r2, r3, d0
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff faec 	bl	8000c38 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	4a45      	ldr	r2, [pc, #276]	@ (8001778 <MPU6050_process_data+0x480>)
 8001664:	6053      	str	r3, [r2, #4]

	roll = 0.96*gyropos[0] + 0.04*accpos[0];
 8001666:	4b45      	ldr	r3, [pc, #276]	@ (800177c <MPU6050_process_data+0x484>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff94 	bl	8000598 <__aeabi_f2d>
 8001670:	a33b      	add	r3, pc, #236	@ (adr r3, 8001760 <MPU6050_process_data+0x468>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffe7 	bl	8000648 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <MPU6050_process_data+0x480>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff86 	bl	8000598 <__aeabi_f2d>
 800168c:	a336      	add	r3, pc, #216	@ (adr r3, 8001768 <MPU6050_process_data+0x470>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ffd9 	bl	8000648 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f7fe fe1d 	bl	80002dc <__adddf3>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fac5 	bl	8000c38 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a33      	ldr	r2, [pc, #204]	@ (8001780 <MPU6050_process_data+0x488>)
 80016b2:	6013      	str	r3, [r2, #0]
	pitch = 0.96*gyropos[1] + 0.04*accpos[1];
 80016b4:	4b31      	ldr	r3, [pc, #196]	@ (800177c <MPU6050_process_data+0x484>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a328      	add	r3, pc, #160	@ (adr r3, 8001760 <MPU6050_process_data+0x468>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4b29      	ldr	r3, [pc, #164]	@ (8001778 <MPU6050_process_data+0x480>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff5f 	bl	8000598 <__aeabi_f2d>
 80016da:	a323      	add	r3, pc, #140	@ (adr r3, 8001768 <MPU6050_process_data+0x470>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fdf6 	bl	80002dc <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa9e 	bl	8000c38 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a21      	ldr	r2, [pc, #132]	@ (8001784 <MPU6050_process_data+0x48c>)
 8001700:	6013      	str	r3, [r2, #0]
	yaw = 0.96*gyropos[2] + 0.4*accpos[2];
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MPU6050_process_data+0x484>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff46 	bl	8000598 <__aeabi_f2d>
 800170c:	a314      	add	r3, pc, #80	@ (adr r3, 8001760 <MPU6050_process_data+0x468>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff99 	bl	8000648 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MPU6050_process_data+0x480>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff38 	bl	8000598 <__aeabi_f2d>
 8001728:	a311      	add	r3, pc, #68	@ (adr r3, 8001770 <MPU6050_process_data+0x478>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff8b 	bl	8000648 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fdcf 	bl	80002dc <__adddf3>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa77 	bl	8000c38 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <MPU6050_process_data+0x490>)
 800174e:	6013      	str	r3, [r2, #0]


}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	ecbd 8b06 	vpop	{d8-d10}
 800175a:	bdb0      	pop	{r4, r5, r7, pc}
 800175c:	f3af 8000 	nop.w
 8001760:	eb851eb8 	.word	0xeb851eb8
 8001764:	3feeb851 	.word	0x3feeb851
 8001768:	47ae147b 	.word	0x47ae147b
 800176c:	3fa47ae1 	.word	0x3fa47ae1
 8001770:	9999999a 	.word	0x9999999a
 8001774:	3fd99999 	.word	0x3fd99999
 8001778:	2000023c 	.word	0x2000023c
 800177c:	20000230 	.word	0x20000230
 8001780:	20000260 	.word	0x20000260
 8001784:	20000264 	.word	0x20000264
 8001788:	20000268 	.word	0x20000268

0800178c <MPU6050_Initialize>:
 */

#include "MPU6050_D.h"

uint8_t MPU6050_Initialize(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
	dev-> i2cHandle = i2cHandle;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0] = 0.0f;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.0f;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.0f;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]

	dev->tmp_c = 0.0f;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]

	dev->gyr_rps[0] = 0.0f;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
	dev->gyr_rps[1] = 0.0f;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
	dev->gyr_rps[2] = 0.0f;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]

	for (int n = 0; n < 14; n++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e008      	b.n	80017ec <MPU6050_Initialize+0x60>
	{
		dev->rxData[n] = 0;
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	3320      	adds	r3, #32
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	for (int n = 0; n < 14; n++)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b0d      	cmp	r3, #13
 80017f0:	ddf3      	ble.n	80017da <MPU6050_Initialize+0x4e>
	}

	dev->acc_offset[0] = 0;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev->acc_offset[1] = 0;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	861a      	strh	r2, [r3, #48]	@ 0x30
	dev->acc_offset[2] = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	865a      	strh	r2, [r3, #50]	@ 0x32

	dev->gyr_offset[0] = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev->gyr_offset[1] = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	86da      	strh	r2, [r3, #54]	@ 0x36
	dev->gyr_offset[2] = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	871a      	strh	r2, [r3, #56]	@ 0x38

	dev->newData = 0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

	dev->rxFlag = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

	dev->gotData = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	uint8_t errNum = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	uint8_t regData;

	status = MPU6050_Read_Register(dev, MPU6050_REG_WHO_AM_I, &regData);
 8001832:	f107 0309 	add.w	r3, r7, #9
 8001836:	461a      	mov	r2, r3
 8001838:	2175      	movs	r1, #117	@ 0x75
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f8be 	bl	80019bc <MPU6050_Read_Register>
 8001840:	4603      	mov	r3, r0
 8001842:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001844:	7abb      	ldrb	r3, [r7, #10]
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	4413      	add	r3, r2
 8001856:	72fb      	strb	r3, [r7, #11]

	if (regData != (MPU6050_I2C_ADDR >> 1))
 8001858:	7a7b      	ldrb	r3, [r7, #9]
 800185a:	2b68      	cmp	r3, #104	@ 0x68
 800185c:	d001      	beq.n	8001862 <MPU6050_Initialize+0xd6>
	{
		return 255;
 800185e:	23ff      	movs	r3, #255	@ 0xff
 8001860:	e0a8      	b.n	80019b4 <MPU6050_Initialize+0x228>
	}

	regData = 0b00000001; /* wake up, set clock source to X gyro*/
 8001862:	2301      	movs	r3, #1
 8001864:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_PWR_MGMT_1, &regData);
 8001866:	f107 0309 	add.w	r3, r7, #9
 800186a:	461a      	mov	r2, r3
 800186c:	216b      	movs	r1, #107	@ 0x6b
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8bf 	bl	80019f2 <MPU6050_Write_Register>
 8001874:	4603      	mov	r3, r0
 8001876:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001878:	7abb      	ldrb	r3, [r7, #10]
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	4413      	add	r3, r2
 800188a:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 800188c:	200a      	movs	r0, #10
 800188e:	f001 fd9b 	bl	80033c8 <HAL_Delay>

	regData = 0b00000000; /* sample rate division, 1 kHz/1 = 1000 Hz */
 8001892:	2300      	movs	r3, #0
 8001894:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_SMPRT_DIV, &regData);
 8001896:	f107 0309 	add.w	r3, r7, #9
 800189a:	461a      	mov	r2, r3
 800189c:	2119      	movs	r1, #25
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8a7 	bl	80019f2 <MPU6050_Write_Register>
 80018a4:	4603      	mov	r3, r0
 80018a6:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 80018a8:	7abb      	ldrb	r3, [r7, #10]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	4413      	add	r3, r2
 80018ba:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 80018bc:	200a      	movs	r0, #10
 80018be:	f001 fd83 	bl	80033c8 <HAL_Delay>

	regData = 0b00000001; /* DLPF = 1 (sample rate 1kHz), 188Hz BW Gyro */
 80018c2:	2301      	movs	r3, #1
 80018c4:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_CONFIG, &regData);
 80018c6:	f107 0309 	add.w	r3, r7, #9
 80018ca:	461a      	mov	r2, r3
 80018cc:	211a      	movs	r1, #26
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f88f 	bl	80019f2 <MPU6050_Write_Register>
 80018d4:	4603      	mov	r3, r0
 80018d6:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 80018d8:	7abb      	ldrb	r3, [r7, #10]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	4413      	add	r3, r2
 80018ea:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 80018ec:	200a      	movs	r0, #10
 80018ee:	f001 fd6b 	bl	80033c8 <HAL_Delay>

	regData = 0b00000000; /* full scale range 250 degrees/s */
 80018f2:	2300      	movs	r3, #0
 80018f4:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_GYRO_CONFIG, &regData);
 80018f6:	f107 0309 	add.w	r3, r7, #9
 80018fa:	461a      	mov	r2, r3
 80018fc:	211b      	movs	r1, #27
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f877 	bl	80019f2 <MPU6050_Write_Register>
 8001904:	4603      	mov	r3, r0
 8001906:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001908:	7abb      	ldrb	r3, [r7, #10]
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	4413      	add	r3, r2
 800191a:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f001 fd53 	bl	80033c8 <HAL_Delay>

	regData = 0b00001000; /* full scale range +/- 4g */
 8001922:	2308      	movs	r3, #8
 8001924:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_ACCEL_CONFIG, &regData);
 8001926:	f107 0309 	add.w	r3, r7, #9
 800192a:	461a      	mov	r2, r3
 800192c:	211c      	movs	r1, #28
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f85f 	bl	80019f2 <MPU6050_Write_Register>
 8001934:	4603      	mov	r3, r0
 8001936:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001938:	7abb      	ldrb	r3, [r7, #10]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	4413      	add	r3, r2
 800194a:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 800194c:	200a      	movs	r0, #10
 800194e:	f001 fd3b 	bl	80033c8 <HAL_Delay>

	regData = 0b00110000; /* latch interrupt, clear on read */
 8001952:	2330      	movs	r3, #48	@ 0x30
 8001954:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_INT_PIN_CFG, &regData);
 8001956:	f107 0309 	add.w	r3, r7, #9
 800195a:	461a      	mov	r2, r3
 800195c:	2137      	movs	r1, #55	@ 0x37
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f847 	bl	80019f2 <MPU6050_Write_Register>
 8001964:	4603      	mov	r3, r0
 8001966:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001968:	7abb      	ldrb	r3, [r7, #10]
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	4413      	add	r3, r2
 800197a:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f001 fd23 	bl	80033c8 <HAL_Delay>

	regData = 0b00000001; /* data ready interrupt */
 8001982:	2301      	movs	r3, #1
 8001984:	727b      	strb	r3, [r7, #9]
	status = MPU6050_Write_Register(dev, MPU6050_REG_INT_ENABLE, &regData);
 8001986:	f107 0309 	add.w	r3, r7, #9
 800198a:	461a      	mov	r2, r3
 800198c:	2138      	movs	r1, #56	@ 0x38
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f82f 	bl	80019f2 <MPU6050_Write_Register>
 8001994:	4603      	mov	r3, r0
 8001996:	72bb      	strb	r3, [r7, #10]
	errNum += (status != HAL_OK);
 8001998:	7abb      	ldrb	r3, [r7, #10]
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	4413      	add	r3, r2
 80019aa:	72fb      	strb	r3, [r7, #11]

	HAL_Delay(100);
 80019ac:	2064      	movs	r0, #100	@ 0x64
 80019ae:	f001 fd0b 	bl	80033c8 <HAL_Delay>

	return errNum;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <MPU6050_Read_Register>:

	return status;
}

HAL_StatusTypeDef MPU6050_Read_Register(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	460b      	mov	r3, r1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2301      	movs	r3, #1
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	21d0      	movs	r1, #208	@ 0xd0
 80019e4:	f003 fcd8 	bl	8005398 <HAL_I2C_Mem_Read>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <MPU6050_Write_Register>:
{
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}

HAL_StatusTypeDef MPU6050_Write_Register(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b088      	sub	sp, #32
 80019f6:	af04      	add	r7, sp, #16
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	460b      	mov	r3, r1
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	7afb      	ldrb	r3, [r7, #11]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	21d0      	movs	r1, #208	@ 0xd0
 8001a1a:	f003 fba9 	bl	8005170 <HAL_I2C_Mem_Write>
 8001a1e:	4603      	mov	r3, r0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <BLDC_TorquetoPWM>:

//Motor driver stuff

void print(char *msg);

void BLDC_TorquetoPWM(float theta){
 8001a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a2c:	ed2d 8b02 	vpush	{d8}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	ed87 0a01 	vstr	s0, [r7, #4]

	float x;
	float y;

	//convert from electrical angle to mechanical angle
	theta = theta * POLE_PAIRS - EAU;
 8001a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a44:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001c80 <BLDC_TorquetoPWM+0x258>
 8001a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a4c:	edc7 7a01 	vstr	s15, [r7, #4]
	//Inverse park transform
	x = d*cosf(theta) - torque*sinf(theta);
 8001a50:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a54:	f00e fe1e 	bl	8010694 <cosf>
 8001a58:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5c:	4b89      	ldr	r3, [pc, #548]	@ (8001c84 <BLDC_TorquetoPWM+0x25c>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a6a:	f00e fe57 	bl	801071c <sinf>
 8001a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a72:	4b85      	ldr	r3, [pc, #532]	@ (8001c88 <BLDC_TorquetoPWM+0x260>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001a80:	edc7 7a03 	vstr	s15, [r7, #12]
	y = d*sinf(theta) + torque*cosf(theta);
 8001a84:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a88:	f00e fe48 	bl	801071c <sinf>
 8001a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a90:	4b7c      	ldr	r3, [pc, #496]	@ (8001c84 <BLDC_TorquetoPWM+0x25c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a9e:	f00e fdf9 	bl	8010694 <cosf>
 8001aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa6:	4b78      	ldr	r3, [pc, #480]	@ (8001c88 <BLDC_TorquetoPWM+0x260>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ab4:	edc7 7a02 	vstr	s15, [r7, #8]

	//Inverse clarke transform
	a = x;
 8001ab8:	4a74      	ldr	r2, [pc, #464]	@ (8001c8c <BLDC_TorquetoPWM+0x264>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6013      	str	r3, [r2, #0]
	b = -1.0*x/2.0 + y*M_SQRT3_OVER_2;
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7fe fd6a 	bl	8000598 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4690      	mov	r8, r2
 8001aca:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fedf 	bl	800089c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7fe fd56 	bl	8000598 <__aeabi_f2d>
 8001aec:	a362      	add	r3, pc, #392	@ (adr r3, 8001c78 <BLDC_TorquetoPWM+0x250>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fda9 	bl	8000648 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4640      	mov	r0, r8
 8001afc:	4649      	mov	r1, r9
 8001afe:	f7fe fbed 	bl	80002dc <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f895 	bl	8000c38 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a5f      	ldr	r2, [pc, #380]	@ (8001c90 <BLDC_TorquetoPWM+0x268>)
 8001b12:	6013      	str	r3, [r2, #0]
	c = -1.0*x/2.0 - y*M_SQRT3_OVER_2;
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd3f 	bl	8000598 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe feb4 	bl	800089c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	f7fe fd2b 	bl	8000598 <__aeabi_f2d>
 8001b42:	a34d      	add	r3, pc, #308	@ (adr r3, 8001c78 <BLDC_TorquetoPWM+0x250>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fd7e 	bl	8000648 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fbc0 	bl	80002d8 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f86a 	bl	8000c38 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <BLDC_TorquetoPWM+0x26c>)
 8001b68:	6013      	str	r3, [r2, #0]

	counter_period = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <BLDC_TorquetoPWM+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <BLDC_TorquetoPWM+0x274>)
 8001b74:	801a      	strh	r2, [r3, #0]

	TIM1->CCR1 = ((a/2)+0.5)* counter_period;
 8001b76:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <BLDC_TorquetoPWM+0x264>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b84:	ee16 0a90 	vmov	r0, s13
 8001b88:	f7fe fd06 	bl	8000598 <__aeabi_f2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <BLDC_TorquetoPWM+0x278>)
 8001b92:	f7fe fba3 	bl	80002dc <__adddf3>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <BLDC_TorquetoPWM+0x274>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fce6 	bl	8000574 <__aeabi_i2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd4a 	bl	8000648 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4c3a      	ldr	r4, [pc, #232]	@ (8001ca4 <BLDC_TorquetoPWM+0x27c>)
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7ff f81b 	bl	8000bf8 <__aeabi_d2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM1->CCR2 = ((b/2)+0.5)* counter_period;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <BLDC_TorquetoPWM+0x268>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bd4:	ee16 0a90 	vmov	r0, s13
 8001bd8:	f7fe fcde 	bl	8000598 <__aeabi_f2d>
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca0 <BLDC_TorquetoPWM+0x278>)
 8001be2:	f7fe fb7b 	bl	80002dc <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <BLDC_TorquetoPWM+0x274>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcbe 	bl	8000574 <__aeabi_i2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fd22 	bl	8000648 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4c26      	ldr	r4, [pc, #152]	@ (8001ca4 <BLDC_TorquetoPWM+0x27c>)
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe fff3 	bl	8000bf8 <__aeabi_d2uiz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	63a3      	str	r3, [r4, #56]	@ 0x38
	TIM1->CCR3 = ((c/2)+0.5)* counter_period;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <BLDC_TorquetoPWM+0x26c>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c24:	ee16 0a90 	vmov	r0, s13
 8001c28:	f7fe fcb6 	bl	8000598 <__aeabi_f2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <BLDC_TorquetoPWM+0x278>)
 8001c32:	f7fe fb53 	bl	80002dc <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <BLDC_TorquetoPWM+0x274>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc96 	bl	8000574 <__aeabi_i2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fcfa 	bl	8000648 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4c12      	ldr	r4, [pc, #72]	@ (8001ca4 <BLDC_TorquetoPWM+0x27c>)
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffcb 	bl	8000bf8 <__aeabi_d2uiz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	63e3      	str	r3, [r4, #60]	@ 0x3c

//	sprintf(buffer, "%lu, %lu, %lu\r\n", TIM1->CCR1, TIM1->CCR2, TIM1->CCR3);
//	print(buffer);
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	ecbd 8b02 	vpop	{d8}
 8001c70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c74:	f3af 8000 	nop.w
 8001c78:	e8584b4e 	.word	0xe8584b4e
 8001c7c:	3febb67a 	.word	0x3febb67a
 8001c80:	4084624e 	.word	0x4084624e
 8001c84:	200006ac 	.word	0x200006ac
 8001c88:	200006a8 	.word	0x200006a8
 8001c8c:	200006b0 	.word	0x200006b0
 8001c90:	200006b4 	.word	0x200006b4
 8001c94:	200006b8 	.word	0x200006b8
 8001c98:	2000044c 	.word	0x2000044c
 8001c9c:	200006bc 	.word	0x200006bc
 8001ca0:	3fe00000 	.word	0x3fe00000
 8001ca4:	40012c00 	.word	0x40012c00

08001ca8 <PID>:

void count(){
	count_test += 1;
}

int32_t PID(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	static float Prev_error;
	//	static float integral;
	float derivative;

	//Calculate error, with direction
	if ((angle_setpoint - angle) > 0){
 8001cae:	4b68      	ldr	r3, [pc, #416]	@ (8001e50 <PID+0x1a8>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <PID+0x1ac>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	dd3e      	ble.n	8001d46 <PID+0x9e>
		if ((angle_setpoint - angle)> M_PI){
 8001cc8:	4b61      	ldr	r3, [pc, #388]	@ (8001e50 <PID+0x1a8>)
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <PID+0x1ac>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	ee17 0a90 	vmov	r0, s15
 8001cdc:	f7fe fc5c 	bl	8000598 <__aeabi_f2d>
 8001ce0:	a355      	add	r3, pc, #340	@ (adr r3, 8001e38 <PID+0x190>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe ff3f 	bl	8000b68 <__aeabi_dcmpgt>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <PID+0x82>
			Curr_error = (2*M_PI - (angle_setpoint - angle));
 8001cf0:	4b57      	ldr	r3, [pc, #348]	@ (8001e50 <PID+0x1a8>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	4b57      	ldr	r3, [pc, #348]	@ (8001e54 <PID+0x1ac>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	ee17 0a90 	vmov	r0, s15
 8001d04:	f7fe fc48 	bl	8000598 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	a14c      	add	r1, pc, #304	@ (adr r1, 8001e40 <PID+0x198>)
 8001d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d12:	f7fe fae1 	bl	80002d8 <__aeabi_dsub>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe ff8b 	bl	8000c38 <__aeabi_d2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <PID+0x1b0>)
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e04e      	b.n	8001dc8 <PID+0x120>
		}else{
			Curr_error = -(angle_setpoint - angle);
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <PID+0x1a8>)
 8001d2c:	ed93 7a00 	vldr	s14, [r3]
 8001d30:	4b48      	ldr	r3, [pc, #288]	@ (8001e54 <PID+0x1ac>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	eef1 7a67 	vneg.f32	s15, s15
 8001d3e:	4b46      	ldr	r3, [pc, #280]	@ (8001e58 <PID+0x1b0>)
 8001d40:	edc3 7a00 	vstr	s15, [r3]
 8001d44:	e040      	b.n	8001dc8 <PID+0x120>
		}

	}else{
		if ((angle_setpoint - angle)< -M_PI){
 8001d46:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <PID+0x1a8>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <PID+0x1ac>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	ee17 0a90 	vmov	r0, s15
 8001d5a:	f7fe fc1d 	bl	8000598 <__aeabi_f2d>
 8001d5e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001e48 <PID+0x1a0>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fee2 	bl	8000b2c <__aeabi_dcmplt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01f      	beq.n	8001dae <PID+0x106>
			Curr_error = -(2*M_PI + (angle_setpoint - angle));
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <PID+0x1a8>)
 8001d70:	ed93 7a00 	vldr	s14, [r3]
 8001d74:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <PID+0x1ac>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	ee17 0a90 	vmov	r0, s15
 8001d82:	f7fe fc09 	bl	8000598 <__aeabi_f2d>
 8001d86:	a32e      	add	r3, pc, #184	@ (adr r3, 8001e40 <PID+0x198>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe faa6 	bl	80002dc <__adddf3>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe ff4e 	bl	8000c38 <__aeabi_d2f>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef1 7a67 	vneg.f32	s15, s15
 8001da6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <PID+0x1b0>)
 8001da8:	edc3 7a00 	vstr	s15, [r3]
 8001dac:	e00c      	b.n	8001dc8 <PID+0x120>
		}else{
			Curr_error = -(angle_setpoint - angle);
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <PID+0x1a8>)
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <PID+0x1ac>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	eef1 7a67 	vneg.f32	s15, s15
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <PID+0x1b0>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	derivative = (Curr_error-Prev_error)/dt;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <PID+0x1b0>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <PID+0x1b4>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dd8:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <PID+0x1b8>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	edc7 7a01 	vstr	s15, [r7, #4]

//	integral += Curr_error*dt;
//	if (Curr_error >= 0.01 | Curr_error <= -0.01 ){

	torque = P*Curr_error;
 8001de6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <PID+0x1bc>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <PID+0x1b0>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <PID+0x1c0>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
//
//		torque = 0;
//
//	}

	torque = fmaxf(fminf(torque,0.25),-0.25);
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <PID+0x1c0>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	f00e fd16 	bl	801083a <fminf>
 8001e0e:	eef0 7a40 	vmov.f32	s15, s0
 8001e12:	eefd 0a00 	vmov.f32	s1, #208	@ 0xbe800000 -0.250
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	f00e fcf1 	bl	8010800 <fmaxf>
 8001e1e:	eef0 7a40 	vmov.f32	s15, s0
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <PID+0x1c0>)
 8001e24:	edc3 7a00 	vstr	s15, [r3]
//	sprintf(buffer, "%d\r\n", (int)(Curr_error*100000));
//	print(buffer);


//	prev_dt = dt;
}
 8001e28:	bf00      	nop
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	54442d18 	.word	0x54442d18
 8001e3c:	400921fb 	.word	0x400921fb
 8001e40:	54442d18 	.word	0x54442d18
 8001e44:	401921fb 	.word	0x401921fb
 8001e48:	54442d18 	.word	0x54442d18
 8001e4c:	c00921fb 	.word	0xc00921fb
 8001e50:	20000680 	.word	0x20000680
 8001e54:	2000067c 	.word	0x2000067c
 8001e58:	200006c0 	.word	0x200006c0
 8001e5c:	2000070c 	.word	0x2000070c
 8001e60:	20000000 	.word	0x20000000
 8001e64:	200006c4 	.word	0x200006c4
 8001e68:	200006a8 	.word	0x200006a8

08001e6c <HAL_TIM_PeriodElapsedCallback>:

//Callbacks

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10c      	bne.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0x2c>
//		play_music(&htim6);
		PID();
 8001e7e:	f7ff ff13 	bl	8001ca8 <PID>
		BLDC_TorquetoPWM(angle);
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	f7ff fdcc 	bl	8001a28 <BLDC_TorquetoPWM>
//		angle_setpoint = fmaxf(fminf((potVal/ 4096.0f)*2 *M_PI, 2 *M_PI),0);
		angle_setpoint = pitch;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e96:	6013      	str	r3, [r2, #0]
	}
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40001400 	.word	0x40001400
 8001ea4:	2000067c 	.word	0x2000067c
 8001ea8:	20000264 	.word	0x20000264
 8001eac:	20000680 	.word	0x20000680

08001eb0 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
//Update value once every period
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7f1b      	ldrb	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d168      	bne.n	8001f92 <HAL_TIM_IC_CaptureCallback+0xe2>
		period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f007 fa5a 	bl	800937c <HAL_TIM_ReadCapturedValue>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a37      	ldr	r2, [pc, #220]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001ecc:	6013      	str	r3, [r2, #0]
		hightime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001ece:	2104      	movs	r1, #4
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f007 fa53 	bl	800937c <HAL_TIM_ReadCapturedValue>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a34      	ldr	r2, [pc, #208]	@ (8001fac <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001eda:	6013      	str	r3, [r2, #0]
		if(period != 0){
 8001edc:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d056      	beq.n	8001f92 <HAL_TIM_IC_CaptureCallback+0xe2>
			//Channel 1 returns ticks elapsed between 2 rising edges
			//channel 2 captures both rising and fallign edges
			//Channel 2 returns ticks elapsed between a rising and falling edge
			//Both timers reset each rising edge in PWM input mode

			dutycycle = (float)hightime/(float)period;
 8001ee4:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f02:	edc3 7a00 	vstr	s15, [r3]
			dutycycle -= AS5048A_DUTY_OFFSET;
 8001f06:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001fb4 <HAL_TIM_IC_CaptureCallback+0x104>
 8001f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]
			dutycycle *= AS5048A_DUTY_GAIN;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001fb8 <HAL_TIM_IC_CaptureCallback+0x108>
 8001f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]

			uint16_t rotor_position_bits = (uint16_t)(dutycycle * 4095.0f + 0.5f);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001fbc <HAL_TIM_IC_CaptureCallback+0x10c>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f48:	ee17 3a90 	vmov	r3, s15
 8001f4c:	81fb      	strh	r3, [r7, #14]
			angle = (float)rotor_position_bits * 2.0f * M_PI / 4096.0f;
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f5c:	ee17 0a90 	vmov	r0, s15
 8001f60:	f7fe fb1a 	bl	8000598 <__aeabi_f2d>
 8001f64:	a30e      	add	r3, pc, #56	@ (adr r3, 8001fa0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe fb6d 	bl	8000648 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001f7c:	f7fe fc8e 	bl	800089c <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe56 	bl	8000c38 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001f90:	6013      	str	r3, [r2, #0]

//			sprintf(buffer, "%lu\r\n", (uint32_t)(angle*100000));
//			print(buffer);
		}
	}
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	54442d18 	.word	0x54442d18
 8001fa4:	400921fb 	.word	0x400921fb
 8001fa8:	20000670 	.word	0x20000670
 8001fac:	20000678 	.word	0x20000678
 8001fb0:	20000674 	.word	0x20000674
 8001fb4:	3b7e920e 	.word	0x3b7e920e
 8001fb8:	3f80c00c 	.word	0x3f80c00c
 8001fbc:	457ff000 	.word	0x457ff000
 8001fc0:	40b00000 	.word	0x40b00000
 8001fc4:	2000067c 	.word	0x2000067c

08001fc8 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	mpu.gotData = 1;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_I2C_MemRxCpltCallback+0x24>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	rx_flag = 0;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	200006cc 	.word	0x200006cc
 8001ff0:	20000222 	.word	0x20000222

08001ff4 <HAL_UART_RxCpltCallback>:

//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
////	HAL_ADC_Start_DMA(&hadc1, &potVal, 1);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a45      	ldr	r2, [pc, #276]	@ (8002118 <HAL_UART_RxCpltCallback+0x124>)
 8002002:	4293      	cmp	r3, r2
 8002004:	f040 8084 	bne.w	8002110 <HAL_UART_RxCpltCallback+0x11c>
        if (UART_rx_byte == '\n') {
 8002008:	4b44      	ldr	r3, [pc, #272]	@ (800211c <HAL_UART_RxCpltCallback+0x128>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b0a      	cmp	r3, #10
 800200e:	d165      	bne.n	80020dc <HAL_UART_RxCpltCallback+0xe8>
            // Trim trailing \r if present
            if (indx > 0 && UART_rx_buffer[indx-1] == '\r') {
 8002010:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_UART_RxCpltCallback+0x40>
 8002018:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	2b0d      	cmp	r3, #13
 8002024:	d106      	bne.n	8002034 <HAL_UART_RxCpltCallback+0x40>
                UART_rx_buffer[indx-1] = '\0';
 8002026:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3b01      	subs	r3, #1
 800202c:	4a3d      	ldr	r2, [pc, #244]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 800202e:	2100      	movs	r1, #0
 8002030:	54d1      	strb	r1, [r2, r3]
 8002032:	e005      	b.n	8002040 <HAL_UART_RxCpltCallback+0x4c>
            } else {
                UART_rx_buffer[indx] = '\0';
 8002034:	4b3a      	ldr	r3, [pc, #232]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 800203c:	2100      	movs	r1, #0
 800203e:	5499      	strb	r1, [r3, r2]
            }

            HAL_UART_Transmit(&huart2, (uint8_t*)UART_rx_buffer, indx, 100);
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	2364      	movs	r3, #100	@ 0x64
 8002048:	4936      	ldr	r1, [pc, #216]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 800204a:	4837      	ldr	r0, [pc, #220]	@ (8002128 <HAL_UART_RxCpltCallback+0x134>)
 800204c:	f008 faab 	bl	800a5a6 <HAL_UART_Transmit>

            char *comma = strchr(UART_rx_buffer, ',');
 8002050:	212c      	movs	r1, #44	@ 0x2c
 8002052:	4834      	ldr	r0, [pc, #208]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 8002054:	f00b ff3d 	bl	800ded2 <strchr>
 8002058:	60f8      	str	r0, [r7, #12]
            if (comma != NULL) {
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02c      	beq.n	80020ba <HAL_UART_RxCpltCallback+0xc6>
                *comma = '\0';
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
                char *endptr;

                // Parse P
                P = strtof(UART_rx_buffer, &endptr);
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4619      	mov	r1, r3
 800206c:	482d      	ldr	r0, [pc, #180]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 800206e:	f00b f967 	bl	800d340 <strtof>
 8002072:	eef0 7a40 	vmov.f32	s15, s0
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_UART_RxCpltCallback+0x138>)
 8002078:	edc3 7a00 	vstr	s15, [r3]
                if (endptr == UART_rx_buffer) {
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4a29      	ldr	r2, [pc, #164]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <HAL_UART_RxCpltCallback+0x98>
                    // Error: Invalid P
                    P = 0.0f;
 8002084:	4b29      	ldr	r3, [pc, #164]	@ (800212c <HAL_UART_RxCpltCallback+0x138>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
                }

                // Parse D
                D = strtof(comma + 1, &endptr);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f00b f952 	bl	800d340 <strtof>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_UART_RxCpltCallback+0x13c>)
 80020a2:	edc3 7a00 	vstr	s15, [r3]
                if (endptr == comma + 1) {
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d10c      	bne.n	80020ca <HAL_UART_RxCpltCallback+0xd6>
                    // Error: Invalid D
                    D = 0.0f;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_UART_RxCpltCallback+0x13c>)
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e007      	b.n	80020ca <HAL_UART_RxCpltCallback+0xd6>
                }
            } else {
                P = 0.0f;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <HAL_UART_RxCpltCallback+0x138>)
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
                D = 0.0f;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_UART_RxCpltCallback+0x13c>)
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
            }

            memset(UART_rx_buffer, 0, 30);
 80020ca:	221e      	movs	r2, #30
 80020cc:	2100      	movs	r1, #0
 80020ce:	4815      	ldr	r0, [pc, #84]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 80020d0:	f00b fef7 	bl	800dec2 <memset>
            indx = 0;
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e014      	b.n	8002106 <HAL_UART_RxCpltCallback+0x112>
        } else {
            if (indx < 29) {
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b1c      	cmp	r3, #28
 80020e2:	d80d      	bhi.n	8002100 <HAL_UART_RxCpltCallback+0x10c>
                UART_rx_buffer[indx] = UART_rx_byte;
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_UART_RxCpltCallback+0x128>)
 80020ec:	7819      	ldrb	r1, [r3, #0]
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_UART_RxCpltCallback+0x130>)
 80020f0:	5499      	strb	r1, [r3, r2]
                indx++;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e002      	b.n	8002106 <HAL_UART_RxCpltCallback+0x112>
            } else {
                indx = 0; // Reset on overflow
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <HAL_UART_RxCpltCallback+0x12c>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart2, &UART_rx_byte, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	4904      	ldr	r1, [pc, #16]	@ (800211c <HAL_UART_RxCpltCallback+0x128>)
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <HAL_UART_RxCpltCallback+0x134>)
 800210c:	f008 fada 	bl	800a6c4 <HAL_UART_Receive_IT>
    }
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40004400 	.word	0x40004400
 800211c:	20000685 	.word	0x20000685
 8002120:	20000684 	.word	0x20000684
 8002124:	20000688 	.word	0x20000688
 8002128:	2000057c 	.word	0x2000057c
 800212c:	200006c4 	.word	0x200006c4
 8002130:	200006c8 	.word	0x200006c8

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002138:	f001 f8d5 	bl	80032e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213c:	f000 f866 	bl	800220c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002140:	f000 fbd0 	bl	80028e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002144:	f000 fb8c 	bl	8002860 <MX_DMA_Init>
  MX_TIM2_Init();
 8002148:	f000 fa26 	bl	8002598 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800214c:	f000 fb3c 	bl	80027c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002150:	f000 f91e 	bl	8002390 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002154:	f000 f95c 	bl	8002410 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002158:	f000 f8a2 	bl	80022a0 <MX_ADC1_Init>
  MX_TIM6_Init();
 800215c:	f000 fac2 	bl	80026e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002160:	f000 faf6 	bl	8002750 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  torque = 0;
 8002164:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <main+0xb0>)
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  d = 0;
 800216c:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <main+0xb4>)
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

  P = 0.5;
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <main+0xb8>)
 8002176:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800217a:	601a      	str	r2, [r3, #0]
  D = 0;
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <main+0xbc>)
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

  MPU6050_init(&hi2c1);
 8002184:	481b      	ldr	r0, [pc, #108]	@ (80021f4 <main+0xc0>)
 8002186:	f7fe fff5 	bl	8001174 <MPU6050_init>
  MPU6050_Initialize(&mpu, &hi2c1);
 800218a:	491a      	ldr	r1, [pc, #104]	@ (80021f4 <main+0xc0>)
 800218c:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <main+0xc4>)
 800218e:	f7ff fafd 	bl	800178c <MPU6050_Initialize>
//  MPU6050_Read_DMA(&mpu);
//  MPU6050_read_poll_data(&hi2c1);
  HAL_UART_Receive_IT(&huart2,&UART_rx_byte, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	4919      	ldr	r1, [pc, #100]	@ (80021fc <main+0xc8>)
 8002196:	481a      	ldr	r0, [pc, #104]	@ (8002200 <main+0xcc>)
 8002198:	f008 fa94 	bl	800a6c4 <HAL_UART_Receive_IT>
 {
//	  sprintf(buffer, "main loop running\r\n");
//	  print(buffer);


	  mpu.newData = HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin);
 800219c:	2140      	movs	r1, #64	@ 0x40
 800219e:	4819      	ldr	r0, [pc, #100]	@ (8002204 <main+0xd0>)
 80021a0:	f002 ff1a 	bl	8004fd8 <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <main+0xc4>)
 80021aa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

	  if (mpu.newData == 1 && rx_flag == 0){
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <main+0xc4>)
 80021b0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d106      	bne.n	80021c8 <main+0x94>
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <main+0xd4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <main+0x94>
		  MPU6050_read_DMA_data(&hi2c1);
 80021c2:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <main+0xc0>)
 80021c4:	f7ff f876 	bl	80012b4 <MPU6050_read_DMA_data>
//		  MPU6050_Read_DMA(&mpu);
	  }

	  if (mpu.gotData == 1){
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <main+0xc4>)
 80021ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d1e3      	bne.n	800219c <main+0x68>
		  MPU6050_process_data();
 80021d4:	f7ff f890 	bl	80012f8 <MPU6050_process_data>
//		  MPU6050_Process_DMA_Data(&mpu);
		  mpu.gotData = 0;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <main+0xc4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  mpu.newData = HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin);
 80021e0:	e7dc      	b.n	800219c <main+0x68>
 80021e2:	bf00      	nop
 80021e4:	200006a8 	.word	0x200006a8
 80021e8:	200006ac 	.word	0x200006ac
 80021ec:	200006c4 	.word	0x200006c4
 80021f0:	200006c8 	.word	0x200006c8
 80021f4:	20000338 	.word	0x20000338
 80021f8:	200006cc 	.word	0x200006cc
 80021fc:	20000685 	.word	0x20000685
 8002200:	2000057c 	.word	0x2000057c
 8002204:	48000400 	.word	0x48000400
 8002208:	20000222 	.word	0x20000222

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	@ 0x50
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2238      	movs	r2, #56	@ 0x38
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f00b fe51 	bl	800dec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800222e:	2000      	movs	r0, #0
 8002230:	f005 f8d8 	bl	80073e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002234:	2301      	movs	r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800223c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800223e:	2302      	movs	r3, #2
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002242:	2303      	movs	r3, #3
 8002244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002246:	2301      	movs	r3, #1
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 800224a:	232a      	movs	r3, #42	@ 0x2a
 800224c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800224e:	2302      	movs	r3, #2
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002252:	2302      	movs	r3, #2
 8002254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002256:	2302      	movs	r3, #2
 8002258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	4618      	mov	r0, r3
 8002260:	f005 f974 	bl	800754c <HAL_RCC_OscConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800226a:	f000 fb9f 	bl	80029ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226e:	230f      	movs	r3, #15
 8002270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002272:	2303      	movs	r3, #3
 8002274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2104      	movs	r1, #4
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fc72 	bl	8007b70 <HAL_RCC_ClockConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002292:	f000 fb8b 	bl	80029ac <Error_Handler>
  }
}
 8002296:	bf00      	nop
 8002298:	3750      	adds	r7, #80	@ 0x50
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	@ 0x30
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2220      	movs	r2, #32
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00b fe02 	bl	800dec2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022e0:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e6:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022ec:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022f2:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <MX_ADC1_Init+0xe8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022fe:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002308:	2200      	movs	r2, #0
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <MX_ADC1_Init+0xe8>)
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <MX_ADC1_Init+0xe8>)
 800231c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002320:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002322:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800232a:	4817      	ldr	r0, [pc, #92]	@ (8002388 <MX_ADC1_Init+0xe8>)
 800232c:	f001 fa44 	bl	80037b8 <HAL_ADC_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8002336:	f000 fb39 	bl	80029ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800233e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4810      	ldr	r0, [pc, #64]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002346:	f001 ffd1 	bl	80042ec <HAL_ADCEx_MultiModeConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002350:	f000 fb2c 	bl	80029ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <MX_ADC1_Init+0xec>)
 8002356:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002358:	2306      	movs	r3, #6
 800235a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002360:	237f      	movs	r3, #127	@ 0x7f
 8002362:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002364:	2304      	movs	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_ADC1_Init+0xe8>)
 8002372:	f001 fba5 	bl	8003ac0 <HAL_ADC_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800237c:	f000 fb16 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	3730      	adds	r7, #48	@ 0x30
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000026c 	.word	0x2000026c
 800238c:	2e300800 	.word	0x2e300800

08002390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <MX_I2C1_Init+0x74>)
 8002396:	4a1c      	ldr	r2, [pc, #112]	@ (8002408 <MX_I2C1_Init+0x78>)
 8002398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B21E5A;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <MX_I2C1_Init+0x74>)
 800239c:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <MX_I2C1_Init+0x7c>)
 800239e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ac:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023be:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ca:	480e      	ldr	r0, [pc, #56]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023cc:	f002 fe34 	bl	8005038 <HAL_I2C_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023d6:	f000 fae9 	bl	80029ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023da:	2100      	movs	r1, #0
 80023dc:	4809      	ldr	r0, [pc, #36]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023de:	f004 ff69 	bl	80072b4 <HAL_I2CEx_ConfigAnalogFilter>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023e8:	f000 fae0 	bl	80029ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023ec:	2100      	movs	r1, #0
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <MX_I2C1_Init+0x74>)
 80023f0:	f004 ffab 	bl	800734a <HAL_I2CEx_ConfigDigitalFilter>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023fa:	f000 fad7 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000338 	.word	0x20000338
 8002408:	40005400 	.word	0x40005400
 800240c:	20b21e5a 	.word	0x20b21e5a

08002410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b098      	sub	sp, #96	@ 0x60
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002416:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2234      	movs	r2, #52	@ 0x34
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f00b fd40 	bl	800dec2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002442:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002444:	4a53      	ldr	r2, [pc, #332]	@ (8002594 <MX_TIM1_Init+0x184>)
 8002446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002448:	4b51      	ldr	r3, [pc, #324]	@ (8002590 <MX_TIM1_Init+0x180>)
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b50      	ldr	r3, [pc, #320]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5249;
 8002454:	4b4e      	ldr	r3, [pc, #312]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002456:	f241 4281 	movw	r2, #5249	@ 0x1481
 800245a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b4c      	ldr	r3, [pc, #304]	@ (8002590 <MX_TIM1_Init+0x180>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002462:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b49      	ldr	r3, [pc, #292]	@ (8002590 <MX_TIM1_Init+0x180>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800246e:	4848      	ldr	r0, [pc, #288]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002470:	f006 f84c 	bl	800850c <HAL_TIM_PWM_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800247a:	f000 fa97 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800248e:	4619      	mov	r1, r3
 8002490:	483f      	ldr	r0, [pc, #252]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002492:	f007 febf 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800249c:	f000 fa86 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a0:	2360      	movs	r3, #96	@ 0x60
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ac:	2300      	movs	r3, #0
 80024ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024c0:	2200      	movs	r2, #0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4832      	ldr	r0, [pc, #200]	@ (8002590 <MX_TIM1_Init+0x180>)
 80024c6:	f006 fd09 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024d0:	f000 fa6c 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024d8:	2204      	movs	r2, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	482c      	ldr	r0, [pc, #176]	@ (8002590 <MX_TIM1_Init+0x180>)
 80024de:	f006 fcfd 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80024e8:	f000 fa60 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024f0:	2208      	movs	r2, #8
 80024f2:	4619      	mov	r1, r3
 80024f4:	4826      	ldr	r0, [pc, #152]	@ (8002590 <MX_TIM1_Init+0x180>)
 80024f6:	f006 fcf1 	bl	8008edc <HAL_TIM_PWM_ConfigChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002500:	f000 fa54 	bl	80029ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800251c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800252a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4813      	ldr	r0, [pc, #76]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002542:	f007 fee9 	bl	800a318 <HAL_TIMEx_ConfigBreakDeadTime>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800254c:	f000 fa2e 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002550:	2100      	movs	r1, #0
 8002552:	480f      	ldr	r0, [pc, #60]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002554:	f006 f832 	bl	80085bc <HAL_TIM_PWM_Start>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002558:	2100      	movs	r1, #0
 800255a:	480d      	ldr	r0, [pc, #52]	@ (8002590 <MX_TIM1_Init+0x180>)
 800255c:	f007 fda6 	bl	800a0ac <HAL_TIMEx_PWMN_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002560:	2104      	movs	r1, #4
 8002562:	480b      	ldr	r0, [pc, #44]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002564:	f006 f82a 	bl	80085bc <HAL_TIM_PWM_Start>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002568:	2104      	movs	r1, #4
 800256a:	4809      	ldr	r0, [pc, #36]	@ (8002590 <MX_TIM1_Init+0x180>)
 800256c:	f007 fd9e 	bl	800a0ac <HAL_TIMEx_PWMN_Start>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002570:	2108      	movs	r1, #8
 8002572:	4807      	ldr	r0, [pc, #28]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002574:	f006 f822 	bl	80085bc <HAL_TIM_PWM_Start>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002578:	2108      	movs	r1, #8
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <MX_TIM1_Init+0x180>)
 800257c:	f007 fd96 	bl	800a0ac <HAL_TIMEx_PWMN_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002580:	4803      	ldr	r0, [pc, #12]	@ (8002590 <MX_TIM1_Init+0x180>)
 8002582:	f000 fc21 	bl	8002dc8 <HAL_TIM_MspPostInit>

}
 8002586:	bf00      	nop
 8002588:	3760      	adds	r7, #96	@ 0x60
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000044c 	.word	0x2000044c
 8002594:	40012c00 	.word	0x40012c00

08002598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b090      	sub	sp, #64	@ 0x40
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025dc:	4b40      	ldr	r3, [pc, #256]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025de:	2200      	movs	r2, #0
 80025e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025e8:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025ea:	f04f 32ff 	mov.w	r2, #4294967295
 80025ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025fc:	4838      	ldr	r0, [pc, #224]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80025fe:	f005 fec3 	bl	8008388 <HAL_TIM_Base_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002608:	f000 f9d0 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002612:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002616:	4619      	mov	r1, r3
 8002618:	4831      	ldr	r0, [pc, #196]	@ (80026e0 <MX_TIM2_Init+0x148>)
 800261a:	f006 fd73 	bl	8009104 <HAL_TIM_ConfigClockSource>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002624:	f000 f9c2 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002628:	482d      	ldr	r0, [pc, #180]	@ (80026e0 <MX_TIM2_Init+0x148>)
 800262a:	f006 f8c7 	bl	80087bc <HAL_TIM_IC_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002634:	f000 f9ba 	bl	80029ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002638:	2304      	movs	r3, #4
 800263a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800263c:	2350      	movs	r3, #80	@ 0x50
 800263e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <MX_TIM2_Init+0x148>)
 8002654:	f006 fe50 	bl	80092f8 <HAL_TIM_SlaveConfigSynchro>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800265e:	f000 f9a5 	bl	80029ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002666:	2301      	movs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002672:	f107 030c 	add.w	r3, r7, #12
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	4819      	ldr	r0, [pc, #100]	@ (80026e0 <MX_TIM2_Init+0x148>)
 800267c:	f006 fb91 	bl	8008da2 <HAL_TIM_IC_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002686:	f000 f991 	bl	80029ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800268a:	2302      	movs	r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800268e:	2302      	movs	r3, #2
 8002690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2204      	movs	r2, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4811      	ldr	r0, [pc, #68]	@ (80026e0 <MX_TIM2_Init+0x148>)
 800269c:	f006 fb81 	bl	8008da2 <HAL_TIM_IC_ConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 80026a6:	f000 f981 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b2:	463b      	mov	r3, r7
 80026b4:	4619      	mov	r1, r3
 80026b6:	480a      	ldr	r0, [pc, #40]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80026b8:	f007 fdac 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 80026c2:	f000 f973 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80026c6:	2100      	movs	r1, #0
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80026ca:	f006 f8d9 	bl	8008880 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80026ce:	2104      	movs	r1, #4
 80026d0:	4803      	ldr	r0, [pc, #12]	@ (80026e0 <MX_TIM2_Init+0x148>)
 80026d2:	f006 f8d5 	bl	8008880 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	3740      	adds	r7, #64	@ 0x40
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000498 	.word	0x20000498

080026e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <MX_TIM6_Init+0x64>)
 80026f6:	4a15      	ldr	r2, [pc, #84]	@ (800274c <MX_TIM6_Init+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <MX_TIM6_Init+0x64>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <MX_TIM6_Init+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <MX_TIM6_Init+0x64>)
 8002708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800270c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <MX_TIM6_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <MX_TIM6_Init+0x64>)
 8002716:	f005 fe37 	bl	8008388 <HAL_TIM_Base_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002720:	f000 f944 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	@ (8002748 <MX_TIM6_Init+0x64>)
 8002732:	f007 fd6f 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800273c:	f000 f936 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200004e4 	.word	0x200004e4
 800274c:	40001000 	.word	0x40001000

08002750 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <MX_TIM7_Init+0x70>)
 8002762:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <MX_TIM7_Init+0x74>)
 8002764:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <MX_TIM7_Init+0x70>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <MX_TIM7_Init+0x70>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <MX_TIM7_Init+0x70>)
 8002774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002778:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <MX_TIM7_Init+0x70>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002780:	480f      	ldr	r0, [pc, #60]	@ (80027c0 <MX_TIM7_Init+0x70>)
 8002782:	f005 fe01 	bl	8008388 <HAL_TIM_Base_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800278c:	f000 f90e 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4808      	ldr	r0, [pc, #32]	@ (80027c0 <MX_TIM7_Init+0x70>)
 800279e:	f007 fd39 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 f900 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80027ac:	4804      	ldr	r0, [pc, #16]	@ (80027c0 <MX_TIM7_Init+0x70>)
 80027ae:	f005 fe43 	bl	8008438 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80027b2:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <MX_TIM7_Init+0x70>)
 80027b4:	f005 fe40 	bl	8008438 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000530 	.word	0x20000530
 80027c4:	40001400 	.word	0x40001400

080027c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027cc:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027ce:	4a23      	ldr	r2, [pc, #140]	@ (800285c <MX_USART2_UART_Init+0x94>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027d2:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002810:	4811      	ldr	r0, [pc, #68]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002812:	f007 fe78 	bl	800a506 <HAL_UART_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800281c:	f000 f8c6 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002820:	2100      	movs	r1, #0
 8002822:	480d      	ldr	r0, [pc, #52]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002824:	f009 febf 	bl	800c5a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800282e:	f000 f8bd 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002832:	2100      	movs	r1, #0
 8002834:	4808      	ldr	r0, [pc, #32]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002836:	f009 fef4 	bl	800c622 <HAL_UARTEx_SetRxFifoThreshold>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002840:	f000 f8b4 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	@ (8002858 <MX_USART2_UART_Init+0x90>)
 8002846:	f009 fe75 	bl	800c534 <HAL_UARTEx_DisableFifoMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002850:	f000 f8ac 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	2000057c 	.word	0x2000057c
 800285c:	40004400 	.word	0x40004400

08002860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <MX_DMA_Init+0x80>)
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <MX_DMA_Init+0x80>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6493      	str	r3, [r2, #72]	@ 0x48
 8002872:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <MX_DMA_Init+0x80>)
 8002874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <MX_DMA_Init+0x80>)
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <MX_DMA_Init+0x80>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6493      	str	r3, [r2, #72]	@ 0x48
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_DMA_Init+0x80>)
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	200b      	movs	r0, #11
 800289c:	f001 fea5 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028a0:	200b      	movs	r0, #11
 80028a2:	f001 febc 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	200c      	movs	r0, #12
 80028ac:	f001 fe9d 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028b0:	200c      	movs	r0, #12
 80028b2:	f001 feb4 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	200d      	movs	r0, #13
 80028bc:	f001 fe95 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80028c0:	200d      	movs	r0, #13
 80028c2:	f001 feac 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	200e      	movs	r0, #14
 80028cc:	f001 fe8d 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80028d0:	200e      	movs	r0, #14
 80028d2:	f001 fea4 	bl	800461e <HAL_NVIC_EnableIRQ>

}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	4a28      	ldr	r2, [pc, #160]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002912:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	4a16      	ldr	r2, [pc, #88]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_GPIO_Init+0xbc>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	2140      	movs	r1, #64	@ 0x40
 800295e:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <MX_GPIO_Init+0xc0>)
 8002960:	f002 fb52 	bl	8005008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002964:	2340      	movs	r3, #64	@ 0x40
 8002966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	480a      	ldr	r0, [pc, #40]	@ (80029a4 <MX_GPIO_Init+0xc0>)
 800297c:	f002 f9aa 	bl	8004cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002980:	2340      	movs	r3, #64	@ 0x40
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <MX_GPIO_Init+0xc4>)
 8002994:	f002 f99e 	bl	8004cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000400 	.word	0x48000400

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_MspInit+0x44>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <HAL_MspInit+0x44>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_MspInit+0x44>)
 80029cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_MspInit+0x44>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_MspInit+0x44>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_MspInit+0x44>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029ee:	f004 fd9d 	bl	800752c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b09a      	sub	sp, #104	@ 0x68
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	2244      	movs	r2, #68	@ 0x44
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00b fa4e 	bl	800dec2 <memset>
  if(hadc->Instance==ADC1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2e:	d160      	bne.n	8002af2 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 fab1 	bl	8007fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002a4c:	f7ff ffae 	bl	80029ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5c:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_ADC_MspInit+0xfc>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a84:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a86:	2303      	movs	r3, #3
 8002a88:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a92:	4619      	mov	r1, r3
 8002a94:	481a      	ldr	r0, [pc, #104]	@ (8002b00 <HAL_ADC_MspInit+0x100>)
 8002a96:	f002 f91d 	bl	8004cd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <HAL_ADC_MspInit+0x108>)
 8002a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002aa0:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aac:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002abe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aca:	2220      	movs	r2, #32
 8002acc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002ad0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ad4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ad6:	480b      	ldr	r0, [pc, #44]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002ad8:	f001 fdbc 	bl	8004654 <HAL_DMA_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8002ae2:	f7ff ff63 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aec:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <HAL_ADC_MspInit+0x104>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002af2:	bf00      	nop
 8002af4:	3768      	adds	r7, #104	@ 0x68
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	200002d8 	.word	0x200002d8
 8002b08:	40020030 	.word	0x40020030

08002b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09a      	sub	sp, #104	@ 0x68
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	2244      	movs	r2, #68	@ 0x44
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00b f9c8 	bl	800dec2 <memset>
  if(hi2c->Instance==I2C1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a50      	ldr	r2, [pc, #320]	@ (8002c78 <HAL_I2C_MspInit+0x16c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	f040 8099 	bne.w	8002c70 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b3e:	2340      	movs	r3, #64	@ 0x40
 8002b40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fa2c 	bl	8007fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b56:	f7ff ff29 	bl	80029ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b48      	ldr	r3, [pc, #288]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	4a47      	ldr	r2, [pc, #284]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b66:	4b45      	ldr	r3, [pc, #276]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b78:	2312      	movs	r3, #18
 8002b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b84:	2304      	movs	r3, #4
 8002b86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	483c      	ldr	r0, [pc, #240]	@ (8002c80 <HAL_I2C_MspInit+0x174>)
 8002b90:	f002 f8a0 	bl	8004cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	4a38      	ldr	r2, [pc, #224]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002b9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba0:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <HAL_I2C_MspInit+0x170>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bae:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_I2C_MspInit+0x17c>)
 8002bb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002bb2:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bc6:	2280      	movs	r2, #128	@ 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bca:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bdc:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002be2:	4828      	ldr	r0, [pc, #160]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002be4:	f001 fd36 	bl	8004654 <HAL_DMA_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8002bee:	f7ff fedd 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bf8:	4a22      	ldr	r2, [pc, #136]	@ (8002c84 <HAL_I2C_MspInit+0x178>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8002bfe:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c00:	4a23      	ldr	r2, [pc, #140]	@ (8002c90 <HAL_I2C_MspInit+0x184>)
 8002c02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c06:	2211      	movs	r2, #17
 8002c08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c0a:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c10:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c28:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c34:	4815      	ldr	r0, [pc, #84]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c36:	f001 fd0d 	bl	8004654 <HAL_DMA_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8002c40:	f7ff feb4 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a11      	ldr	r2, [pc, #68]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c4a:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <HAL_I2C_MspInit+0x180>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	201f      	movs	r0, #31
 8002c56:	f001 fcc8 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c5a:	201f      	movs	r0, #31
 8002c5c:	f001 fcdf 	bl	800461e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	2020      	movs	r0, #32
 8002c66:	f001 fcc0 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c6a:	2020      	movs	r0, #32
 8002c6c:	f001 fcd7 	bl	800461e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c70:	bf00      	nop
 8002c72:	3768      	adds	r7, #104	@ 0x68
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40005400 	.word	0x40005400
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	2000038c 	.word	0x2000038c
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	200003ec 	.word	0x200003ec
 8002c90:	4002001c 	.word	0x4002001c

08002c94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_TIM_PWM_MspInit+0x38>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10b      	bne.n	8002cbe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002caa:	4a09      	ldr	r2, [pc, #36]	@ (8002cd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	@ 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d132      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf6:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	4a30      	ldr	r2, [pc, #192]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d02:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	4a2a      	ldr	r2, [pc, #168]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d1a:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d46:	f001 ffc5 	bl	8004cd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	201c      	movs	r0, #28
 8002d50:	f001 fc4b 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d54:	201c      	movs	r0, #28
 8002d56:	f001 fc62 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d5a:	e02a      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_TIM_Base_MspInit+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	4a14      	ldr	r2, [pc, #80]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d6c:	f043 0310 	orr.w	r3, r3, #16
 8002d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
}
 8002d7e:	e018      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM7)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc4 <HAL_TIM_Base_MspInit+0xf0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <HAL_TIM_Base_MspInit+0xe8>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	2037      	movs	r0, #55	@ 0x37
 8002da8:	f001 fc1f 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dac:	2037      	movs	r0, #55	@ 0x37
 8002dae:	f001 fc36 	bl	800461e <HAL_NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3730      	adds	r7, #48	@ 0x30
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40001000 	.word	0x40001000
 8002dc4:	40001400 	.word	0x40001400

08002dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <HAL_TIM_MspPostInit+0xdc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d157      	bne.n	8002e9a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e06:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <HAL_TIM_MspPostInit+0xe0>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002e44:	2304      	movs	r3, #4
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4817      	ldr	r0, [pc, #92]	@ (8002eac <HAL_TIM_MspPostInit+0xe4>)
 8002e50:	f001 ff40 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002e66:	2304      	movs	r3, #4
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480f      	ldr	r0, [pc, #60]	@ (8002eb0 <HAL_TIM_MspPostInit+0xe8>)
 8002e72:	f001 ff2f 	bl	8004cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002e76:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e88:	2306      	movs	r3, #6
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e96:	f001 ff1d 	bl	8004cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e9a:	bf00      	nop
 8002e9c:	3728      	adds	r7, #40	@ 0x28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	48000800 	.word	0x48000800
 8002eb0:	48000400 	.word	0x48000400

08002eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b09a      	sub	sp, #104	@ 0x68
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	2244      	movs	r2, #68	@ 0x44
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f00a fff4 	bl	800dec2 <memset>
  if(huart->Instance==USART2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a37      	ldr	r2, [pc, #220]	@ (8002fbc <HAL_UART_MspInit+0x108>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d167      	bne.n	8002fb4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f005 f859 	bl	8007fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002efc:	f7ff fd56 	bl	80029ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f00:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1c:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f24:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <HAL_UART_MspInit+0x10c>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f30:	2318      	movs	r3, #24
 8002f32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f40:	2307      	movs	r3, #7
 8002f42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f48:	4619      	mov	r1, r3
 8002f4a:	481e      	ldr	r0, [pc, #120]	@ (8002fc4 <HAL_UART_MspInit+0x110>)
 8002f4c:	f001 fec2 	bl	8004cd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel4;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f52:	4a1e      	ldr	r2, [pc, #120]	@ (8002fcc <HAL_UART_MspInit+0x118>)
 8002f54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f58:	221a      	movs	r2, #26
 8002f5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f62:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f68:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f6a:	2280      	movs	r2, #128	@ 0x80
 8002f6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6e:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f86:	4810      	ldr	r0, [pc, #64]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f88:	f001 fb64 	bl	8004654 <HAL_DMA_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002f92:	f7ff fd0b 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <HAL_UART_MspInit+0x114>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2026      	movs	r0, #38	@ 0x26
 8002faa:	f001 fb1e 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fae:	2026      	movs	r0, #38	@ 0x26
 8002fb0:	f001 fb35 	bl	800461e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3768      	adds	r7, #104	@ 0x68
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	20000610 	.word	0x20000610
 8002fcc:	40020044 	.word	0x40020044

08002fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <NMI_Handler+0x4>

08002fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <HardFault_Handler+0x4>

08002fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <MemManage_Handler+0x4>

08002fe8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003026:	f000 f9b1 	bl	800338c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <DMA1_Channel1_IRQHandler+0x10>)
 8003036:	f001 fcf0 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	2000038c 	.word	0x2000038c

08003044 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003048:	4802      	ldr	r0, [pc, #8]	@ (8003054 <DMA1_Channel2_IRQHandler+0x10>)
 800304a:	f001 fce6 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200003ec 	.word	0x200003ec

08003058 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800305c:	4802      	ldr	r0, [pc, #8]	@ (8003068 <DMA1_Channel3_IRQHandler+0x10>)
 800305e:	f001 fcdc 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200002d8 	.word	0x200002d8

0800306c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <DMA1_Channel4_IRQHandler+0x10>)
 8003072:	f001 fcd2 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000610 	.word	0x20000610

08003080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <TIM2_IRQHandler+0x10>)
 8003086:	f005 fd3d 	bl	8008b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000498 	.word	0x20000498

08003094 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <I2C1_EV_IRQHandler+0x10>)
 800309a:	f002 fb7d 	bl	8005798 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000338 	.word	0x20000338

080030a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030ac:	4802      	ldr	r0, [pc, #8]	@ (80030b8 <I2C1_ER_IRQHandler+0x10>)
 80030ae:	f002 fb8d 	bl	80057cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000338 	.word	0x20000338

080030bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <USART2_IRQHandler+0x10>)
 80030c2:	f007 fb4b 	bl	800a75c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000057c 	.word	0x2000057c

080030d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <TIM7_IRQHandler+0x10>)
 80030d6:	f005 fd15 	bl	8008b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000530 	.word	0x20000530

080030e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return 1;
 80030e8:	2301      	movs	r3, #1
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_kill>:

int _kill(int pid, int sig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fe:	f00a ff51 	bl	800dfa4 <__errno>
 8003102:	4603      	mov	r3, r0
 8003104:	2216      	movs	r2, #22
 8003106:	601a      	str	r2, [r3, #0]
  return -1;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <_exit>:

void _exit (int status)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe7 	bl	80030f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <_exit+0x12>

0800312a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00a      	b.n	8003152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313c:	f3af 8000 	nop.w
 8003140:	4601      	mov	r1, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	dbf0      	blt.n	800313c <_read+0x12>
  }

  return len;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e009      	b.n	800318a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	dbf1      	blt.n	8003176 <_write+0x12>
  }
  return len;
 8003192:	687b      	ldr	r3, [r7, #4]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_close>:

int _close(int file)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c4:	605a      	str	r2, [r3, #4]
  return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_isatty>:

int _isatty(int file)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031dc:	2301      	movs	r3, #1
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	@ (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003234:	f00a feb6 	bl	800dfa4 <__errno>
 8003238:	4603      	mov	r3, r0
 800323a:	220c      	movs	r2, #12
 800323c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
 8003242:	e009      	b.n	8003258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324a:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	4a05      	ldr	r2, [pc, #20]	@ (8003268 <_sbrk+0x64>)
 8003254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20008000 	.word	0x20008000
 8003264:	00000400 	.word	0x00000400
 8003268:	20000710 	.word	0x20000710
 800326c:	20000868 	.word	0x20000868

08003270 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003274:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <SystemInit+0x20>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <SystemInit+0x20>)
 800327c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003294:	480d      	ldr	r0, [pc, #52]	@ (80032cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003296:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003298:	f7ff ffea 	bl	8003270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800329c:	480c      	ldr	r0, [pc, #48]	@ (80032d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800329e:	490d      	ldr	r1, [pc, #52]	@ (80032d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032a0:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <LoopForever+0xe>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032a4:	e002      	b.n	80032ac <LoopCopyDataInit>

080032a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032aa:	3304      	adds	r3, #4

080032ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b0:	d3f9      	bcc.n	80032a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80032b4:	4c0a      	ldr	r4, [pc, #40]	@ (80032e0 <LoopForever+0x16>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b8:	e001      	b.n	80032be <LoopFillZerobss>

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032bc:	3204      	adds	r2, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f00a fe75 	bl	800dfb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032c6:	f7fe ff35 	bl	8002134 <main>

080032ca <LoopForever>:

LoopForever:
    b LoopForever
 80032ca:	e7fe      	b.n	80032ca <LoopForever>
  ldr   r0, =_estack
 80032cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80032d8:	080123a8 	.word	0x080123a8
  ldr r2, =_sbss
 80032dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80032e0:	20000864 	.word	0x20000864

080032e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC1_2_IRQHandler>

080032e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f0:	2003      	movs	r0, #3
 80032f2:	f001 f96f 	bl	80045d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032f6:	200f      	movs	r0, #15
 80032f8:	f000 f80e 	bl	8003318 <HAL_InitTick>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	71fb      	strb	r3, [r7, #7]
 8003306:	e001      	b.n	800330c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003308:	f7ff fb56 	bl	80029b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800330c:	79fb      	ldrb	r3, [r7, #7]

}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003324:	4b16      	ldr	r3, [pc, #88]	@ (8003380 <HAL_InitTick+0x68>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d022      	beq.n	8003372 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800332c:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_InitTick+0x6c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <HAL_InitTick+0x68>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003338:	fbb1 f3f3 	udiv	r3, r1, r3
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	4618      	mov	r0, r3
 8003342:	f001 f97a 	bl	800463a <HAL_SYSTICK_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10f      	bne.n	800336c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d809      	bhi.n	8003366 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003352:	2200      	movs	r2, #0
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	f001 f946 	bl	80045ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800335e:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <HAL_InitTick+0x70>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e007      	b.n	8003376 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	e004      	b.n	8003376 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	2000000c 	.word	0x2000000c
 8003384:	20000004 	.word	0x20000004
 8003388:	20000008 	.word	0x20000008

0800338c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_IncTick+0x1c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <HAL_IncTick+0x20>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4413      	add	r3, r2
 800339a:	4a03      	ldr	r2, [pc, #12]	@ (80033a8 <HAL_IncTick+0x1c>)
 800339c:	6013      	str	r3, [r2, #0]
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	20000714 	.word	0x20000714
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_GetTick+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000714 	.word	0x20000714

080033c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff ffee 	bl	80033b0 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d004      	beq.n	80033ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_Delay+0x40>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ec:	bf00      	nop
 80033ee:	f7ff ffdf 	bl	80033b0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d8f7      	bhi.n	80033ee <HAL_Delay+0x26>
  {
  }
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000000c 	.word	0x2000000c

0800340c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3360      	adds	r3, #96	@ 0x60
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <LL_ADC_SetOffset+0x44>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	03fff000 	.word	0x03fff000

080034bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3360      	adds	r3, #96	@ 0x60
 80034ca:	461a      	mov	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3360      	adds	r3, #96	@ 0x60
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800351e:	b480      	push	{r7}
 8003520:	b087      	sub	sp, #28
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3360      	adds	r3, #96	@ 0x60
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	431a      	orrs	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3360      	adds	r3, #96	@ 0x60
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	431a      	orrs	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	615a      	str	r2, [r3, #20]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3330      	adds	r3, #48	@ 0x30
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	4413      	add	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	211f      	movs	r1, #31
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0e9b      	lsrs	r3, r3, #26
 80035e8:	f003 011f 	and.w	r1, r3, #31
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	431a      	orrs	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3314      	adds	r3, #20
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	0e5b      	lsrs	r3, r3, #25
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	4413      	add	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0d1b      	lsrs	r3, r3, #20
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2107      	movs	r1, #7
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	401a      	ands	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	0d1b      	lsrs	r3, r3, #20
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0318 	and.w	r3, r3, #24
 8003682:	4908      	ldr	r1, [pc, #32]	@ (80036a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003684:	40d9      	lsrs	r1, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	400b      	ands	r3, r1
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	0007ffff 	.word	0x0007ffff

080036a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80036b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6093      	str	r3, [r2, #8]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e0:	d101      	bne.n	80036e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003704:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003730:	d101      	bne.n	8003736 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <LL_ADC_IsEnabled+0x18>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <LL_ADC_IsEnabled+0x1a>
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d101      	bne.n	8003782 <LL_ADC_REG_IsConversionOngoing+0x18>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d101      	bne.n	80037a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b089      	sub	sp, #36	@ 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e167      	b.n	8003aa2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff f90d 	bl	8002a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff67 	bl	80036cc <LL_ADC_IsDeepPowerDownEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff4d 	bl	80036a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff82 	bl	800371c <LL_ADC_IsInternalRegulatorEnabled>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d115      	bne.n	800384a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff66 	bl	80036f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003828:	4ba0      	ldr	r3, [pc, #640]	@ (8003aac <HAL_ADC_Init+0x2f4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	4aa0      	ldr	r2, [pc, #640]	@ (8003ab0 <HAL_ADC_Init+0x2f8>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800383c:	e002      	b.n	8003844 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b01      	subs	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff64 	bl	800371c <LL_ADC_IsInternalRegulatorEnabled>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff75 	bl	800376a <LL_ADC_REG_IsConversionOngoing>
 8003880:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 8100 	bne.w	8003a90 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80fc 	bne.w	8003a90 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038a0:	f043 0202 	orr.w	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff49 	bl	8003744 <LL_ADC_IsEnabled>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038bc:	f7ff ff42 	bl	8003744 <LL_ADC_IsEnabled>
 80038c0:	4604      	mov	r4, r0
 80038c2:	487c      	ldr	r0, [pc, #496]	@ (8003ab4 <HAL_ADC_Init+0x2fc>)
 80038c4:	f7ff ff3e 	bl	8003744 <LL_ADC_IsEnabled>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4323      	orrs	r3, r4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4878      	ldr	r0, [pc, #480]	@ (8003ab8 <HAL_ADC_Init+0x300>)
 80038d8:	f7ff fd98 	bl	800340c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7f5b      	ldrb	r3, [r3, #29]
 80038e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80038ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80038f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003906:	2b01      	cmp	r3, #1
 8003908:	d106      	bne.n	8003918 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	045b      	lsls	r3, r3, #17
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	4b60      	ldr	r3, [pc, #384]	@ (8003abc <HAL_ADC_Init+0x304>)
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	430b      	orrs	r3, r1
 8003946:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff14 	bl	8003790 <LL_ADC_INJ_IsConversionOngoing>
 8003968:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d16d      	bne.n	8003a4c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d16a      	bne.n	8003a4c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800397a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003982:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003992:	f023 0302 	bic.w	r3, r3, #2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	430b      	orrs	r3, r1
 800399e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d017      	beq.n	80039d8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6911      	ldr	r1, [r2, #16]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80039d6:	e013      	b.n	8003a00 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80039e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d118      	bne.n	8003a3c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a26:	4311      	orrs	r1, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	611a      	str	r2, [r3, #16]
 8003a3a:	e007      	b.n	8003a4c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10c      	bne.n	8003a6e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	f023 010f 	bic.w	r1, r3, #15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a6c:	e007      	b.n	8003a7e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 020f 	bic.w	r2, r2, #15
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a8e:	e007      	b.n	8003aa0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f043 0210 	orr.w	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000004 	.word	0x20000004
 8003ab0:	053e2d63 	.word	0x053e2d63
 8003ab4:	50000100 	.word	0x50000100
 8003ab8:	50000300 	.word	0x50000300
 8003abc:	fff04007 	.word	0xfff04007

08003ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b0b6      	sub	sp, #216	@ 0xd8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x22>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e3c8      	b.n	8004274 <HAL_ADC_ConfigChannel+0x7b4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fe3b 	bl	800376a <LL_ADC_REG_IsConversionOngoing>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 83ad 	bne.w	8004256 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f7ff fd51 	bl	80035b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fe29 	bl	800376a <LL_ADC_REG_IsConversionOngoing>
 8003b18:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fe35 	bl	8003790 <LL_ADC_INJ_IsConversionOngoing>
 8003b26:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 81d9 	bne.w	8003ee6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f040 81d4 	bne.w	8003ee6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b46:	d10f      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7ff fd58 	bl	8003608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fd12 	bl	800358a <LL_ADC_SetSamplingTimeCommonConfig>
 8003b66:	e00e      	b.n	8003b86 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	461a      	mov	r2, r3
 8003b76:	f7ff fd47 	bl	8003608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fd02 	bl	800358a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	08db      	lsrs	r3, r3, #3
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d022      	beq.n	8003bee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6919      	ldr	r1, [r3, #16]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb8:	f7ff fc5c 	bl	8003474 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6919      	ldr	r1, [r3, #16]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f7ff fca8 	bl	800351e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x124>
 8003bde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003be2:	e000      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x126>
 8003be4:	2300      	movs	r3, #0
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff fcb4 	bl	8003554 <LL_ADC_SetOffsetSaturation>
 8003bec:	e17b      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fc61 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x15a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fc56 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	e01e      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x198>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fc4b 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e004      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x1b0>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	e018      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x1e2>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e004      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d106      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fc1a 	bl	80034e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fbfe 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x220>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fbf3 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	e01e      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x25e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fbe8 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e004      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x276>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0e9b      	lsrs	r3, r3, #26
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	e018      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x2a8>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e004      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d106      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fbb7 	bl	80034e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fb9b 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x2e6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fb90 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	e01e      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x324>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2102      	movs	r1, #2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fb85 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e004      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x33c>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	e016      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x36a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	e004      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d106      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fb56 	bl	80034e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2103      	movs	r1, #3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fb3a 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x3a8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2103      	movs	r1, #3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fb2f 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	e017      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x3d8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fb24 	bl	80034bc <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e82:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	e003      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x3f0>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e011      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x414>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	e003      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2103      	movs	r1, #3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fb01 	bl	80034e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fc2a 	bl	8003744 <LL_ADC_IsEnabled>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8140 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f7ff fbab 	bl	8003660 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a8f      	ldr	r2, [pc, #572]	@ (800414c <HAL_ADC_ConfigChannel+0x68c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f040 8131 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x47e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	0e9b      	lsrs	r3, r3, #26
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	bf94      	ite	ls
 8003f36:	2301      	movls	r3, #1
 8003f38:	2300      	movhi	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e019      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x4b2>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e003      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	bf94      	ite	ls
 8003f6c:	2301      	movls	r3, #1
 8003f6e:	2300      	movhi	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d079      	beq.n	800406a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x4d2>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	3301      	adds	r3, #1
 8003f8a:	069b      	lsls	r3, r3, #26
 8003f8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f90:	e015      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x4fe>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e003      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	069b      	lsls	r3, r3, #26
 8003fba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x51e>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0e9b      	lsrs	r3, r3, #26
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	e017      	b.n	800400e <HAL_ADC_ConfigChannel+0x54e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e003      	b.n	8004002 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffc:	fab3 f383 	clz	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	ea42 0103 	orr.w	r1, r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x574>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	3301      	adds	r3, #1
 8004026:	f003 021f 	and.w	r2, r3, #31
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	051b      	lsls	r3, r3, #20
 8004032:	e018      	b.n	8004066 <HAL_ADC_ConfigChannel+0x5a6>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800404c:	2320      	movs	r3, #32
 800404e:	e003      	b.n	8004058 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f003 021f 	and.w	r2, r3, #31
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004066:	430b      	orrs	r3, r1
 8004068:	e081      	b.n	800416e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x5c6>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	0e9b      	lsrs	r3, r3, #26
 800407c:	3301      	adds	r3, #1
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004084:	e015      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x5f2>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800409e:	2320      	movs	r3, #32
 80040a0:	e003      	b.n	80040aa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	069b      	lsls	r3, r3, #26
 80040ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x612>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	e017      	b.n	8004102 <HAL_ADC_ConfigChannel+0x642>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	61fb      	str	r3, [r7, #28]
  return result;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_ADC_ConfigChannel+0x66e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0e9b      	lsrs	r3, r3, #26
 8004118:	3301      	adds	r3, #1
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	3b1e      	subs	r3, #30
 8004126:	051b      	lsls	r3, r3, #20
 8004128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800412c:	e01e      	b.n	800416c <HAL_ADC_ConfigChannel+0x6ac>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	613b      	str	r3, [r7, #16]
  return result;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e006      	b.n	8004158 <HAL_ADC_ConfigChannel+0x698>
 800414a:	bf00      	nop
 800414c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f003 021f 	and.w	r2, r3, #31
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	3b1e      	subs	r3, #30
 8004166:	051b      	lsls	r3, r3, #20
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004172:	4619      	mov	r1, r3
 8004174:	f7ff fa48 	bl	8003608 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b3f      	ldr	r3, [pc, #252]	@ (800427c <HAL_ADC_ConfigChannel+0x7bc>)
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d071      	beq.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004184:	483e      	ldr	r0, [pc, #248]	@ (8004280 <HAL_ADC_ConfigChannel+0x7c0>)
 8004186:	f7ff f967 	bl	8003458 <LL_ADC_GetCommonPathInternalCh>
 800418a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3c      	ldr	r2, [pc, #240]	@ (8004284 <HAL_ADC_ConfigChannel+0x7c4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x6e2>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3a      	ldr	r2, [pc, #232]	@ (8004288 <HAL_ADC_ConfigChannel+0x7c8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d127      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d121      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b6:	d157      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041c0:	4619      	mov	r1, r3
 80041c2:	482f      	ldr	r0, [pc, #188]	@ (8004280 <HAL_ADC_ConfigChannel+0x7c0>)
 80041c4:	f7ff f935 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041c8:	4b30      	ldr	r3, [pc, #192]	@ (800428c <HAL_ADC_ConfigChannel+0x7cc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <HAL_ADC_ConfigChannel+0x7d0>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041e2:	e002      	b.n	80041ea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f9      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041f0:	e03a      	b.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a27      	ldr	r2, [pc, #156]	@ (8004294 <HAL_ADC_ConfigChannel+0x7d4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d113      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004200:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10d      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a22      	ldr	r2, [pc, #136]	@ (8004298 <HAL_ADC_ConfigChannel+0x7d8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02a      	beq.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800421a:	4619      	mov	r1, r3
 800421c:	4818      	ldr	r0, [pc, #96]	@ (8004280 <HAL_ADC_ConfigChannel+0x7c0>)
 800421e:	f7ff f908 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004222:	e021      	b.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <HAL_ADC_ConfigChannel+0x7dc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d11c      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <HAL_ADC_ConfigChannel+0x7d8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d011      	beq.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004248:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800424c:	4619      	mov	r1, r3
 800424e:	480c      	ldr	r0, [pc, #48]	@ (8004280 <HAL_ADC_ConfigChannel+0x7c0>)
 8004250:	f7ff f8ef 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
 8004254:	e008      	b.n	8004268 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004270:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004274:	4618      	mov	r0, r3
 8004276:	37d8      	adds	r7, #216	@ 0xd8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	80080000 	.word	0x80080000
 8004280:	50000300 	.word	0x50000300
 8004284:	c3210000 	.word	0xc3210000
 8004288:	90c00010 	.word	0x90c00010
 800428c:	20000004 	.word	0x20000004
 8004290:	053e2d63 	.word	0x053e2d63
 8004294:	c7520000 	.word	0xc7520000
 8004298:	50000100 	.word	0x50000100
 800429c:	cb840000 	.word	0xcb840000

080042a0 <LL_ADC_IsEnabled>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_IsEnabled+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_IsEnabled+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d101      	bne.n	80042de <LL_ADC_REG_IsConversionOngoing+0x18>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b0a1      	sub	sp, #132	@ 0x84
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e08b      	b.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004312:	2300      	movs	r3, #0
 8004314:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004316:	2300      	movs	r3, #0
 8004318:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004322:	d102      	bne.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004324:	4b41      	ldr	r3, [pc, #260]	@ (800442c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e001      	b.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e06a      	b.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ffb9 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004354:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ffb3 	bl	80042c6 <LL_ADC_REG_IsConversionOngoing>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14c      	bne.n	8004400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004368:	2b00      	cmp	r3, #0
 800436a:	d149      	bne.n	8004400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800436c:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800436e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d028      	beq.n	80043ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800438a:	035b      	lsls	r3, r3, #13
 800438c:	430b      	orrs	r3, r1
 800438e:	431a      	orrs	r2, r3
 8004390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004392:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004398:	f7ff ff82 	bl	80042a0 <LL_ADC_IsEnabled>
 800439c:	4604      	mov	r4, r0
 800439e:	4823      	ldr	r0, [pc, #140]	@ (800442c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043a0:	f7ff ff7e 	bl	80042a0 <LL_ADC_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d133      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043b4:	f023 030f 	bic.w	r3, r3, #15
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	6811      	ldr	r1, [r2, #0]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043c8:	e024      	b.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043da:	f7ff ff61 	bl	80042a0 <LL_ADC_IsEnabled>
 80043de:	4604      	mov	r4, r0
 80043e0:	4812      	ldr	r0, [pc, #72]	@ (800442c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043e2:	f7ff ff5d 	bl	80042a0 <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4323      	orrs	r3, r4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d112      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043f6:	f023 030f 	bic.w	r3, r3, #15
 80043fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043fe:	e009      	b.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004412:	e000      	b.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800441e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004422:	4618      	mov	r0, r3
 8004424:	3784      	adds	r7, #132	@ 0x84
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	bf00      	nop
 800442c:	50000100 	.word	0x50000100
 8004430:	50000300 	.word	0x50000300

08004434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800445c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004466:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	60d3      	str	r3, [r2, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <__NVIC_GetPriorityGrouping+0x18>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 0307 	and.w	r3, r3, #7
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db0b      	blt.n	80044c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	4907      	ldr	r1, [pc, #28]	@ (80044d0 <__NVIC_EnableIRQ+0x38>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2001      	movs	r0, #1
 80044ba:	fa00 f202 	lsl.w	r2, r0, r2
 80044be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e100 	.word	0xe000e100

080044d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db0a      	blt.n	80044fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	490c      	ldr	r1, [pc, #48]	@ (8004520 <__NVIC_SetPriority+0x4c>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	0112      	lsls	r2, r2, #4
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	440b      	add	r3, r1
 80044f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044fc:	e00a      	b.n	8004514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4908      	ldr	r1, [pc, #32]	@ (8004524 <__NVIC_SetPriority+0x50>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3b04      	subs	r3, #4
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	440b      	add	r3, r1
 8004512:	761a      	strb	r2, [r3, #24]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	bf28      	it	cs
 8004546:	2304      	movcs	r3, #4
 8004548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3304      	adds	r3, #4
 800454e:	2b06      	cmp	r3, #6
 8004550:	d902      	bls.n	8004558 <NVIC_EncodePriority+0x30>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3b03      	subs	r3, #3
 8004556:	e000      	b.n	800455a <NVIC_EncodePriority+0x32>
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	401a      	ands	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004570:	f04f 31ff 	mov.w	r1, #4294967295
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	43d9      	mvns	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	4313      	orrs	r3, r2
         );
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	@ 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045a0:	d301      	bcc.n	80045a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045a2:	2301      	movs	r3, #1
 80045a4:	e00f      	b.n	80045c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045a6:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <SysTick_Config+0x40>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ae:	210f      	movs	r1, #15
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	f7ff ff8e 	bl	80044d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <SysTick_Config+0x40>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045be:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <SysTick_Config+0x40>)
 80045c0:	2207      	movs	r2, #7
 80045c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	e000e010 	.word	0xe000e010

080045d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff ff29 	bl	8004434 <__NVIC_SetPriorityGrouping>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f8:	f7ff ff40 	bl	800447c <__NVIC_GetPriorityGrouping>
 80045fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff90 	bl	8004528 <NVIC_EncodePriority>
 8004608:	4602      	mov	r2, r0
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff5f 	bl	80044d4 <__NVIC_SetPriority>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff33 	bl	8004498 <__NVIC_EnableIRQ>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ffa4 	bl	8004590 <SysTick_Config>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e08d      	b.n	8004782 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	4b47      	ldr	r3, [pc, #284]	@ (800478c <HAL_DMA_Init+0x138>)
 800466e:	429a      	cmp	r2, r3
 8004670:	d80f      	bhi.n	8004692 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	4b45      	ldr	r3, [pc, #276]	@ (8004790 <HAL_DMA_Init+0x13c>)
 800467a:	4413      	add	r3, r2
 800467c:	4a45      	ldr	r2, [pc, #276]	@ (8004794 <HAL_DMA_Init+0x140>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	009a      	lsls	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a42      	ldr	r2, [pc, #264]	@ (8004798 <HAL_DMA_Init+0x144>)
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004690:	e00e      	b.n	80046b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	4b40      	ldr	r3, [pc, #256]	@ (800479c <HAL_DMA_Init+0x148>)
 800469a:	4413      	add	r3, r2
 800469c:	4a3d      	ldr	r2, [pc, #244]	@ (8004794 <HAL_DMA_Init+0x140>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	009a      	lsls	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a3c      	ldr	r2, [pc, #240]	@ (80047a0 <HAL_DMA_Init+0x14c>)
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa84 	bl	8004c10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004710:	d102      	bne.n	8004718 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800472c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_DMA_Init+0x104>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b04      	cmp	r3, #4
 800473c:	d80c      	bhi.n	8004758 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 faa4 	bl	8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e008      	b.n	800476a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40020407 	.word	0x40020407
 8004790:	bffdfff8 	.word	0xbffdfff8
 8004794:	cccccccd 	.word	0xcccccccd
 8004798:	40020000 	.word	0x40020000
 800479c:	bffdfbf8 	.word	0xbffdfbf8
 80047a0:	40020400 	.word	0x40020400

080047a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_DMA_Start_IT+0x20>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e066      	b.n	8004892 <HAL_DMA_Start_IT+0xee>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d155      	bne.n	8004884 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f9c9 	bl	8004b94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 020e 	orr.w	r2, r2, #14
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00f      	b.n	800483c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 020a 	orr.w	r2, r2, #10
 800483a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004858:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004870:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e005      	b.n	8004890 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d005      	beq.n	80048be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	e037      	b.n	800492e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 020e 	bic.w	r2, r2, #14
 80048cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f003 021f 	and.w	r2, r3, #31
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800490a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00c      	beq.n	800492e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004922:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800492c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d00d      	beq.n	8004980 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2204      	movs	r2, #4
 8004968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e047      	b.n	8004a10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020e 	bic.w	r2, r2, #14
 800498e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	f003 021f 	and.w	r2, r3, #31
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
    }
  }
  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d026      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7a>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 021f 	and.w	r2, r3, #31
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d071      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a92:	e06c      	b.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02e      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d029      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020a 	bic.w	r2, r2, #10
 8004ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004adc:	f003 021f 	and.w	r2, r3, #31
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d038      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b04:	e033      	b.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2208      	movs	r2, #8
 8004b10:	409a      	lsls	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d025      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 020e 	bic.w	r2, r2, #14
 8004b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
}
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b86:	b2db      	uxtb	r3, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004baa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bbc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	f003 021f 	and.w	r2, r3, #31
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d108      	bne.n	8004bf4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bf2:	e007      	b.n	8004c04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d802      	bhi.n	8004c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c24:	4b15      	ldr	r3, [pc, #84]	@ (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e001      	b.n	8004c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c2c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b08      	subs	r3, #8
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	009a      	lsls	r2, r3, #2
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a0b      	ldr	r2, [pc, #44]	@ (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	409a      	lsls	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40020407 	.word	0x40020407
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020820 	.word	0x40020820
 8004c84:	cccccccd 	.word	0xcccccccd
 8004c88:	40020880 	.word	0x40020880

08004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a08      	ldr	r2, [pc, #32]	@ (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2201      	movs	r2, #1
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	1000823f 	.word	0x1000823f
 8004cd0:	40020940 	.word	0x40020940

08004cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ce2:	e15a      	b.n	8004f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 814c 	beq.w	8004f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d005      	beq.n	8004d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d130      	bne.n	8004d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2203      	movs	r2, #3
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 0201 	and.w	r2, r3, #1
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d017      	beq.n	8004db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d123      	bne.n	8004e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	08da      	lsrs	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3208      	adds	r2, #8
 8004dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	220f      	movs	r2, #15
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	08da      	lsrs	r2, r3, #3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3208      	adds	r2, #8
 8004e00:	6939      	ldr	r1, [r7, #16]
 8004e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2203      	movs	r2, #3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 0203 	and.w	r2, r3, #3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a6 	beq.w	8004f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e48:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb8 <HAL_GPIO_Init+0x2e4>)
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb8 <HAL_GPIO_Init+0x2e4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e54:	4b58      	ldr	r3, [pc, #352]	@ (8004fb8 <HAL_GPIO_Init+0x2e4>)
 8004e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e60:	4a56      	ldr	r2, [pc, #344]	@ (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	089b      	lsrs	r3, r3, #2
 8004e66:	3302      	adds	r3, #2
 8004e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	220f      	movs	r2, #15
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e8a:	d01f      	beq.n	8004ecc <HAL_GPIO_Init+0x1f8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004fc0 <HAL_GPIO_Init+0x2ec>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d019      	beq.n	8004ec8 <HAL_GPIO_Init+0x1f4>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc4 <HAL_GPIO_Init+0x2f0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <HAL_GPIO_Init+0x1f0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_GPIO_Init+0x2f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_GPIO_Init+0x1ec>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a49      	ldr	r2, [pc, #292]	@ (8004fcc <HAL_GPIO_Init+0x2f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <HAL_GPIO_Init+0x1e8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a48      	ldr	r2, [pc, #288]	@ (8004fd0 <HAL_GPIO_Init+0x2fc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_GPIO_Init+0x1e4>
 8004eb4:	2305      	movs	r3, #5
 8004eb6:	e00a      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004eb8:	2306      	movs	r3, #6
 8004eba:	e008      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	e006      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e004      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e002      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_GPIO_Init+0x1fa>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	f002 0203 	and.w	r2, r2, #3
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	4093      	lsls	r3, r2
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ede:	4937      	ldr	r1, [pc, #220]	@ (8004fbc <HAL_GPIO_Init+0x2e8>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eec:	4b39      	ldr	r3, [pc, #228]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f10:	4a30      	ldr	r2, [pc, #192]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f16:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f3a:	4a26      	ldr	r2, [pc, #152]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f40:	4b24      	ldr	r3, [pc, #144]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f64:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f8e:	4a11      	ldr	r2, [pc, #68]	@ (8004fd4 <HAL_GPIO_Init+0x300>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f ae9d 	bne.w	8004ce4 <HAL_GPIO_Init+0x10>
  }
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	48000400 	.word	0x48000400
 8004fc4:	48000800 	.word	0x48000800
 8004fc8:	48000c00 	.word	0x48000c00
 8004fcc:	48001000 	.word	0x48001000
 8004fd0:	48001400 	.word	0x48001400
 8004fd4:	40010400 	.word	0x40010400

08004fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	e001      	b.n	8004ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
 8005014:	4613      	mov	r3, r2
 8005016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005018:	787b      	ldrb	r3, [r7, #1]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005024:	e002      	b.n	800502c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e08d      	b.n	8005166 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fd fd54 	bl	8002b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2224      	movs	r2, #36	@ 0x24
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005088:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005098:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d107      	bne.n	80050b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	e006      	b.n	80050c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d108      	bne.n	80050da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d6:	605a      	str	r2, [r3, #4]
 80050d8:	e007      	b.n	80050ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800510c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69d9      	ldr	r1, [r3, #28]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1a      	ldr	r2, [r3, #32]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	f040 80f9 	bne.w	800538a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_I2C_Mem_Write+0x34>
 800519e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0ed      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_I2C_Mem_Write+0x4e>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e0e6      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051c6:	f7fe f8f3 	bl	80033b0 <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2319      	movs	r3, #25
 80051d2:	2201      	movs	r2, #1
 80051d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f001 fd94 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0d1      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2221      	movs	r2, #33	@ 0x21
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2240      	movs	r2, #64	@ 0x40
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005210:	88f8      	ldrh	r0, [r7, #6]
 8005212:	893a      	ldrh	r2, [r7, #8]
 8005214:	8979      	ldrh	r1, [r7, #10]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	4603      	mov	r3, r0
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 ff6f 	bl	8006104 <I2C_RequestMemoryWrite>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0a9      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2bff      	cmp	r3, #255	@ 0xff
 8005240:	d90e      	bls.n	8005260 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	@ 0xff
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f001 ff17 	bl	800708c <I2C_TransferConfig>
 800525e:	e00f      	b.n	8005280 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	8979      	ldrh	r1, [r7, #10]
 8005272:	2300      	movs	r3, #0
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 ff06 	bl	800708c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f001 fd97 	bl	8006db8 <I2C_WaitOnTXISFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e07b      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d034      	beq.n	8005338 <HAL_I2C_Mem_Write+0x1c8>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d130      	bne.n	8005338 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	@ 0x80
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f001 fd10 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e04d      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2bff      	cmp	r3, #255	@ 0xff
 80052f8:	d90e      	bls.n	8005318 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	22ff      	movs	r2, #255	@ 0xff
 80052fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005304:	b2da      	uxtb	r2, r3
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f001 febb 	bl	800708c <I2C_TransferConfig>
 8005316:	e00f      	b.n	8005338 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005326:	b2da      	uxtb	r2, r3
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f001 feaa 	bl	800708c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d19e      	bne.n	8005280 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f001 fd7d 	bl	8006e46 <I2C_WaitOnSTOPFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e01a      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2220      	movs	r2, #32
 800535c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_I2C_Mem_Write+0x224>)
 800536a:	400b      	ands	r3, r1
 800536c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	fe00e800 	.word	0xfe00e800

08005398 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	f040 80fd 	bne.w	80055ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_I2C_Mem_Read+0x34>
 80053c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0f1      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Mem_Read+0x4e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e0ea      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053ee:	f7fd ffdf 	bl	80033b0 <HAL_GetTick>
 80053f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2319      	movs	r3, #25
 80053fa:	2201      	movs	r2, #1
 80053fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f001 fc80 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0d5      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2222      	movs	r2, #34	@ 0x22
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2240      	movs	r2, #64	@ 0x40
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005438:	88f8      	ldrh	r0, [r7, #6]
 800543a:	893a      	ldrh	r2, [r7, #8]
 800543c:	8979      	ldrh	r1, [r7, #10]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4603      	mov	r3, r0
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 feaf 	bl	80061ac <I2C_RequestMemoryRead>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0ad      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2bff      	cmp	r3, #255	@ 0xff
 8005468:	d90e      	bls.n	8005488 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	@ 0xff
 800546e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	4b52      	ldr	r3, [pc, #328]	@ (80055c4 <HAL_I2C_Mem_Read+0x22c>)
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f001 fe03 	bl	800708c <I2C_TransferConfig>
 8005486:	e00f      	b.n	80054a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	4b4a      	ldr	r3, [pc, #296]	@ (80055c4 <HAL_I2C_Mem_Read+0x22c>)
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f001 fdf2 	bl	800708c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	2200      	movs	r2, #0
 80054b0:	2104      	movs	r1, #4
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f001 fc27 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07c      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d034      	beq.n	8005568 <HAL_I2C_Mem_Read+0x1d0>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d130      	bne.n	8005568 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	2200      	movs	r2, #0
 800550e:	2180      	movs	r1, #128	@ 0x80
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fbf8 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04d      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2bff      	cmp	r3, #255	@ 0xff
 8005528:	d90e      	bls.n	8005548 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	22ff      	movs	r2, #255	@ 0xff
 800552e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005534:	b2da      	uxtb	r2, r3
 8005536:	8979      	ldrh	r1, [r7, #10]
 8005538:	2300      	movs	r3, #0
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f001 fda3 	bl	800708c <I2C_TransferConfig>
 8005546:	e00f      	b.n	8005568 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005556:	b2da      	uxtb	r2, r3
 8005558:	8979      	ldrh	r1, [r7, #10]
 800555a:	2300      	movs	r3, #0
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f001 fd92 	bl	800708c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d19a      	bne.n	80054a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fc65 	bl	8006e46 <I2C_WaitOnSTOPFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e01a      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2220      	movs	r2, #32
 800558c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <HAL_I2C_Mem_Read+0x230>)
 800559a:	400b      	ands	r3, r1
 800559c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	80002400 	.word	0x80002400
 80055c8:	fe00e800 	.word	0xfe00e800

080055cc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	817b      	strh	r3, [r7, #10]
 80055de:	460b      	mov	r3, r1
 80055e0:	813b      	strh	r3, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 80c2 	bne.w	8005778 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_I2C_Mem_Read_DMA+0x34>
 80055fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b6      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561a:	d101      	bne.n	8005620 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
 800561e:	e0ac      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_I2C_Mem_Read_DMA+0x62>
 800562a:	2302      	movs	r3, #2
 800562c:	e0a5      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2222      	movs	r2, #34	@ 0x22
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2240      	movs	r2, #64	@ 0x40
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a4a      	ldr	r2, [pc, #296]	@ (8005784 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 800565c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a49      	ldr	r2, [pc, #292]	@ (8005788 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8005662:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8005664:	897a      	ldrh	r2, [r7, #10]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2bff      	cmp	r3, #255	@ 0xff
 8005672:	d903      	bls.n	800567c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	22ff      	movs	r2, #255	@ 0xff
 8005678:	851a      	strh	r2, [r3, #40]	@ 0x28
 800567a:	e004      	b.n	8005686 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d109      	bne.n	80056a0 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800568c:	893b      	ldrh	r3, [r7, #8]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	651a      	str	r2, [r3, #80]	@ 0x50
 800569e:	e00b      	b.n	80056b8 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80056ae:	893b      	ldrh	r3, [r7, #8]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d020      	beq.n	8005702 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	4a31      	ldr	r2, [pc, #196]	@ (800578c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	4a30      	ldr	r2, [pc, #192]	@ (8005790 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80056ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056dc:	2200      	movs	r2, #0
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3324      	adds	r3, #36	@ 0x24
 80056ea:	4619      	mov	r1, r3
 80056ec:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056f2:	f7ff f857 	bl	80047a4 <HAL_DMA_Start_IT>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d127      	bne.n	8005750 <HAL_I2C_Mem_Read_DMA+0x184>
 8005700:	e013      	b.n	800572a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e027      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	8979      	ldrh	r1, [r7, #10]
 8005730:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 fca8 	bl	800708c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005744:	2101      	movs	r1, #1
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f001 fcd2 	bl	80070f0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e014      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005764:	f043 0210 	orr.w	r2, r3, #16
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	ffff0000 	.word	0xffff0000
 8005788:	08005d09 	.word	0x08005d09
 800578c:	08006c07 	.word	0x08006c07
 8005790:	08006c9d 	.word	0x08006c9d
 8005794:	80002000 	.word	0x80002000

08005798 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4798      	blx	r3
  }
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800580c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00f      	beq.n	8005838 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f043 0208 	orr.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005836:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	f043 0202 	orr.w	r2, r3, #2
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005860:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 030b 	and.w	r3, r3, #11
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 f88b 	bl	8006990 <I2C_ITError>
  }
}
 800587a:	bf00      	nop
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	70fb      	strb	r3, [r7, #3]
 80058de:	4613      	mov	r3, r2
 80058e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <I2C_Slave_ISR_IT+0x24>
 800595e:	2302      	movs	r3, #2
 8005960:	e0e2      	b.n	8005b28 <I2C_Slave_ISR_IT+0x1ea>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fe4d 	bl	8006620 <I2C_ITSlaveCplt>
 8005986:	e0ca      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b00      	cmp	r3, #0
 8005990:	d04b      	beq.n	8005a2a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005998:	2b00      	cmp	r3, #0
 800599a:	d046      	beq.n	8005a2a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d128      	bne.n	80059f8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b28      	cmp	r3, #40	@ 0x28
 80059b0:	d108      	bne.n	80059c4 <I2C_Slave_ISR_IT+0x86>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b8:	d104      	bne.n	80059c4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 ff93 	bl	80068e8 <I2C_ITListenCplt>
 80059c2:	e031      	b.n	8005a28 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b29      	cmp	r3, #41	@ 0x29
 80059ce:	d10e      	bne.n	80059ee <I2C_Slave_ISR_IT+0xb0>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059d6:	d00a      	beq.n	80059ee <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f001 f8ec 	bl	8006bbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fcf5 	bl	80063d6 <I2C_ITSlaveSeqCplt>
 80059ec:	e01c      	b.n	8005a28 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80059f6:	e08f      	b.n	8005b18 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2210      	movs	r2, #16
 80059fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a04:	f043 0204 	orr.w	r2, r3, #4
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <I2C_Slave_ISR_IT+0xdc>
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a18:	d17e      	bne.n	8005b18 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 ffb5 	bl	8006990 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a26:	e077      	b.n	8005b18 <I2C_Slave_ISR_IT+0x1da>
 8005a28:	e076      	b.n	8005b18 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d02f      	beq.n	8005a94 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02a      	beq.n	8005a94 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d018      	beq.n	8005a7a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d14b      	bne.n	8005b1c <I2C_Slave_ISR_IT+0x1de>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a8a:	d047      	beq.n	8005b1c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fca2 	bl	80063d6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005a92:	e043      	b.n	8005b1c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005aa8:	6939      	ldr	r1, [r7, #16]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fbd2 	bl	8006254 <I2C_ITAddrCplt>
 8005ab0:	e035      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d030      	beq.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d02b      	beq.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d018      	beq.n	8005b02 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b00:	e00d      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b08:	d002      	beq.n	8005b10 <I2C_Slave_ISR_IT+0x1d2>
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fc60 	bl	80063d6 <I2C_ITSlaveSeqCplt>
 8005b16:	e002      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005b1c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <I2C_Master_ISR_DMA+0x1a>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e0d9      	b.n	8005cfe <I2C_Master_ISR_DMA+0x1ce>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d016      	beq.n	8005b8a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d011      	beq.n	8005b8a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f043 0204 	orr.w	r2, r3, #4
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f001 fab7 	bl	80070f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f001 f81b 	bl	8006bbe <I2C_Flush_TXDR>
 8005b88:	e0b4      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d071      	beq.n	8005c78 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d06c      	beq.n	8005c78 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d04e      	beq.n	8005c56 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2bff      	cmp	r3, #255	@ 0xff
 8005bce:	d906      	bls.n	8005bde <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005bd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	e010      	b.n	8005c00 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bf0:	d003      	beq.n	8005bfa <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e002      	b.n	8005c00 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bfe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	8a79      	ldrh	r1, [r7, #18]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f001 fa3c 	bl	800708c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	@ 0x22
 8005c30:	d108      	bne.n	8005c44 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c42:	e057      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c52:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005c54:	e04e      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c64:	d003      	beq.n	8005c6e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fb78 	bl	800635c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005c6c:	e042      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c6e:	2140      	movs	r1, #64	@ 0x40
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fe8d 	bl	8006990 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005c76:	e03d      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d028      	beq.n	8005cd4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d023      	beq.n	8005cd4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d119      	bne.n	8005cca <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ca4:	d025      	beq.n	8005cf2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cae:	d108      	bne.n	8005cc2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cbe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005cc0:	e017      	b.n	8005cf2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fb4a 	bl	800635c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005cc8:	e013      	b.n	8005cf2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005cca:	2140      	movs	r1, #64	@ 0x40
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fe5f 	bl	8006990 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cd2:	e00e      	b.n	8005cf2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fbd0 	bl	8006490 <I2C_ITMasterCplt>
 8005cf0:	e000      	b.n	8005cf4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005cf2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005d14:	4b8d      	ldr	r3, [pc, #564]	@ (8005f4c <I2C_Mem_ISR_DMA+0x244>)
 8005d16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <I2C_Mem_ISR_DMA+0x1e>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e10e      	b.n	8005f44 <I2C_Mem_ISR_DMA+0x23c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d016      	beq.n	8005d66 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d011      	beq.n	8005d66 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2210      	movs	r2, #16
 8005d48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d56:	2120      	movs	r1, #32
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f001 f9c9 	bl	80070f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 ff2d 	bl	8006bbe <I2C_Flush_TXDR>
 8005d64:	e0e9      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d8c:	e0d5      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05f      	beq.n	8005e58 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d05a      	beq.n	8005e58 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005da2:	2101      	movs	r1, #1
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f001 fa27 	bl	80071f8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005daa:	2110      	movs	r1, #16
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f001 f99f 	bl	80070f0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d048      	beq.n	8005e4e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2bff      	cmp	r3, #255	@ 0xff
 8005dc4:	d910      	bls.n	8005de8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	@ 0xff
 8005dca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f001 f953 	bl	800708c <I2C_TransferConfig>
 8005de6:	e011      	b.n	8005e0c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df6:	b299      	uxth	r1, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f001 f940 	bl	800708c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b22      	cmp	r3, #34	@ 0x22
 8005e28:	d108      	bne.n	8005e3c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e3a:	e07e      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e4c:	e075      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e4e:	2140      	movs	r1, #64	@ 0x40
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fd9d 	bl	8006990 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005e56:	e070      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05d      	beq.n	8005f1e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d058      	beq.n	8005f1e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f001 f9c2 	bl	80071f8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005e74:	2110      	movs	r1, #16
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f001 f93a 	bl	80070f0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b22      	cmp	r3, #34	@ 0x22
 8005e86:	d101      	bne.n	8005e8c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <I2C_Mem_ISR_DMA+0x248>)
 8005e8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2bff      	cmp	r3, #255	@ 0xff
 8005e94:	d910      	bls.n	8005eb8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	22ff      	movs	r2, #255	@ 0xff
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea0:	b299      	uxth	r1, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f001 f8eb 	bl	800708c <I2C_TransferConfig>
 8005eb6:	e011      	b.n	8005edc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f001 f8d8 	bl	800708c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b22      	cmp	r3, #34	@ 0x22
 8005ef8:	d108      	bne.n	8005f0c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f08:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f0a:	e016      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f1c:	e00d      	b.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 faab 	bl	8006490 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	80002000 	.word	0x80002000
 8005f50:	80002400 	.word	0x80002400

08005f54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <I2C_Slave_ISR_DMA+0x24>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e0c0      	b.n	80060fa <I2C_Slave_ISR_DMA+0x1a6>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fb42 	bl	8006620 <I2C_ITSlaveCplt>
 8005f9c:	e0a8      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8095 	beq.w	80060d4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 808f 	beq.w	80060d4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07d      	beq.n	80060c6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00c      	beq.n	800600e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800600a:	2301      	movs	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d128      	bne.n	8006066 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b28      	cmp	r3, #40	@ 0x28
 800601e:	d108      	bne.n	8006032 <I2C_Slave_ISR_DMA+0xde>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006026:	d104      	bne.n	8006032 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fc5c 	bl	80068e8 <I2C_ITListenCplt>
 8006030:	e048      	b.n	80060c4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b29      	cmp	r3, #41	@ 0x29
 800603c:	d10e      	bne.n	800605c <I2C_Slave_ISR_DMA+0x108>
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006044:	d00a      	beq.n	800605c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2210      	movs	r2, #16
 800604c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fdb5 	bl	8006bbe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f9be 	bl	80063d6 <I2C_ITSlaveSeqCplt>
 800605a:	e033      	b.n	80060c4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006064:	e034      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006080:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <I2C_Slave_ISR_DMA+0x13c>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800608e:	d11f      	bne.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b21      	cmp	r3, #33	@ 0x21
 8006094:	d002      	beq.n	800609c <I2C_Slave_ISR_DMA+0x148>
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	2b29      	cmp	r3, #41	@ 0x29
 800609a:	d103      	bne.n	80060a4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2221      	movs	r2, #33	@ 0x21
 80060a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80060a2:	e008      	b.n	80060b6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b22      	cmp	r3, #34	@ 0x22
 80060a8:	d002      	beq.n	80060b0 <I2C_Slave_ISR_DMA+0x15c>
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ae:	d102      	bne.n	80060b6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	@ 0x22
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fc67 	bl	8006990 <I2C_ITError>
      if (treatdmanack == 1U)
 80060c2:	e005      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
 80060c4:	e004      	b.n	80060d0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060ce:	e00f      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80060d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060d2:	e00d      	b.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8b2 	bl	8006254 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	4608      	mov	r0, r1
 800610e:	4611      	mov	r1, r2
 8006110:	461a      	mov	r2, r3
 8006112:	4603      	mov	r3, r0
 8006114:	817b      	strh	r3, [r7, #10]
 8006116:	460b      	mov	r3, r1
 8006118:	813b      	strh	r3, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	8979      	ldrh	r1, [r7, #10]
 8006124:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <I2C_RequestMemoryWrite+0xa4>)
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 ffad 	bl	800708c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 fe3e 	bl	8006db8 <I2C_WaitOnTXISFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e02c      	b.n	80061a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d105      	bne.n	8006158 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800614c:	893b      	ldrh	r3, [r7, #8]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	629a      	str	r2, [r3, #40]	@ 0x28
 8006156:	e015      	b.n	8006184 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006158:	893b      	ldrh	r3, [r7, #8]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	b29b      	uxth	r3, r3
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	69b9      	ldr	r1, [r7, #24]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fe24 	bl	8006db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e012      	b.n	80061a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	@ 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fdb9 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	80002000 	.word	0x80002000

080061ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	8979      	ldrh	r1, [r7, #10]
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <I2C_RequestMemoryRead+0xa4>)
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 ff5a 	bl	800708c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	69b9      	ldr	r1, [r7, #24]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fdeb 	bl	8006db8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e02c      	b.n	8006246 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d105      	bne.n	80061fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061f2:	893b      	ldrh	r3, [r7, #8]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80061fc:	e015      	b.n	800622a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	0a1b      	lsrs	r3, r3, #8
 8006202:	b29b      	uxth	r3, r3
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	69b9      	ldr	r1, [r7, #24]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fdd1 	bl	8006db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e012      	b.n	8006246 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006220:	893b      	ldrh	r3, [r7, #8]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2200      	movs	r2, #0
 8006232:	2140      	movs	r1, #64	@ 0x40
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fd66 	bl	8006d06 <I2C_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	80002000 	.word	0x80002000

08006254 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800626a:	2b28      	cmp	r3, #40	@ 0x28
 800626c:	d16a      	bne.n	8006344 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	b29b      	uxth	r3, r3
 8006288:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800628c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800629a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80062a8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d138      	bne.n	8006324 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80062b2:	897b      	ldrh	r3, [r7, #10]
 80062b4:	09db      	lsrs	r3, r3, #7
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	89bb      	ldrh	r3, [r7, #12]
 80062ba:	4053      	eors	r3, r2
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f003 0306 	and.w	r3, r3, #6
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d11c      	bne.n	8006300 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d13b      	bne.n	8006354 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2208      	movs	r2, #8
 80062e8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062f2:	89ba      	ldrh	r2, [r7, #12]
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff faea 	bl	80058d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062fe:	e029      	b.n	8006354 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006300:	893b      	ldrh	r3, [r7, #8]
 8006302:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 ff75 	bl	80071f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006316:	89ba      	ldrh	r2, [r7, #12]
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fad8 	bl	80058d2 <HAL_I2C_AddrCallback>
}
 8006322:	e017      	b.n	8006354 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 ff65 	bl	80071f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006336:	89ba      	ldrh	r2, [r7, #12]
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fac8 	bl	80058d2 <HAL_I2C_AddrCallback>
}
 8006342:	e007      	b.n	8006354 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2208      	movs	r2, #8
 800634a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b21      	cmp	r3, #33	@ 0x21
 8006376:	d115      	bne.n	80063a4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2211      	movs	r2, #17
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 ff32 	bl	80071f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fa70 	bl	8005882 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063a2:	e014      	b.n	80063ce <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2212      	movs	r2, #18
 80063b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063b8:	2102      	movs	r1, #2
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 ff1c 	bl	80071f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fa64 	bl	8005896 <HAL_I2C_MasterRxCpltCallback>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e00c      	b.n	8006424 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006422:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b29      	cmp	r3, #41	@ 0x29
 800642e:	d112      	bne.n	8006456 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2228      	movs	r2, #40	@ 0x28
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2221      	movs	r2, #33	@ 0x21
 800643c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800643e:	2101      	movs	r1, #1
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fed9 	bl	80071f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fa2b 	bl	80058aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006454:	e017      	b.n	8006486 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006460:	d111      	bne.n	8006486 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2228      	movs	r2, #40	@ 0x28
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2222      	movs	r2, #34	@ 0x22
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006470:	2102      	movs	r1, #2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fec0 	bl	80071f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff fa1c 	bl	80058be <HAL_I2C_SlaveRxCpltCallback>
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2220      	movs	r2, #32
 80064a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b21      	cmp	r3, #33	@ 0x21
 80064b0:	d107      	bne.n	80064c2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064b2:	2101      	movs	r1, #1
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fe9f 	bl	80071f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2211      	movs	r2, #17
 80064be:	631a      	str	r2, [r3, #48]	@ 0x30
 80064c0:	e00c      	b.n	80064dc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b22      	cmp	r3, #34	@ 0x22
 80064cc:	d106      	bne.n	80064dc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064ce:	2102      	movs	r1, #2
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fe91 	bl	80071f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2212      	movs	r2, #18
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006618 <I2C_ITMasterCplt+0x188>)
 80064e8:	400b      	ands	r3, r1
 80064ea:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a49      	ldr	r2, [pc, #292]	@ (800661c <I2C_ITMasterCplt+0x18c>)
 80064f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b60      	cmp	r3, #96	@ 0x60
 8006520:	d10a      	bne.n	8006538 <I2C_ITMasterCplt+0xa8>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	b2db      	uxtb	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006536:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb40 	bl	8006bbe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006542:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b60      	cmp	r3, #96	@ 0x60
 800654e:	d002      	beq.n	8006556 <I2C_ITMasterCplt+0xc6>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d006      	beq.n	8006564 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa17 	bl	8006990 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006562:	e054      	b.n	800660e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b21      	cmp	r3, #33	@ 0x21
 800656e:	d124      	bne.n	80065ba <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d10b      	bne.n	80065a2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f9b1 	bl	8005902 <HAL_I2C_MemTxCpltCallback>
}
 80065a0:	e035      	b.n	800660e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff f965 	bl	8005882 <HAL_I2C_MasterTxCpltCallback>
}
 80065b8:	e029      	b.n	800660e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b22      	cmp	r3, #34	@ 0x22
 80065c4:	d123      	bne.n	800660e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b40      	cmp	r3, #64	@ 0x40
 80065de:	d10b      	bne.n	80065f8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fb fce9 	bl	8001fc8 <HAL_I2C_MemRxCpltCallback>
}
 80065f6:	e00a      	b.n	800660e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff f944 	bl	8005896 <HAL_I2C_MasterRxCpltCallback>
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	fe00e800 	.word	0xfe00e800
 800661c:	ffff0000 	.word	0xffff0000

08006620 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006642:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2220      	movs	r2, #32
 800664a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	2b21      	cmp	r3, #33	@ 0x21
 8006650:	d002      	beq.n	8006658 <I2C_ITSlaveCplt+0x38>
 8006652:	7afb      	ldrb	r3, [r7, #11]
 8006654:	2b29      	cmp	r3, #41	@ 0x29
 8006656:	d108      	bne.n	800666a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006658:	f248 0101 	movw	r1, #32769	@ 0x8001
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fdcb 	bl	80071f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2221      	movs	r2, #33	@ 0x21
 8006666:	631a      	str	r2, [r3, #48]	@ 0x30
 8006668:	e019      	b.n	800669e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	2b22      	cmp	r3, #34	@ 0x22
 800666e:	d002      	beq.n	8006676 <I2C_ITSlaveCplt+0x56>
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b2a      	cmp	r3, #42	@ 0x2a
 8006674:	d108      	bne.n	8006688 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006676:	f248 0102 	movw	r1, #32770	@ 0x8002
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fdbc 	bl	80071f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2222      	movs	r2, #34	@ 0x22
 8006684:	631a      	str	r2, [r3, #48]	@ 0x30
 8006686:	e00a      	b.n	800669e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	2b28      	cmp	r3, #40	@ 0x28
 800668c:	d107      	bne.n	800669e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800668e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fdb0 	bl	80071f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066ac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	4b89      	ldr	r3, [pc, #548]	@ (80068e0 <I2C_ITSlaveCplt+0x2c0>)
 80066ba:	400b      	ands	r3, r1
 80066bc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa7d 	bl	8006bbe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d013      	beq.n	80066f6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01f      	beq.n	8006726 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066f4:	e017      	b.n	8006726 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800670e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d006      	beq.n	8006726 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0304 	bic.w	r3, r3, #4
 8006736:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00c      	beq.n	8006772 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006780:	f043 0204 	orr.w	r2, r3, #4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d049      	beq.n	8006826 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006798:	2b00      	cmp	r3, #0
 800679a:	d044      	beq.n	8006826 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d128      	bne.n	80067f8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b28      	cmp	r3, #40	@ 0x28
 80067b0:	d108      	bne.n	80067c4 <I2C_ITSlaveCplt+0x1a4>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067b8:	d104      	bne.n	80067c4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80067ba:	6979      	ldr	r1, [r7, #20]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f893 	bl	80068e8 <I2C_ITListenCplt>
 80067c2:	e030      	b.n	8006826 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b29      	cmp	r3, #41	@ 0x29
 80067ce:	d10e      	bne.n	80067ee <I2C_ITSlaveCplt+0x1ce>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067d6:	d00a      	beq.n	80067ee <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2210      	movs	r2, #16
 80067de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9ec 	bl	8006bbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fdf5 	bl	80063d6 <I2C_ITSlaveSeqCplt>
 80067ec:	e01b      	b.n	8006826 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2210      	movs	r2, #16
 80067f4:	61da      	str	r2, [r3, #28]
 80067f6:	e016      	b.n	8006826 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2210      	movs	r2, #16
 80067fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006804:	f043 0204 	orr.w	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <I2C_ITSlaveCplt+0x1fa>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006818:	d105      	bne.n	8006826 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8b5 	bl	8006990 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8a4 	bl	8006990 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b28      	cmp	r3, #40	@ 0x28
 8006852:	d141      	bne.n	80068d8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006854:	6979      	ldr	r1, [r7, #20]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f846 	bl	80068e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800685c:	e03c      	b.n	80068d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006866:	d014      	beq.n	8006892 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fdb4 	bl	80063d6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <I2C_ITSlaveCplt+0x2c4>)
 8006872:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff f82f 	bl	80058ee <HAL_I2C_ListenCpltCallback>
}
 8006890:	e022      	b.n	80068d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b22      	cmp	r3, #34	@ 0x22
 800689c:	d10e      	bne.n	80068bc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff f802 	bl	80058be <HAL_I2C_SlaveRxCpltCallback>
}
 80068ba:	e00d      	b.n	80068d8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fe ffe9 	bl	80058aa <HAL_I2C_SlaveTxCpltCallback>
}
 80068d8:	bf00      	nop
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	fe00e800 	.word	0xfe00e800
 80068e4:	ffff0000 	.word	0xffff0000

080068e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a25      	ldr	r2, [pc, #148]	@ (800698c <I2C_ITListenCplt+0xa4>)
 80068f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d022      	beq.n	8006964 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695c:	f043 0204 	orr.w	r2, r3, #4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006964:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc45 	bl	80071f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2210      	movs	r2, #16
 8006974:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe ffb5 	bl	80058ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	ffff0000 	.word	0xffff0000

08006990 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a6d      	ldr	r2, [pc, #436]	@ (8006b64 <I2C_ITError+0x1d4>)
 80069ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b28      	cmp	r3, #40	@ 0x28
 80069c6:	d005      	beq.n	80069d4 <I2C_ITError+0x44>
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b29      	cmp	r3, #41	@ 0x29
 80069cc:	d002      	beq.n	80069d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069d2:	d10b      	bne.n	80069ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069d4:	2103      	movs	r1, #3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fc0e 	bl	80071f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2228      	movs	r2, #40	@ 0x28
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a60      	ldr	r2, [pc, #384]	@ (8006b68 <I2C_ITError+0x1d8>)
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80069ea:	e030      	b.n	8006a4e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc01 	bl	80071f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f8e1 	bl	8006bbe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b60      	cmp	r3, #96	@ 0x60
 8006a06:	d01f      	beq.n	8006a48 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d114      	bne.n	8006a48 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d109      	bne.n	8006a40 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2210      	movs	r2, #16
 8006a32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a38:	f043 0204 	orr.w	r2, r3, #4
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d039      	beq.n	8006ad0 <I2C_ITError+0x140>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b11      	cmp	r3, #17
 8006a60:	d002      	beq.n	8006a68 <I2C_ITError+0xd8>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b21      	cmp	r3, #33	@ 0x21
 8006a66:	d133      	bne.n	8006ad0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a76:	d107      	bne.n	8006a88 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe f873 	bl	8004b78 <HAL_DMA_GetState>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d017      	beq.n	8006ac8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	4a33      	ldr	r2, [pc, #204]	@ (8006b6c <I2C_ITError+0x1dc>)
 8006a9e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fd ff4d 	bl	800494c <HAL_DMA_Abort_IT>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04d      	beq.n	8006b54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ac6:	e045      	b.n	8006b54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f851 	bl	8006b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ace:	e041      	b.n	8006b54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d039      	beq.n	8006b4c <I2C_ITError+0x1bc>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b12      	cmp	r3, #18
 8006adc:	d002      	beq.n	8006ae4 <I2C_ITError+0x154>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b22      	cmp	r3, #34	@ 0x22
 8006ae2:	d133      	bne.n	8006b4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006af2:	d107      	bne.n	8006b04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe f835 	bl	8004b78 <HAL_DMA_GetState>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d017      	beq.n	8006b44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	4a14      	ldr	r2, [pc, #80]	@ (8006b6c <I2C_ITError+0x1dc>)
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fd ff0f 	bl	800494c <HAL_DMA_Abort_IT>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d011      	beq.n	8006b58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b42:	e009      	b.n	8006b58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f813 	bl	8006b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b4a:	e005      	b.n	8006b58 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f80f 	bl	8006b70 <I2C_TreatErrorCallback>
  }
}
 8006b52:	e002      	b.n	8006b5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b58:	bf00      	nop
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	ffff0000 	.word	0xffff0000
 8006b68:	0800593f 	.word	0x0800593f
 8006b6c:	08006ccb 	.word	0x08006ccb

08006b70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b60      	cmp	r3, #96	@ 0x60
 8006b82:	d10e      	bne.n	8006ba2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe fec5 	bl	800592a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ba0:	e009      	b.n	8006bb6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe feb0 	bl	8005916 <HAL_I2C_ErrorCallback>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d103      	bne.n	8006bdc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d007      	beq.n	8006bfa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	619a      	str	r2, [r3, #24]
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c22:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c2e:	2120      	movs	r1, #32
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fa5d 	bl	80070f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006c36:	e02d      	b.n	8006c94 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	2bff      	cmp	r3, #255	@ 0xff
 8006c4e:	d903      	bls.n	8006c58 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	22ff      	movs	r2, #255	@ 0xff
 8006c54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c56:	e004      	b.n	8006c62 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3324      	adds	r3, #36	@ 0x24
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006c78:	f7fd fd94 	bl	80047a4 <HAL_DMA_Start_IT>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c82:	2110      	movs	r1, #16
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff fe83 	bl	8006990 <I2C_ITError>
}
 8006c8a:	e003      	b.n	8006c94 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006c8c:	2140      	movs	r1, #64	@ 0x40
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fa2e 	bl	80070f0 <I2C_Enable_IRQ>
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006cba:	2110      	movs	r1, #16
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fe67 	bl	8006990 <I2C_ITError>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff ff39 	bl	8006b70 <I2C_TreatErrorCallback>
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d16:	e03b      	b.n	8006d90 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f8d5 	bl	8006ecc <I2C_IsErrorOccurred>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e041      	b.n	8006db0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d02d      	beq.n	8006d90 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d34:	f7fc fb3c 	bl	80033b0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <I2C_WaitOnFlagUntilTimeout+0x44>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d122      	bne.n	8006d90 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d113      	bne.n	8006d90 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e00f      	b.n	8006db0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d0b4      	beq.n	8006d18 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dc4:	e033      	b.n	8006e2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f87e 	bl	8006ecc <I2C_IsErrorOccurred>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e031      	b.n	8006e3e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d025      	beq.n	8006e2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de2:	f7fc fae5 	bl	80033b0 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11a      	bne.n	8006e2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d013      	beq.n	8006e2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f043 0220 	orr.w	r2, r3, #32
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e007      	b.n	8006e3e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d1c4      	bne.n	8006dc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e52:	e02f      	b.n	8006eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f837 	bl	8006ecc <I2C_IsErrorOccurred>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e02d      	b.n	8006ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e68:	f7fc faa2 	bl	80033b0 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d11a      	bne.n	8006eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d013      	beq.n	8006eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e007      	b.n	8006ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d1c8      	bne.n	8006e54 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	@ 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d068      	beq.n	8006fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2210      	movs	r2, #16
 8006efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f00:	e049      	b.n	8006f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d045      	beq.n	8006f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f0a:	f7fc fa51 	bl	80033b0 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <I2C_IsErrorOccurred+0x54>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d13a      	bne.n	8006f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f42:	d121      	bne.n	8006f88 <I2C_IsErrorOccurred+0xbc>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f4a:	d01d      	beq.n	8006f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f4c:	7cfb      	ldrb	r3, [r7, #19]
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d01a      	beq.n	8006f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f62:	f7fc fa25 	bl	80033b0 <HAL_GetTick>
 8006f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f68:	e00e      	b.n	8006f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f6a:	f7fc fa21 	bl	80033b0 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b19      	cmp	r3, #25
 8006f76:	d907      	bls.n	8006f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f043 0320 	orr.w	r3, r3, #32
 8006f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006f86:	e006      	b.n	8006f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d1e9      	bne.n	8006f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d003      	beq.n	8006fac <I2C_IsErrorOccurred+0xe0>
 8006fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0aa      	beq.n	8006f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	f043 0304 	orr.w	r3, r3, #4
 8006fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f043 0308 	orr.w	r3, r3, #8
 8007004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800700e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	f043 0302 	orr.w	r3, r3, #2
 8007026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01c      	beq.n	800707a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fdbc 	bl	8006bbe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <I2C_IsErrorOccurred+0x1bc>)
 8007052:	400b      	ands	r3, r1
 8007054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800707a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800707e:	4618      	mov	r0, r3
 8007080:	3728      	adds	r7, #40	@ 0x28
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	fe00e800 	.word	0xfe00e800

0800708c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	817b      	strh	r3, [r7, #10]
 800709a:	4613      	mov	r3, r2
 800709c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070a4:	7a7b      	ldrb	r3, [r7, #9]
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	0d5b      	lsrs	r3, r3, #21
 80070c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80070ca:	4b08      	ldr	r3, [pc, #32]	@ (80070ec <I2C_TransferConfig+0x60>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	43db      	mvns	r3, r3
 80070d0:	ea02 0103 	and.w	r1, r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	03ff63ff 	.word	0x03ff63ff

080070f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007104:	4a39      	ldr	r2, [pc, #228]	@ (80071ec <I2C_Enable_IRQ+0xfc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d032      	beq.n	8007170 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800710e:	4a38      	ldr	r2, [pc, #224]	@ (80071f0 <I2C_Enable_IRQ+0x100>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02d      	beq.n	8007170 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007118:	4a36      	ldr	r2, [pc, #216]	@ (80071f4 <I2C_Enable_IRQ+0x104>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d028      	beq.n	8007170 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800711e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	da03      	bge.n	800712e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800712c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800712e:	887b      	ldrh	r3, [r7, #2]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800713e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007140:	887b      	ldrh	r3, [r7, #2]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007150:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007152:	887b      	ldrh	r3, [r7, #2]
 8007154:	2b10      	cmp	r3, #16
 8007156:	d103      	bne.n	8007160 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800715e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007160:	887b      	ldrh	r3, [r7, #2]
 8007162:	2b20      	cmp	r3, #32
 8007164:	d133      	bne.n	80071ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f043 0320 	orr.w	r3, r3, #32
 800716c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800716e:	e02e      	b.n	80071ce <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007170:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da03      	bge.n	8007180 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800717e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007180:	887b      	ldrh	r3, [r7, #2]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007190:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80071a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d103      	bne.n	80071b2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80071b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80071b2:	887b      	ldrh	r3, [r7, #2]
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d103      	bne.n	80071c0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80071be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80071c0:	887b      	ldrh	r3, [r7, #2]
 80071c2:	2b40      	cmp	r3, #64	@ 0x40
 80071c4:	d103      	bne.n	80071ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	430a      	orrs	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	08005b31 	.word	0x08005b31
 80071f0:	08005f55 	.word	0x08005f55
 80071f4:	08005d09 	.word	0x08005d09

080071f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00f      	beq.n	8007232 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007218:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007226:	2b28      	cmp	r3, #40	@ 0x28
 8007228:	d003      	beq.n	8007232 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007230:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00f      	beq.n	800725c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007242:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007250:	2b28      	cmp	r3, #40	@ 0x28
 8007252:	d003      	beq.n	800725c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800725a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800725c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007260:	2b00      	cmp	r3, #0
 8007262:	da03      	bge.n	800726c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800726a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	2b10      	cmp	r3, #16
 8007270:	d103      	bne.n	800727a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007278:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800727a:	887b      	ldrh	r3, [r7, #2]
 800727c:	2b20      	cmp	r3, #32
 800727e:	d103      	bne.n	8007288 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f043 0320 	orr.w	r3, r3, #32
 8007286:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	2b40      	cmp	r3, #64	@ 0x40
 800728c:	d103      	bne.n	8007296 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007294:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6819      	ldr	r1, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	43da      	mvns	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	400a      	ands	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d138      	bne.n	800733c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e032      	b.n	800733e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	@ 0x24
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007306:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6819      	ldr	r1, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b20      	cmp	r3, #32
 800735e:	d139      	bne.n	80073d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800736a:	2302      	movs	r3, #2
 800736c:	e033      	b.n	80073d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2224      	movs	r2, #36	@ 0x24
 800737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800739c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d141      	bne.n	8007476 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fe:	d131      	bne.n	8007464 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007400:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007406:	4a46      	ldr	r2, [pc, #280]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800740c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007410:	4b43      	ldr	r3, [pc, #268]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007418:	4a41      	ldr	r2, [pc, #260]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800741a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800741e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007420:	4b40      	ldr	r3, [pc, #256]	@ (8007524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2232      	movs	r2, #50	@ 0x32
 8007426:	fb02 f303 	mul.w	r3, r2, r3
 800742a:	4a3f      	ldr	r2, [pc, #252]	@ (8007528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800742c:	fba2 2303 	umull	r2, r3, r2, r3
 8007430:	0c9b      	lsrs	r3, r3, #18
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007436:	e002      	b.n	800743e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3b01      	subs	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800743e:	4b38      	ldr	r3, [pc, #224]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d102      	bne.n	8007452 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f2      	bne.n	8007438 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007452:	4b33      	ldr	r3, [pc, #204]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745e:	d158      	bne.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e057      	b.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007464:	4b2e      	ldr	r3, [pc, #184]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800746a:	4a2d      	ldr	r2, [pc, #180]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800746c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007470:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007474:	e04d      	b.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747c:	d141      	bne.n	8007502 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800747e:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800748a:	d131      	bne.n	80074f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800748c:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800748e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007492:	4a23      	ldr	r2, [pc, #140]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007498:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800749c:	4b20      	ldr	r3, [pc, #128]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80074a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2232      	movs	r2, #50	@ 0x32
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	0c9b      	lsrs	r3, r3, #18
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074c2:	e002      	b.n	80074ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074ca:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d6:	d102      	bne.n	80074de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f2      	bne.n	80074c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074de:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ea:	d112      	bne.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e011      	b.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007500:	e007      	b.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007502:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800750a:	4a05      	ldr	r2, [pc, #20]	@ (8007520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800750c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007510:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40007000 	.word	0x40007000
 8007524:	20000004 	.word	0x20000004
 8007528:	431bde83 	.word	0x431bde83

0800752c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4a04      	ldr	r2, [pc, #16]	@ (8007548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800753a:	6093      	str	r3, [r2, #8]
}
 800753c:	bf00      	nop
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40007000 	.word	0x40007000

0800754c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e2fe      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d075      	beq.n	8007656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800756a:	4b97      	ldr	r3, [pc, #604]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 030c 	and.w	r3, r3, #12
 8007572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007574:	4b94      	ldr	r3, [pc, #592]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d102      	bne.n	800758a <HAL_RCC_OscConfig+0x3e>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b03      	cmp	r3, #3
 8007588:	d002      	beq.n	8007590 <HAL_RCC_OscConfig+0x44>
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d10b      	bne.n	80075a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007590:	4b8d      	ldr	r3, [pc, #564]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05b      	beq.n	8007654 <HAL_RCC_OscConfig+0x108>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d157      	bne.n	8007654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e2d9      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075b0:	d106      	bne.n	80075c0 <HAL_RCC_OscConfig+0x74>
 80075b2:	4b85      	ldr	r3, [pc, #532]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a84      	ldr	r2, [pc, #528]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e01d      	b.n	80075fc <HAL_RCC_OscConfig+0xb0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCC_OscConfig+0x98>
 80075ca:	4b7f      	ldr	r3, [pc, #508]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	4b7c      	ldr	r3, [pc, #496]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7b      	ldr	r2, [pc, #492]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e00b      	b.n	80075fc <HAL_RCC_OscConfig+0xb0>
 80075e4:	4b78      	ldr	r3, [pc, #480]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a77      	ldr	r2, [pc, #476]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b75      	ldr	r3, [pc, #468]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a74      	ldr	r2, [pc, #464]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80075f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d013      	beq.n	800762c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fb fed4 	bl	80033b0 <HAL_GetTick>
 8007608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800760c:	f7fb fed0 	bl	80033b0 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b64      	cmp	r3, #100	@ 0x64
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e29e      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800761e:	4b6a      	ldr	r3, [pc, #424]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f0      	beq.n	800760c <HAL_RCC_OscConfig+0xc0>
 800762a:	e014      	b.n	8007656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762c:	f7fb fec0 	bl	80033b0 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007634:	f7fb febc 	bl	80033b0 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b64      	cmp	r3, #100	@ 0x64
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e28a      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007646:	4b60      	ldr	r3, [pc, #384]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f0      	bne.n	8007634 <HAL_RCC_OscConfig+0xe8>
 8007652:	e000      	b.n	8007656 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d075      	beq.n	800774e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007662:	4b59      	ldr	r3, [pc, #356]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800766c:	4b56      	ldr	r3, [pc, #344]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d102      	bne.n	8007682 <HAL_RCC_OscConfig+0x136>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d002      	beq.n	8007688 <HAL_RCC_OscConfig+0x13c>
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d11f      	bne.n	80076c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007688:	4b4f      	ldr	r3, [pc, #316]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <HAL_RCC_OscConfig+0x154>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e25d      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a0:	4b49      	ldr	r3, [pc, #292]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	061b      	lsls	r3, r3, #24
 80076ae:	4946      	ldr	r1, [pc, #280]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076b4:	4b45      	ldr	r3, [pc, #276]	@ (80077cc <HAL_RCC_OscConfig+0x280>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fb fe2d 	bl	8003318 <HAL_InitTick>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d043      	beq.n	800774c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e249      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d023      	beq.n	8007718 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d0:	4b3d      	ldr	r3, [pc, #244]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3c      	ldr	r2, [pc, #240]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80076d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fb fe68 	bl	80033b0 <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076e4:	f7fb fe64 	bl	80033b0 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e232      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076f6:	4b34      	ldr	r3, [pc, #208]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f0      	beq.n	80076e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	061b      	lsls	r3, r3, #24
 8007710:	492d      	ldr	r1, [pc, #180]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	604b      	str	r3, [r1, #4]
 8007716:	e01a      	b.n	800774e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007718:	4b2b      	ldr	r3, [pc, #172]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2a      	ldr	r2, [pc, #168]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800771e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fb fe44 	bl	80033b0 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800772c:	f7fb fe40 	bl	80033b0 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e20e      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800773e:	4b22      	ldr	r3, [pc, #136]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x1e0>
 800774a:	e000      	b.n	800774e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800774c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d041      	beq.n	80077de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01c      	beq.n	800779c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007762:	4b19      	ldr	r3, [pc, #100]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 8007764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007768:	4a17      	ldr	r2, [pc, #92]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007772:	f7fb fe1d 	bl	80033b0 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777a:	f7fb fe19 	bl	80033b0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e1e7      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800778c:	4b0e      	ldr	r3, [pc, #56]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800778e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0ef      	beq.n	800777a <HAL_RCC_OscConfig+0x22e>
 800779a:	e020      	b.n	80077de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800779c:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 800779e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077a2:	4a09      	ldr	r2, [pc, #36]	@ (80077c8 <HAL_RCC_OscConfig+0x27c>)
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fb fe00 	bl	80033b0 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077b2:	e00d      	b.n	80077d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b4:	f7fb fdfc 	bl	80033b0 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d906      	bls.n	80077d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e1ca      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
 80077c6:	bf00      	nop
 80077c8:	40021000 	.word	0x40021000
 80077cc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80077d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1ea      	bne.n	80077b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 80a6 	beq.w	8007938 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ec:	2300      	movs	r3, #0
 80077ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077f0:	4b84      	ldr	r3, [pc, #528]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80077f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_RCC_OscConfig+0x2b4>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x2b6>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00d      	beq.n	8007822 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	4b7f      	ldr	r3, [pc, #508]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007810:	6593      	str	r3, [r2, #88]	@ 0x58
 8007812:	4b7c      	ldr	r3, [pc, #496]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800781e:	2301      	movs	r3, #1
 8007820:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007822:	4b79      	ldr	r3, [pc, #484]	@ (8007a08 <HAL_RCC_OscConfig+0x4bc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782a:	2b00      	cmp	r3, #0
 800782c:	d118      	bne.n	8007860 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800782e:	4b76      	ldr	r3, [pc, #472]	@ (8007a08 <HAL_RCC_OscConfig+0x4bc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a75      	ldr	r2, [pc, #468]	@ (8007a08 <HAL_RCC_OscConfig+0x4bc>)
 8007834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800783a:	f7fb fdb9 	bl	80033b0 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007842:	f7fb fdb5 	bl	80033b0 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e183      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007854:	4b6c      	ldr	r3, [pc, #432]	@ (8007a08 <HAL_RCC_OscConfig+0x4bc>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d108      	bne.n	800787a <HAL_RCC_OscConfig+0x32e>
 8007868:	4b66      	ldr	r3, [pc, #408]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786e:	4a65      	ldr	r2, [pc, #404]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007878:	e024      	b.n	80078c4 <HAL_RCC_OscConfig+0x378>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b05      	cmp	r3, #5
 8007880:	d110      	bne.n	80078a4 <HAL_RCC_OscConfig+0x358>
 8007882:	4b60      	ldr	r3, [pc, #384]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007888:	4a5e      	ldr	r2, [pc, #376]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800788a:	f043 0304 	orr.w	r3, r3, #4
 800788e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007892:	4b5c      	ldr	r3, [pc, #368]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007898:	4a5a      	ldr	r2, [pc, #360]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078a2:	e00f      	b.n	80078c4 <HAL_RCC_OscConfig+0x378>
 80078a4:	4b57      	ldr	r3, [pc, #348]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078aa:	4a56      	ldr	r2, [pc, #344]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078b4:	4b53      	ldr	r3, [pc, #332]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ba:	4a52      	ldr	r2, [pc, #328]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80078bc:	f023 0304 	bic.w	r3, r3, #4
 80078c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d016      	beq.n	80078fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078cc:	f7fb fd70 	bl	80033b0 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d4:	f7fb fd6c 	bl	80033b0 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e138      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ea:	4b46      	ldr	r3, [pc, #280]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80078ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0ed      	beq.n	80078d4 <HAL_RCC_OscConfig+0x388>
 80078f8:	e015      	b.n	8007926 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fa:	f7fb fd59 	bl	80033b0 <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007900:	e00a      	b.n	8007918 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007902:	f7fb fd55 	bl	80033b0 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e121      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007918:	4b3a      	ldr	r3, [pc, #232]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800791a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1ed      	bne.n	8007902 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007926:	7ffb      	ldrb	r3, [r7, #31]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d105      	bne.n	8007938 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800792c:	4b35      	ldr	r3, [pc, #212]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800792e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007930:	4a34      	ldr	r2, [pc, #208]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007936:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d03c      	beq.n	80079be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01c      	beq.n	8007986 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800794c:	4b2d      	ldr	r3, [pc, #180]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800794e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007952:	4a2c      	ldr	r2, [pc, #176]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fb fd28 	bl	80033b0 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007964:	f7fb fd24 	bl	80033b0 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e0f2      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007976:	4b23      	ldr	r3, [pc, #140]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0ef      	beq.n	8007964 <HAL_RCC_OscConfig+0x418>
 8007984:	e01b      	b.n	80079be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007986:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 8007988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800798c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007996:	f7fb fd0b 	bl	80033b0 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800799e:	f7fb fd07 	bl	80033b0 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e0d5      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079b0:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80079b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1ef      	bne.n	800799e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80c9 	beq.w	8007b5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 030c 	and.w	r3, r3, #12
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	f000 8083 	beq.w	8007adc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d15e      	bne.n	8007a9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079de:	4b09      	ldr	r3, [pc, #36]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a08      	ldr	r2, [pc, #32]	@ (8007a04 <HAL_RCC_OscConfig+0x4b8>)
 80079e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ea:	f7fb fce1 	bl	80033b0 <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079f0:	e00c      	b.n	8007a0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f2:	f7fb fcdd 	bl	80033b0 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d905      	bls.n	8007a0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e0ab      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
 8007a04:	40021000 	.word	0x40021000
 8007a08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a0c:	4b55      	ldr	r3, [pc, #340]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ec      	bne.n	80079f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a18:	4b52      	ldr	r3, [pc, #328]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	4b52      	ldr	r3, [pc, #328]	@ (8007b68 <HAL_RCC_OscConfig+0x61c>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6a11      	ldr	r1, [r2, #32]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	0112      	lsls	r2, r2, #4
 8007a2c:	4311      	orrs	r1, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007a32:	0212      	lsls	r2, r2, #8
 8007a34:	4311      	orrs	r1, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a3a:	0852      	lsrs	r2, r2, #1
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	0552      	lsls	r2, r2, #21
 8007a40:	4311      	orrs	r1, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a46:	0852      	lsrs	r2, r2, #1
 8007a48:	3a01      	subs	r2, #1
 8007a4a:	0652      	lsls	r2, r2, #25
 8007a4c:	4311      	orrs	r1, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a52:	06d2      	lsls	r2, r2, #27
 8007a54:	430a      	orrs	r2, r1
 8007a56:	4943      	ldr	r1, [pc, #268]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a5c:	4b41      	ldr	r3, [pc, #260]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a40      	ldr	r2, [pc, #256]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a68:	4b3e      	ldr	r3, [pc, #248]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a74:	f7fb fc9c 	bl	80033b0 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a7c:	f7fb fc98 	bl	80033b0 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e066      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8e:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0f0      	beq.n	8007a7c <HAL_RCC_OscConfig+0x530>
 8007a9a:	e05e      	b.n	8007b5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9c:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a30      	ldr	r2, [pc, #192]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fb fc82 	bl	80033b0 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab0:	f7fb fc7e 	bl	80033b0 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e04c      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac2:	4b28      	ldr	r3, [pc, #160]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ace:	4b25      	ldr	r3, [pc, #148]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	4924      	ldr	r1, [pc, #144]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007ad4:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <HAL_RCC_OscConfig+0x620>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60cb      	str	r3, [r1, #12]
 8007ada:	e03e      	b.n	8007b5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e039      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b64 <HAL_RCC_OscConfig+0x618>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f003 0203 	and.w	r2, r3, #3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d12c      	bne.n	8007b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b06:	3b01      	subs	r3, #1
 8007b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d123      	bne.n	8007b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d11b      	bne.n	8007b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d113      	bne.n	8007b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d001      	beq.n	8007b5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3720      	adds	r7, #32
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40021000 	.word	0x40021000
 8007b68:	019f800c 	.word	0x019f800c
 8007b6c:	feeefffc 	.word	0xfeeefffc

08007b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e11e      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b88:	4b91      	ldr	r3, [pc, #580]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d910      	bls.n	8007bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b96:	4b8e      	ldr	r3, [pc, #568]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f023 020f 	bic.w	r2, r3, #15
 8007b9e:	498c      	ldr	r1, [pc, #560]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e106      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d073      	beq.n	8007cac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d129      	bne.n	8007c20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bcc:	4b81      	ldr	r3, [pc, #516]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0f4      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007bdc:	f000 f99e 	bl	8007f1c <RCC_GetSysClockFreqFromPLLSource>
 8007be0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4a7c      	ldr	r2, [pc, #496]	@ (8007dd8 <HAL_RCC_ClockConfig+0x268>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d93f      	bls.n	8007c6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bea:	4b7a      	ldr	r3, [pc, #488]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d033      	beq.n	8007c6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d12f      	bne.n	8007c6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c0a:	4b72      	ldr	r3, [pc, #456]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c12:	4a70      	ldr	r2, [pc, #448]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c1a:	2380      	movs	r3, #128	@ 0x80
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	e024      	b.n	8007c6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d107      	bne.n	8007c38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c28:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0c6      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c38:	4b66      	ldr	r3, [pc, #408]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0be      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c48:	f000 f8ce 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4a61      	ldr	r2, [pc, #388]	@ (8007dd8 <HAL_RCC_ClockConfig+0x268>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d909      	bls.n	8007c6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c56:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c66:	2380      	movs	r3, #128	@ 0x80
 8007c68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 0203 	bic.w	r2, r3, #3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	4957      	ldr	r1, [pc, #348]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c7c:	f7fb fb98 	bl	80033b0 <HAL_GetTick>
 8007c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c82:	e00a      	b.n	8007c9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c84:	f7fb fb94 	bl	80033b0 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e095      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 020c 	and.w	r2, r3, #12
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d1eb      	bne.n	8007c84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d023      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cc4:	4b43      	ldr	r3, [pc, #268]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4a42      	ldr	r2, [pc, #264]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007cce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007ce6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007cea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cec:	4b39      	ldr	r3, [pc, #228]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	4936      	ldr	r1, [pc, #216]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	608b      	str	r3, [r1, #8]
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b80      	cmp	r3, #128	@ 0x80
 8007d04:	d105      	bne.n	8007d12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d06:	4b33      	ldr	r3, [pc, #204]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4a32      	ldr	r2, [pc, #200]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d12:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d21d      	bcs.n	8007d5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f023 020f 	bic.w	r2, r3, #15
 8007d28:	4929      	ldr	r1, [pc, #164]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d30:	f7fb fb3e 	bl	80033b0 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d36:	e00a      	b.n	8007d4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d38:	f7fb fb3a 	bl	80033b0 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e03b      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	@ (8007dd0 <HAL_RCC_ClockConfig+0x260>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d1ed      	bne.n	8007d38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4917      	ldr	r1, [pc, #92]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	490f      	ldr	r1, [pc, #60]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d9a:	f000 f825 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd4 <HAL_RCC_ClockConfig+0x264>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	490c      	ldr	r1, [pc, #48]	@ (8007ddc <HAL_RCC_ClockConfig+0x26c>)
 8007dac:	5ccb      	ldrb	r3, [r1, r3]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a0a      	ldr	r2, [pc, #40]	@ (8007de0 <HAL_RCC_ClockConfig+0x270>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007dba:	4b0a      	ldr	r3, [pc, #40]	@ (8007de4 <HAL_RCC_ClockConfig+0x274>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fb faaa 	bl	8003318 <HAL_InitTick>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40022000 	.word	0x40022000
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	04c4b400 	.word	0x04c4b400
 8007ddc:	08011af0 	.word	0x08011af0
 8007de0:	20000004 	.word	0x20000004
 8007de4:	20000008 	.word	0x20000008

08007de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dee:	4b2c      	ldr	r3, [pc, #176]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d102      	bne.n	8007e00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	e047      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007e00:	4b27      	ldr	r3, [pc, #156]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f003 030c 	and.w	r3, r3, #12
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e03e      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007e12:	4b23      	ldr	r3, [pc, #140]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b0c      	cmp	r3, #12
 8007e1c:	d136      	bne.n	8007e8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	3301      	adds	r3, #1
 8007e34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d10c      	bne.n	8007e56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	4a16      	ldr	r2, [pc, #88]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e46:	68d2      	ldr	r2, [r2, #12]
 8007e48:	0a12      	lsrs	r2, r2, #8
 8007e4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	617b      	str	r3, [r7, #20]
      break;
 8007e54:	e00c      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e56:	4a13      	ldr	r2, [pc, #76]	@ (8007ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e60:	68d2      	ldr	r2, [r2, #12]
 8007e62:	0a12      	lsrs	r2, r2, #8
 8007e64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e68:	fb02 f303 	mul.w	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]
      break;
 8007e6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	0e5b      	lsrs	r3, r3, #25
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	e001      	b.n	8007e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e90:	693b      	ldr	r3, [r7, #16]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40021000 	.word	0x40021000
 8007ea4:	00f42400 	.word	0x00f42400
 8007ea8:	007a1200 	.word	0x007a1200

08007eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	@ (8007ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000004 	.word	0x20000004

08007ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ec8:	f7ff fff0 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	0a1b      	lsrs	r3, r3, #8
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	4904      	ldr	r1, [pc, #16]	@ (8007eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eda:	5ccb      	ldrb	r3, [r1, r3]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	08011b00 	.word	0x08011b00

08007ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ef4:	f7ff ffda 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	0adb      	lsrs	r3, r3, #11
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f06:	5ccb      	ldrb	r3, [r1, r3]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40021000 	.word	0x40021000
 8007f18:	08011b00 	.word	0x08011b00

08007f1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f22:	4b1e      	ldr	r3, [pc, #120]	@ (8007f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d10c      	bne.n	8007f5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f40:	4a17      	ldr	r2, [pc, #92]	@ (8007fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	4a14      	ldr	r2, [pc, #80]	@ (8007f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f4a:	68d2      	ldr	r2, [r2, #12]
 8007f4c:	0a12      	lsrs	r2, r2, #8
 8007f4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	617b      	str	r3, [r7, #20]
    break;
 8007f58:	e00c      	b.n	8007f74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f5a:	4a12      	ldr	r2, [pc, #72]	@ (8007fa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	4a0e      	ldr	r2, [pc, #56]	@ (8007f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f64:	68d2      	ldr	r2, [r2, #12]
 8007f66:	0a12      	lsrs	r2, r2, #8
 8007f68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f6c:	fb02 f303 	mul.w	r3, r2, r3
 8007f70:	617b      	str	r3, [r7, #20]
    break;
 8007f72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f74:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	0e5b      	lsrs	r3, r3, #25
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	3301      	adds	r3, #1
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f8e:	687b      	ldr	r3, [r7, #4]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	007a1200 	.word	0x007a1200
 8007fa4:	00f42400 	.word	0x00f42400

08007fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8098 	beq.w	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fca:	4b43      	ldr	r3, [pc, #268]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10d      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fd6:	4b40      	ldr	r3, [pc, #256]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fda:	4a3f      	ldr	r2, [pc, #252]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a39      	ldr	r2, [pc, #228]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ffc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ffe:	f7fb f9d7 	bl	80033b0 <HAL_GetTick>
 8008002:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008004:	e009      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008006:	f7fb f9d3 	bl	80033b0 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d902      	bls.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	74fb      	strb	r3, [r7, #19]
        break;
 8008018:	e005      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800801a:	4b30      	ldr	r3, [pc, #192]	@ (80080dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0ef      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008026:	7cfb      	ldrb	r3, [r7, #19]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d159      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800802c:	4b2a      	ldr	r3, [pc, #168]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008036:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01e      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	429a      	cmp	r2, r3
 8008046:	d019      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008048:	4b23      	ldr	r3, [pc, #140]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008054:	4b20      	ldr	r3, [pc, #128]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805a:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800805c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008064:	4b1c      	ldr	r3, [pc, #112]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800806c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008074:	4a18      	ldr	r2, [pc, #96]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008086:	f7fb f993 	bl	80033b0 <HAL_GetTick>
 800808a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800808c:	e00b      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808e:	f7fb f98f 	bl	80033b0 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800809c:	4293      	cmp	r3, r2
 800809e:	d902      	bls.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	74fb      	strb	r3, [r7, #19]
            break;
 80080a4:	e006      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080a6:	4b0c      	ldr	r3, [pc, #48]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0ec      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80080b4:	7cfb      	ldrb	r3, [r7, #19]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ba:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	4903      	ldr	r1, [pc, #12]	@ (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80080d0:	e008      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080d2:	7cfb      	ldrb	r3, [r7, #19]
 80080d4:	74bb      	strb	r3, [r7, #18]
 80080d6:	e005      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80080d8:	40021000 	.word	0x40021000
 80080dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e0:	7cfb      	ldrb	r3, [r7, #19]
 80080e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080e4:	7c7b      	ldrb	r3, [r7, #17]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d105      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ea:	4ba6      	ldr	r3, [pc, #664]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ee:	4aa5      	ldr	r2, [pc, #660]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008102:	4ba0      	ldr	r3, [pc, #640]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008108:	f023 0203 	bic.w	r2, r3, #3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	499c      	ldr	r1, [pc, #624]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008112:	4313      	orrs	r3, r2
 8008114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008124:	4b97      	ldr	r3, [pc, #604]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812a:	f023 020c 	bic.w	r2, r3, #12
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	4994      	ldr	r1, [pc, #592]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008134:	4313      	orrs	r3, r2
 8008136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008146:	4b8f      	ldr	r3, [pc, #572]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800814c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	498b      	ldr	r1, [pc, #556]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008168:	4b86      	ldr	r3, [pc, #536]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800816e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	4983      	ldr	r1, [pc, #524]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800818a:	4b7e      	ldr	r3, [pc, #504]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008190:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	497a      	ldr	r1, [pc, #488]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081ac:	4b75      	ldr	r3, [pc, #468]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	4972      	ldr	r1, [pc, #456]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081ce:	4b6d      	ldr	r3, [pc, #436]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	4969      	ldr	r1, [pc, #420]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081f0:	4b64      	ldr	r3, [pc, #400]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	4961      	ldr	r1, [pc, #388]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008200:	4313      	orrs	r3, r2
 8008202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008212:	4b5c      	ldr	r3, [pc, #368]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008218:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	4958      	ldr	r1, [pc, #352]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008222:	4313      	orrs	r3, r2
 8008224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008230:	2b00      	cmp	r3, #0
 8008232:	d015      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008234:	4b53      	ldr	r3, [pc, #332]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	4950      	ldr	r1, [pc, #320]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008252:	d105      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008254:	4b4b      	ldr	r3, [pc, #300]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	4a4a      	ldr	r2, [pc, #296]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800825a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800825e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008268:	2b00      	cmp	r3, #0
 800826a:	d015      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800826c:	4b45      	ldr	r3, [pc, #276]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800826e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008272:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	4942      	ldr	r1, [pc, #264]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800828a:	d105      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800828c:	4b3d      	ldr	r3, [pc, #244]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	4a3c      	ldr	r2, [pc, #240]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008296:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d015      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082a4:	4b37      	ldr	r3, [pc, #220]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	4934      	ldr	r1, [pc, #208]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082c2:	d105      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d015      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082dc:	4b29      	ldr	r3, [pc, #164]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	4926      	ldr	r1, [pc, #152]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082fa:	d105      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082fc:	4b21      	ldr	r3, [pc, #132]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	4a20      	ldr	r2, [pc, #128]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008306:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d015      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008314:	4b1b      	ldr	r3, [pc, #108]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	4918      	ldr	r1, [pc, #96]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008324:	4313      	orrs	r3, r2
 8008326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008332:	d105      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008334:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	4a12      	ldr	r2, [pc, #72]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800833a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800833e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d015      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008352:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835a:	490a      	ldr	r1, [pc, #40]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836a:	d105      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a04      	ldr	r2, [pc, #16]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008376:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008378:	7cbb      	ldrb	r3, [r7, #18]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40021000 	.word	0x40021000

08008388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e049      	b.n	800842e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fa fc90 	bl	8002cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f001 f83a 	bl	8009440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	d001      	beq.n	8008450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e04a      	b.n	80084e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a21      	ldr	r2, [pc, #132]	@ (80084f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d018      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847a:	d013      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x6c>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1d      	ldr	r2, [pc, #116]	@ (80084f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00e      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1c      	ldr	r2, [pc, #112]	@ (80084fc <HAL_TIM_Base_Start_IT+0xc4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d009      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1a      	ldr	r2, [pc, #104]	@ (8008500 <HAL_TIM_Base_Start_IT+0xc8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x6c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a19      	ldr	r2, [pc, #100]	@ (8008504 <HAL_TIM_Base_Start_IT+0xcc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d115      	bne.n	80084d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	4b17      	ldr	r3, [pc, #92]	@ (8008508 <HAL_TIM_Base_Start_IT+0xd0>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b06      	cmp	r3, #6
 80084b4:	d015      	beq.n	80084e2 <HAL_TIM_Base_Start_IT+0xaa>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084bc:	d011      	beq.n	80084e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0201 	orr.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ce:	e008      	b.n	80084e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0201 	orr.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e000      	b.n	80084e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40012c00 	.word	0x40012c00
 80084f8:	40000400 	.word	0x40000400
 80084fc:	40000800 	.word	0x40000800
 8008500:	40013400 	.word	0x40013400
 8008504:	40014000 	.word	0x40014000
 8008508:	00010007 	.word	0x00010007

0800850c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e049      	b.n	80085b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fa fbae 	bl	8002c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f000 ff78 	bl	8009440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <HAL_TIM_PWM_Start+0x24>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	bf14      	ite	ne
 80085d8:	2301      	movne	r3, #1
 80085da:	2300      	moveq	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	e03c      	b.n	800865a <HAL_TIM_PWM_Start+0x9e>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d109      	bne.n	80085fa <HAL_TIM_PWM_Start+0x3e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	bf14      	ite	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	2300      	moveq	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	e02f      	b.n	800865a <HAL_TIM_PWM_Start+0x9e>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d109      	bne.n	8008614 <HAL_TIM_PWM_Start+0x58>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	bf14      	ite	ne
 800860c:	2301      	movne	r3, #1
 800860e:	2300      	moveq	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	e022      	b.n	800865a <HAL_TIM_PWM_Start+0x9e>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b0c      	cmp	r3, #12
 8008618:	d109      	bne.n	800862e <HAL_TIM_PWM_Start+0x72>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b01      	cmp	r3, #1
 8008624:	bf14      	ite	ne
 8008626:	2301      	movne	r3, #1
 8008628:	2300      	moveq	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	e015      	b.n	800865a <HAL_TIM_PWM_Start+0x9e>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b10      	cmp	r3, #16
 8008632:	d109      	bne.n	8008648 <HAL_TIM_PWM_Start+0x8c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	e008      	b.n	800865a <HAL_TIM_PWM_Start+0x9e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e097      	b.n	8008792 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d104      	bne.n	8008672 <HAL_TIM_PWM_Start+0xb6>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008670:	e023      	b.n	80086ba <HAL_TIM_PWM_Start+0xfe>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d104      	bne.n	8008682 <HAL_TIM_PWM_Start+0xc6>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008680:	e01b      	b.n	80086ba <HAL_TIM_PWM_Start+0xfe>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b08      	cmp	r3, #8
 8008686:	d104      	bne.n	8008692 <HAL_TIM_PWM_Start+0xd6>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008690:	e013      	b.n	80086ba <HAL_TIM_PWM_Start+0xfe>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b0c      	cmp	r3, #12
 8008696:	d104      	bne.n	80086a2 <HAL_TIM_PWM_Start+0xe6>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086a0:	e00b      	b.n	80086ba <HAL_TIM_PWM_Start+0xfe>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d104      	bne.n	80086b2 <HAL_TIM_PWM_Start+0xf6>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086b0:	e003      	b.n	80086ba <HAL_TIM_PWM_Start+0xfe>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2201      	movs	r2, #1
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fccc 	bl	800a060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a33      	ldr	r2, [pc, #204]	@ (800879c <HAL_TIM_PWM_Start+0x1e0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <HAL_TIM_PWM_Start+0x13e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a32      	ldr	r2, [pc, #200]	@ (80087a0 <HAL_TIM_PWM_Start+0x1e4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00e      	beq.n	80086fa <HAL_TIM_PWM_Start+0x13e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a30      	ldr	r2, [pc, #192]	@ (80087a4 <HAL_TIM_PWM_Start+0x1e8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d009      	beq.n	80086fa <HAL_TIM_PWM_Start+0x13e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2f      	ldr	r2, [pc, #188]	@ (80087a8 <HAL_TIM_PWM_Start+0x1ec>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d004      	beq.n	80086fa <HAL_TIM_PWM_Start+0x13e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	@ (80087ac <HAL_TIM_PWM_Start+0x1f0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_PWM_Start+0x142>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <HAL_TIM_PWM_Start+0x144>
 80086fe:	2300      	movs	r3, #0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008712:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a20      	ldr	r2, [pc, #128]	@ (800879c <HAL_TIM_PWM_Start+0x1e0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d018      	beq.n	8008750 <HAL_TIM_PWM_Start+0x194>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008726:	d013      	beq.n	8008750 <HAL_TIM_PWM_Start+0x194>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a20      	ldr	r2, [pc, #128]	@ (80087b0 <HAL_TIM_PWM_Start+0x1f4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00e      	beq.n	8008750 <HAL_TIM_PWM_Start+0x194>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1f      	ldr	r2, [pc, #124]	@ (80087b4 <HAL_TIM_PWM_Start+0x1f8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d009      	beq.n	8008750 <HAL_TIM_PWM_Start+0x194>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a17      	ldr	r2, [pc, #92]	@ (80087a0 <HAL_TIM_PWM_Start+0x1e4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d004      	beq.n	8008750 <HAL_TIM_PWM_Start+0x194>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a16      	ldr	r2, [pc, #88]	@ (80087a4 <HAL_TIM_PWM_Start+0x1e8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d115      	bne.n	800877c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	4b18      	ldr	r3, [pc, #96]	@ (80087b8 <HAL_TIM_PWM_Start+0x1fc>)
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b06      	cmp	r3, #6
 8008760:	d015      	beq.n	800878e <HAL_TIM_PWM_Start+0x1d2>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008768:	d011      	beq.n	800878e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0201 	orr.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877a:	e008      	b.n	800878e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e000      	b.n	8008790 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40013400 	.word	0x40013400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	00010007 	.word	0x00010007

080087bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e049      	b.n	8008862 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f841 	bl	800886a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f000 fe20 	bl	8009440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <HAL_TIM_IC_Start_IT+0x1e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800889a:	b2db      	uxtb	r3, r3
 800889c:	e023      	b.n	80088e6 <HAL_TIM_IC_Start_IT+0x66>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_IC_Start_IT+0x2e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	e01b      	b.n	80088e6 <HAL_TIM_IC_Start_IT+0x66>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d104      	bne.n	80088be <HAL_TIM_IC_Start_IT+0x3e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e013      	b.n	80088e6 <HAL_TIM_IC_Start_IT+0x66>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	d104      	bne.n	80088ce <HAL_TIM_IC_Start_IT+0x4e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	e00b      	b.n	80088e6 <HAL_TIM_IC_Start_IT+0x66>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d104      	bne.n	80088de <HAL_TIM_IC_Start_IT+0x5e>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e003      	b.n	80088e6 <HAL_TIM_IC_Start_IT+0x66>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <HAL_TIM_IC_Start_IT+0x78>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	e013      	b.n	8008920 <HAL_TIM_IC_Start_IT+0xa0>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d104      	bne.n	8008908 <HAL_TIM_IC_Start_IT+0x88>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e00b      	b.n	8008920 <HAL_TIM_IC_Start_IT+0xa0>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b08      	cmp	r3, #8
 800890c:	d104      	bne.n	8008918 <HAL_TIM_IC_Start_IT+0x98>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008914:	b2db      	uxtb	r3, r3
 8008916:	e003      	b.n	8008920 <HAL_TIM_IC_Start_IT+0xa0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800891e:	b2db      	uxtb	r3, r3
 8008920:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d102      	bne.n	800892e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008928:	7b7b      	ldrb	r3, [r7, #13]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d001      	beq.n	8008932 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e0d8      	b.n	8008ae4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <HAL_TIM_IC_Start_IT+0xc2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008940:	e023      	b.n	800898a <HAL_TIM_IC_Start_IT+0x10a>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b04      	cmp	r3, #4
 8008946:	d104      	bne.n	8008952 <HAL_TIM_IC_Start_IT+0xd2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008950:	e01b      	b.n	800898a <HAL_TIM_IC_Start_IT+0x10a>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d104      	bne.n	8008962 <HAL_TIM_IC_Start_IT+0xe2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008960:	e013      	b.n	800898a <HAL_TIM_IC_Start_IT+0x10a>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b0c      	cmp	r3, #12
 8008966:	d104      	bne.n	8008972 <HAL_TIM_IC_Start_IT+0xf2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008970:	e00b      	b.n	800898a <HAL_TIM_IC_Start_IT+0x10a>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b10      	cmp	r3, #16
 8008976:	d104      	bne.n	8008982 <HAL_TIM_IC_Start_IT+0x102>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008980:	e003      	b.n	800898a <HAL_TIM_IC_Start_IT+0x10a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <HAL_TIM_IC_Start_IT+0x11a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008998:	e013      	b.n	80089c2 <HAL_TIM_IC_Start_IT+0x142>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d104      	bne.n	80089aa <HAL_TIM_IC_Start_IT+0x12a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089a8:	e00b      	b.n	80089c2 <HAL_TIM_IC_Start_IT+0x142>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_IC_Start_IT+0x13a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089b8:	e003      	b.n	80089c2 <HAL_TIM_IC_Start_IT+0x142>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2202      	movs	r2, #2
 80089be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b0c      	cmp	r3, #12
 80089c6:	d841      	bhi.n	8008a4c <HAL_TIM_IC_Start_IT+0x1cc>
 80089c8:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <HAL_TIM_IC_Start_IT+0x150>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008a05 	.word	0x08008a05
 80089d4:	08008a4d 	.word	0x08008a4d
 80089d8:	08008a4d 	.word	0x08008a4d
 80089dc:	08008a4d 	.word	0x08008a4d
 80089e0:	08008a17 	.word	0x08008a17
 80089e4:	08008a4d 	.word	0x08008a4d
 80089e8:	08008a4d 	.word	0x08008a4d
 80089ec:	08008a4d 	.word	0x08008a4d
 80089f0:	08008a29 	.word	0x08008a29
 80089f4:	08008a4d 	.word	0x08008a4d
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008a4d 	.word	0x08008a4d
 8008a00:	08008a3b 	.word	0x08008a3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0202 	orr.w	r2, r2, #2
 8008a12:	60da      	str	r2, [r3, #12]
      break;
 8008a14:	e01d      	b.n	8008a52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0204 	orr.w	r2, r2, #4
 8008a24:	60da      	str	r2, [r3, #12]
      break;
 8008a26:	e014      	b.n	8008a52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0208 	orr.w	r2, r2, #8
 8008a36:	60da      	str	r2, [r3, #12]
      break;
 8008a38:	e00b      	b.n	8008a52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0210 	orr.w	r2, r2, #16
 8008a48:	60da      	str	r2, [r3, #12]
      break;
 8008a4a:	e002      	b.n	8008a52 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a50:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d144      	bne.n	8008ae2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fafd 	bl	800a060 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a20      	ldr	r2, [pc, #128]	@ (8008aec <HAL_TIM_IC_Start_IT+0x26c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <HAL_TIM_IC_Start_IT+0x222>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a78:	d013      	beq.n	8008aa2 <HAL_TIM_IC_Start_IT+0x222>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8008af0 <HAL_TIM_IC_Start_IT+0x270>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00e      	beq.n	8008aa2 <HAL_TIM_IC_Start_IT+0x222>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1a      	ldr	r2, [pc, #104]	@ (8008af4 <HAL_TIM_IC_Start_IT+0x274>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <HAL_TIM_IC_Start_IT+0x222>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a19      	ldr	r2, [pc, #100]	@ (8008af8 <HAL_TIM_IC_Start_IT+0x278>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <HAL_TIM_IC_Start_IT+0x222>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	@ (8008afc <HAL_TIM_IC_Start_IT+0x27c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d115      	bne.n	8008ace <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	4b15      	ldr	r3, [pc, #84]	@ (8008b00 <HAL_TIM_IC_Start_IT+0x280>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	d015      	beq.n	8008ae0 <HAL_TIM_IC_Start_IT+0x260>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aba:	d011      	beq.n	8008ae0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008acc:	e008      	b.n	8008ae0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0201 	orr.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	e000      	b.n	8008ae2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40000400 	.word	0x40000400
 8008af4:	40000800 	.word	0x40000800
 8008af8:	40013400 	.word	0x40013400
 8008afc:	40014000 	.word	0x40014000
 8008b00:	00010007 	.word	0x00010007

08008b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d020      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01b      	beq.n	8008b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0202 	mvn.w	r2, #2
 8008b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 f9ae 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fc54 	bl	8009404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc5b 	bl	8009418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d020      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01b      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0204 	mvn.w	r2, #4
 8008b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f9 f988 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8008ba0:	e005      	b.n	8008bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fc2e 	bl	8009404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc35 	bl	8009418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d020      	beq.n	8008c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01b      	beq.n	8008c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0208 	mvn.w	r2, #8
 8008bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7f9 f962 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc08 	bl	8009404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fc0f 	bl	8009418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01b      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0210 	mvn.w	r2, #16
 8008c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2208      	movs	r2, #8
 8008c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7f9 f93c 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fbe2 	bl	8009404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fbe9 	bl	8009418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0201 	mvn.w	r2, #1
 8008c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 f8fe 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d104      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00c      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fbd3 	bl	800a444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00c      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fbcb 	bl	800a458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00c      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fba3 	bl	800942c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00c      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f06f 0220 	mvn.w	r2, #32
 8008d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fb93 	bl	800a430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00c      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fb9f 	bl	800a46c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fb97 	bl	800a480 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fb8f 	bl	800a494 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fb87 	bl	800a4a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e088      	b.n	8008ed2 <HAL_TIM_IC_ConfigChannel+0x130>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d11b      	bne.n	8008e06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008dde:	f000 ff85 	bl	8009cec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 020c 	bic.w	r2, r2, #12
 8008df0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6999      	ldr	r1, [r3, #24]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	619a      	str	r2, [r3, #24]
 8008e04:	e060      	b.n	8008ec8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d11c      	bne.n	8008e46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008e1c:	f000 fffd 	bl	8009e1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008e2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6999      	ldr	r1, [r3, #24]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	021a      	lsls	r2, r3, #8
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	619a      	str	r2, [r3, #24]
 8008e44:	e040      	b.n	8008ec8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d11b      	bne.n	8008e84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008e5c:	f001 f84a 	bl	8009ef4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69da      	ldr	r2, [r3, #28]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 020c 	bic.w	r2, r2, #12
 8008e6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69d9      	ldr	r1, [r3, #28]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	61da      	str	r2, [r3, #28]
 8008e82:	e021      	b.n	8008ec8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b0c      	cmp	r3, #12
 8008e88:	d11c      	bne.n	8008ec4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008e9a:	f001 f867 	bl	8009f6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008eac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69d9      	ldr	r1, [r3, #28]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	021a      	lsls	r2, r3, #8
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	61da      	str	r2, [r3, #28]
 8008ec2:	e001      	b.n	8008ec8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0ff      	b.n	80090fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b14      	cmp	r3, #20
 8008f06:	f200 80f0 	bhi.w	80090ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	080090eb 	.word	0x080090eb
 8008f18:	080090eb 	.word	0x080090eb
 8008f1c:	080090eb 	.word	0x080090eb
 8008f20:	08008fa5 	.word	0x08008fa5
 8008f24:	080090eb 	.word	0x080090eb
 8008f28:	080090eb 	.word	0x080090eb
 8008f2c:	080090eb 	.word	0x080090eb
 8008f30:	08008fe7 	.word	0x08008fe7
 8008f34:	080090eb 	.word	0x080090eb
 8008f38:	080090eb 	.word	0x080090eb
 8008f3c:	080090eb 	.word	0x080090eb
 8008f40:	08009027 	.word	0x08009027
 8008f44:	080090eb 	.word	0x080090eb
 8008f48:	080090eb 	.word	0x080090eb
 8008f4c:	080090eb 	.word	0x080090eb
 8008f50:	08009069 	.word	0x08009069
 8008f54:	080090eb 	.word	0x080090eb
 8008f58:	080090eb 	.word	0x080090eb
 8008f5c:	080090eb 	.word	0x080090eb
 8008f60:	080090a9 	.word	0x080090a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fb04 	bl	8009578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0208 	orr.w	r2, r2, #8
 8008f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0204 	bic.w	r2, r2, #4
 8008f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6999      	ldr	r1, [r3, #24]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691a      	ldr	r2, [r3, #16]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	619a      	str	r2, [r3, #24]
      break;
 8008fa2:	e0a5      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fb74 	bl	8009698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6999      	ldr	r1, [r3, #24]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	021a      	lsls	r2, r3, #8
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	619a      	str	r2, [r3, #24]
      break;
 8008fe4:	e084      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fbdd 	bl	80097ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0208 	orr.w	r2, r2, #8
 8009000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69da      	ldr	r2, [r3, #28]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0204 	bic.w	r2, r2, #4
 8009010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69d9      	ldr	r1, [r3, #28]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	61da      	str	r2, [r3, #28]
      break;
 8009024:	e064      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 fc45 	bl	80098bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69da      	ldr	r2, [r3, #28]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69d9      	ldr	r1, [r3, #28]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	021a      	lsls	r2, r3, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	61da      	str	r2, [r3, #28]
      break;
 8009066:	e043      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fcae 	bl	80099d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0208 	orr.w	r2, r2, #8
 8009082:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0204 	bic.w	r2, r2, #4
 8009092:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691a      	ldr	r2, [r3, #16]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80090a6:	e023      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fcf2 	bl	8009a98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	021a      	lsls	r2, r3, #8
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80090e8:	e002      	b.n	80090f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
      break;
 80090ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop

08009104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d101      	bne.n	8009120 <HAL_TIM_ConfigClockSource+0x1c>
 800911c:	2302      	movs	r3, #2
 800911e:	e0de      	b.n	80092de <HAL_TIM_ConfigClockSource+0x1da>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800913e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800914a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a63      	ldr	r2, [pc, #396]	@ (80092e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	f000 80a9 	beq.w	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009160:	4a61      	ldr	r2, [pc, #388]	@ (80092e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	f200 80ae 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009168:	4a60      	ldr	r2, [pc, #384]	@ (80092ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	f000 80a1 	beq.w	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009170:	4a5e      	ldr	r2, [pc, #376]	@ (80092ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009172:	4293      	cmp	r3, r2
 8009174:	f200 80a6 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009178:	4a5d      	ldr	r2, [pc, #372]	@ (80092f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800917a:	4293      	cmp	r3, r2
 800917c:	f000 8099 	beq.w	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009180:	4a5b      	ldr	r2, [pc, #364]	@ (80092f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009182:	4293      	cmp	r3, r2
 8009184:	f200 809e 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009188:	4a5a      	ldr	r2, [pc, #360]	@ (80092f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	f000 8091 	beq.w	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009190:	4a58      	ldr	r2, [pc, #352]	@ (80092f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009192:	4293      	cmp	r3, r2
 8009194:	f200 8096 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009198:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800919c:	f000 8089 	beq.w	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80091a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80091a4:	f200 808e 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ac:	d03e      	beq.n	800922c <HAL_TIM_ConfigClockSource+0x128>
 80091ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b2:	f200 8087 	bhi.w	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ba:	f000 8086 	beq.w	80092ca <HAL_TIM_ConfigClockSource+0x1c6>
 80091be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c2:	d87f      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091c4:	2b70      	cmp	r3, #112	@ 0x70
 80091c6:	d01a      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0xfa>
 80091c8:	2b70      	cmp	r3, #112	@ 0x70
 80091ca:	d87b      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091cc:	2b60      	cmp	r3, #96	@ 0x60
 80091ce:	d050      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x16e>
 80091d0:	2b60      	cmp	r3, #96	@ 0x60
 80091d2:	d877      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091d4:	2b50      	cmp	r3, #80	@ 0x50
 80091d6:	d03c      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x14e>
 80091d8:	2b50      	cmp	r3, #80	@ 0x50
 80091da:	d873      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091dc:	2b40      	cmp	r3, #64	@ 0x40
 80091de:	d058      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x18e>
 80091e0:	2b40      	cmp	r3, #64	@ 0x40
 80091e2:	d86f      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091e4:	2b30      	cmp	r3, #48	@ 0x30
 80091e6:	d064      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80091e8:	2b30      	cmp	r3, #48	@ 0x30
 80091ea:	d86b      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d060      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d867      	bhi.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d05c      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d05a      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80091fc:	e062      	b.n	80092c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800920e:	f000 ff07 	bl	800a020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	609a      	str	r2, [r3, #8]
      break;
 800922a:	e04f      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800923c:	f000 fef0 	bl	800a020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689a      	ldr	r2, [r3, #8]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800924e:	609a      	str	r2, [r3, #8]
      break;
 8009250:	e03c      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	461a      	mov	r2, r3
 8009260:	f000 fdac 	bl	8009dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2150      	movs	r1, #80	@ 0x50
 800926a:	4618      	mov	r0, r3
 800926c:	f000 febb 	bl	8009fe6 <TIM_ITRx_SetConfig>
      break;
 8009270:	e02c      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800927e:	461a      	mov	r2, r3
 8009280:	f000 fe08 	bl	8009e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2160      	movs	r1, #96	@ 0x60
 800928a:	4618      	mov	r0, r3
 800928c:	f000 feab 	bl	8009fe6 <TIM_ITRx_SetConfig>
      break;
 8009290:	e01c      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800929e:	461a      	mov	r2, r3
 80092a0:	f000 fd8c 	bl	8009dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2140      	movs	r1, #64	@ 0x40
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fe9b 	bl	8009fe6 <TIM_ITRx_SetConfig>
      break;
 80092b0:	e00c      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f000 fe92 	bl	8009fe6 <TIM_ITRx_SetConfig>
      break;
 80092c2:	e003      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
      break;
 80092c8:	e000      	b.n	80092cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80092ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	00100070 	.word	0x00100070
 80092ec:	00100040 	.word	0x00100040
 80092f0:	00100030 	.word	0x00100030
 80092f4:	00100020 	.word	0x00100020

080092f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_TIM_SlaveConfigSynchro+0x18>
 800930c:	2302      	movs	r3, #2
 800930e:	e031      	b.n	8009374 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc1e 	bl	8009b64 <TIM_SlaveTimer_SetConfig>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e018      	b.n	8009374 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009350:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009360:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b0c      	cmp	r3, #12
 800938e:	d831      	bhi.n	80093f4 <HAL_TIM_ReadCapturedValue+0x78>
 8009390:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093cd 	.word	0x080093cd
 800939c:	080093f5 	.word	0x080093f5
 80093a0:	080093f5 	.word	0x080093f5
 80093a4:	080093f5 	.word	0x080093f5
 80093a8:	080093d7 	.word	0x080093d7
 80093ac:	080093f5 	.word	0x080093f5
 80093b0:	080093f5 	.word	0x080093f5
 80093b4:	080093f5 	.word	0x080093f5
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093f5 	.word	0x080093f5
 80093c0:	080093f5 	.word	0x080093f5
 80093c4:	080093f5 	.word	0x080093f5
 80093c8:	080093eb 	.word	0x080093eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d2:	60fb      	str	r3, [r7, #12]

      break;
 80093d4:	e00f      	b.n	80093f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093dc:	60fb      	str	r3, [r7, #12]

      break;
 80093de:	e00a      	b.n	80093f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e6:	60fb      	str	r3, [r7, #12]

      break;
 80093e8:	e005      	b.n	80093f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f0:	60fb      	str	r3, [r7, #12]

      break;
 80093f2:	e000      	b.n	80093f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80093f4:	bf00      	nop
  }

  return tmpreg;
 80093f6:	68fb      	ldr	r3, [r7, #12]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a42      	ldr	r2, [pc, #264]	@ (800955c <TIM_Base_SetConfig+0x11c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00f      	beq.n	8009478 <TIM_Base_SetConfig+0x38>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945e:	d00b      	beq.n	8009478 <TIM_Base_SetConfig+0x38>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a3f      	ldr	r2, [pc, #252]	@ (8009560 <TIM_Base_SetConfig+0x120>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_Base_SetConfig+0x38>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a3e      	ldr	r2, [pc, #248]	@ (8009564 <TIM_Base_SetConfig+0x124>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0x38>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3d      	ldr	r2, [pc, #244]	@ (8009568 <TIM_Base_SetConfig+0x128>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a33      	ldr	r2, [pc, #204]	@ (800955c <TIM_Base_SetConfig+0x11c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d01b      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009498:	d017      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a30      	ldr	r2, [pc, #192]	@ (8009560 <TIM_Base_SetConfig+0x120>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d013      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2f      	ldr	r2, [pc, #188]	@ (8009564 <TIM_Base_SetConfig+0x124>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00f      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2e      	ldr	r2, [pc, #184]	@ (8009568 <TIM_Base_SetConfig+0x128>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00b      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	@ (800956c <TIM_Base_SetConfig+0x12c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d007      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2c      	ldr	r2, [pc, #176]	@ (8009570 <TIM_Base_SetConfig+0x130>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_Base_SetConfig+0x8a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2b      	ldr	r2, [pc, #172]	@ (8009574 <TIM_Base_SetConfig+0x134>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d108      	bne.n	80094dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a16      	ldr	r2, [pc, #88]	@ (800955c <TIM_Base_SetConfig+0x11c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00f      	beq.n	8009528 <TIM_Base_SetConfig+0xe8>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <TIM_Base_SetConfig+0x128>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00b      	beq.n	8009528 <TIM_Base_SetConfig+0xe8>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a16      	ldr	r2, [pc, #88]	@ (800956c <TIM_Base_SetConfig+0x12c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <TIM_Base_SetConfig+0xe8>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a15      	ldr	r2, [pc, #84]	@ (8009570 <TIM_Base_SetConfig+0x130>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_Base_SetConfig+0xe8>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a14      	ldr	r2, [pc, #80]	@ (8009574 <TIM_Base_SetConfig+0x134>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d103      	bne.n	8009530 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	691a      	ldr	r2, [r3, #16]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b01      	cmp	r3, #1
 8009540:	d105      	bne.n	800954e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f023 0201 	bic.w	r2, r3, #1
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	611a      	str	r2, [r3, #16]
  }
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40013400 	.word	0x40013400
 800956c:	40014000 	.word	0x40014000
 8009570:	40014400 	.word	0x40014400
 8009574:	40014800 	.word	0x40014800

08009578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	f023 0201 	bic.w	r2, r3, #1
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f023 0302 	bic.w	r3, r3, #2
 80095c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009684 <TIM_OC1_SetConfig+0x10c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00f      	beq.n	80095f8 <TIM_OC1_SetConfig+0x80>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a2b      	ldr	r2, [pc, #172]	@ (8009688 <TIM_OC1_SetConfig+0x110>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00b      	beq.n	80095f8 <TIM_OC1_SetConfig+0x80>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a2a      	ldr	r2, [pc, #168]	@ (800968c <TIM_OC1_SetConfig+0x114>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d007      	beq.n	80095f8 <TIM_OC1_SetConfig+0x80>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a29      	ldr	r2, [pc, #164]	@ (8009690 <TIM_OC1_SetConfig+0x118>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d003      	beq.n	80095f8 <TIM_OC1_SetConfig+0x80>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a28      	ldr	r2, [pc, #160]	@ (8009694 <TIM_OC1_SetConfig+0x11c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d10c      	bne.n	8009612 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f023 0308 	bic.w	r3, r3, #8
 80095fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f023 0304 	bic.w	r3, r3, #4
 8009610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a1b      	ldr	r2, [pc, #108]	@ (8009684 <TIM_OC1_SetConfig+0x10c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00f      	beq.n	800963a <TIM_OC1_SetConfig+0xc2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a1a      	ldr	r2, [pc, #104]	@ (8009688 <TIM_OC1_SetConfig+0x110>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00b      	beq.n	800963a <TIM_OC1_SetConfig+0xc2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a19      	ldr	r2, [pc, #100]	@ (800968c <TIM_OC1_SetConfig+0x114>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d007      	beq.n	800963a <TIM_OC1_SetConfig+0xc2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a18      	ldr	r2, [pc, #96]	@ (8009690 <TIM_OC1_SetConfig+0x118>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d003      	beq.n	800963a <TIM_OC1_SetConfig+0xc2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a17      	ldr	r2, [pc, #92]	@ (8009694 <TIM_OC1_SetConfig+0x11c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d111      	bne.n	800965e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	621a      	str	r2, [r3, #32]
}
 8009678:	bf00      	nop
 800967a:	371c      	adds	r7, #28
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	40012c00 	.word	0x40012c00
 8009688:	40013400 	.word	0x40013400
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800

08009698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	f023 0210 	bic.w	r2, r3, #16
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f023 0320 	bic.w	r3, r3, #32
 80096e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a28      	ldr	r2, [pc, #160]	@ (8009798 <TIM_OC2_SetConfig+0x100>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_OC2_SetConfig+0x6c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a27      	ldr	r2, [pc, #156]	@ (800979c <TIM_OC2_SetConfig+0x104>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d10d      	bne.n	8009720 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800970a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800971e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a1d      	ldr	r2, [pc, #116]	@ (8009798 <TIM_OC2_SetConfig+0x100>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00f      	beq.n	8009748 <TIM_OC2_SetConfig+0xb0>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a1c      	ldr	r2, [pc, #112]	@ (800979c <TIM_OC2_SetConfig+0x104>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00b      	beq.n	8009748 <TIM_OC2_SetConfig+0xb0>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a1b      	ldr	r2, [pc, #108]	@ (80097a0 <TIM_OC2_SetConfig+0x108>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d007      	beq.n	8009748 <TIM_OC2_SetConfig+0xb0>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a1a      	ldr	r2, [pc, #104]	@ (80097a4 <TIM_OC2_SetConfig+0x10c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d003      	beq.n	8009748 <TIM_OC2_SetConfig+0xb0>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a19      	ldr	r2, [pc, #100]	@ (80097a8 <TIM_OC2_SetConfig+0x110>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d113      	bne.n	8009770 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800974e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	621a      	str	r2, [r3, #32]
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40012c00 	.word	0x40012c00
 800979c:	40013400 	.word	0x40013400
 80097a0:	40014000 	.word	0x40014000
 80097a4:	40014400 	.word	0x40014400
 80097a8:	40014800 	.word	0x40014800

080097ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	4313      	orrs	r3, r2
 8009804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a27      	ldr	r2, [pc, #156]	@ (80098a8 <TIM_OC3_SetConfig+0xfc>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_OC3_SetConfig+0x6a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a26      	ldr	r2, [pc, #152]	@ (80098ac <TIM_OC3_SetConfig+0x100>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d10d      	bne.n	8009832 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800981c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4313      	orrs	r3, r2
 8009828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a1c      	ldr	r2, [pc, #112]	@ (80098a8 <TIM_OC3_SetConfig+0xfc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_OC3_SetConfig+0xae>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1b      	ldr	r2, [pc, #108]	@ (80098ac <TIM_OC3_SetConfig+0x100>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_OC3_SetConfig+0xae>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1a      	ldr	r2, [pc, #104]	@ (80098b0 <TIM_OC3_SetConfig+0x104>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_OC3_SetConfig+0xae>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a19      	ldr	r2, [pc, #100]	@ (80098b4 <TIM_OC3_SetConfig+0x108>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_OC3_SetConfig+0xae>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <TIM_OC3_SetConfig+0x10c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d113      	bne.n	8009882 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	40012c00 	.word	0x40012c00
 80098ac:	40013400 	.word	0x40013400
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800

080098bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	69db      	ldr	r3, [r3, #28]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800990a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	031b      	lsls	r3, r3, #12
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a28      	ldr	r2, [pc, #160]	@ (80099bc <TIM_OC4_SetConfig+0x100>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_OC4_SetConfig+0x6c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a27      	ldr	r2, [pc, #156]	@ (80099c0 <TIM_OC4_SetConfig+0x104>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d10d      	bne.n	8009944 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800992e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	031b      	lsls	r3, r3, #12
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a1d      	ldr	r2, [pc, #116]	@ (80099bc <TIM_OC4_SetConfig+0x100>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00f      	beq.n	800996c <TIM_OC4_SetConfig+0xb0>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1c      	ldr	r2, [pc, #112]	@ (80099c0 <TIM_OC4_SetConfig+0x104>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d00b      	beq.n	800996c <TIM_OC4_SetConfig+0xb0>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1b      	ldr	r2, [pc, #108]	@ (80099c4 <TIM_OC4_SetConfig+0x108>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d007      	beq.n	800996c <TIM_OC4_SetConfig+0xb0>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a1a      	ldr	r2, [pc, #104]	@ (80099c8 <TIM_OC4_SetConfig+0x10c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d003      	beq.n	800996c <TIM_OC4_SetConfig+0xb0>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a19      	ldr	r2, [pc, #100]	@ (80099cc <TIM_OC4_SetConfig+0x110>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d113      	bne.n	8009994 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009972:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800997a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	019b      	lsls	r3, r3, #6
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	019b      	lsls	r3, r3, #6
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	621a      	str	r2, [r3, #32]
}
 80099ae:	bf00      	nop
 80099b0:	371c      	adds	r7, #28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	40012c00 	.word	0x40012c00
 80099c0:	40013400 	.word	0x40013400
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40014400 	.word	0x40014400
 80099cc:	40014800 	.word	0x40014800

080099d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	041b      	lsls	r3, r3, #16
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a17      	ldr	r2, [pc, #92]	@ (8009a84 <TIM_OC5_SetConfig+0xb4>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a16      	ldr	r2, [pc, #88]	@ (8009a88 <TIM_OC5_SetConfig+0xb8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a15      	ldr	r2, [pc, #84]	@ (8009a8c <TIM_OC5_SetConfig+0xbc>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a14      	ldr	r2, [pc, #80]	@ (8009a90 <TIM_OC5_SetConfig+0xc0>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a13      	ldr	r2, [pc, #76]	@ (8009a94 <TIM_OC5_SetConfig+0xc4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d109      	bne.n	8009a5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	621a      	str	r2, [r3, #32]
}
 8009a78:	bf00      	nop
 8009a7a:	371c      	adds	r7, #28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40013400 	.word	0x40013400
 8009a8c:	40014000 	.word	0x40014000
 8009a90:	40014400 	.word	0x40014400
 8009a94:	40014800 	.word	0x40014800

08009a98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	051b      	lsls	r3, r3, #20
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a18      	ldr	r2, [pc, #96]	@ (8009b50 <TIM_OC6_SetConfig+0xb8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00f      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a17      	ldr	r2, [pc, #92]	@ (8009b54 <TIM_OC6_SetConfig+0xbc>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00b      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a16      	ldr	r2, [pc, #88]	@ (8009b58 <TIM_OC6_SetConfig+0xc0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d007      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a15      	ldr	r2, [pc, #84]	@ (8009b5c <TIM_OC6_SetConfig+0xc4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d003      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a14      	ldr	r2, [pc, #80]	@ (8009b60 <TIM_OC6_SetConfig+0xc8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d109      	bne.n	8009b28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	029b      	lsls	r3, r3, #10
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	621a      	str	r2, [r3, #32]
}
 8009b42:	bf00      	nop
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40012c00 	.word	0x40012c00
 8009b54:	40013400 	.word	0x40013400
 8009b58:	40014000 	.word	0x40014000
 8009b5c:	40014400 	.word	0x40014400
 8009b60:	40014800 	.word	0x40014800

08009b64 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8009cdc <TIM_SlaveTimer_SetConfig+0x178>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	f000 808a 	beq.w	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009bba:	4a48      	ldr	r2, [pc, #288]	@ (8009cdc <TIM_SlaveTimer_SetConfig+0x178>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	f200 8083 	bhi.w	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009bc2:	4a47      	ldr	r2, [pc, #284]	@ (8009ce0 <TIM_SlaveTimer_SetConfig+0x17c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	f000 8082 	beq.w	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009bca:	4a45      	ldr	r2, [pc, #276]	@ (8009ce0 <TIM_SlaveTimer_SetConfig+0x17c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d87b      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009bd0:	4a44      	ldr	r2, [pc, #272]	@ (8009ce4 <TIM_SlaveTimer_SetConfig+0x180>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d07b      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009bd6:	4a43      	ldr	r2, [pc, #268]	@ (8009ce4 <TIM_SlaveTimer_SetConfig+0x180>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d875      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009bdc:	4a42      	ldr	r2, [pc, #264]	@ (8009ce8 <TIM_SlaveTimer_SetConfig+0x184>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d075      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009be2:	4a41      	ldr	r2, [pc, #260]	@ (8009ce8 <TIM_SlaveTimer_SetConfig+0x184>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d86f      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009be8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009bec:	d06f      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009bee:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009bf2:	d869      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009bf4:	2b70      	cmp	r3, #112	@ 0x70
 8009bf6:	d01a      	beq.n	8009c2e <TIM_SlaveTimer_SetConfig+0xca>
 8009bf8:	2b70      	cmp	r3, #112	@ 0x70
 8009bfa:	d865      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009bfc:	2b60      	cmp	r3, #96	@ 0x60
 8009bfe:	d059      	beq.n	8009cb4 <TIM_SlaveTimer_SetConfig+0x150>
 8009c00:	2b60      	cmp	r3, #96	@ 0x60
 8009c02:	d861      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009c04:	2b50      	cmp	r3, #80	@ 0x50
 8009c06:	d04b      	beq.n	8009ca0 <TIM_SlaveTimer_SetConfig+0x13c>
 8009c08:	2b50      	cmp	r3, #80	@ 0x50
 8009c0a:	d85d      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009c0c:	2b40      	cmp	r3, #64	@ 0x40
 8009c0e:	d019      	beq.n	8009c44 <TIM_SlaveTimer_SetConfig+0xe0>
 8009c10:	2b40      	cmp	r3, #64	@ 0x40
 8009c12:	d859      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009c14:	2b30      	cmp	r3, #48	@ 0x30
 8009c16:	d05a      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009c18:	2b30      	cmp	r3, #48	@ 0x30
 8009c1a:	d855      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d056      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d851      	bhi.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d052      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	d050      	beq.n	8009cce <TIM_SlaveTimer_SetConfig+0x16a>
 8009c2c:	e04c      	b.n	8009cc8 <TIM_SlaveTimer_SetConfig+0x164>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009c3e:	f000 f9ef 	bl	800a020 <TIM_ETR_SetConfig>
      break;
 8009c42:	e045      	b.n	8009cd0 <TIM_SlaveTimer_SetConfig+0x16c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b05      	cmp	r3, #5
 8009c4a:	d004      	beq.n	8009c56 <TIM_SlaveTimer_SetConfig+0xf2>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009c50:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8009c54:	d101      	bne.n	8009c5a <TIM_SlaveTimer_SetConfig+0xf6>
      {
        return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e03b      	b.n	8009cd2 <TIM_SlaveTimer_SetConfig+0x16e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a1a      	ldr	r2, [r3, #32]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0201 	bic.w	r2, r2, #1
 8009c70:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c80:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	621a      	str	r2, [r3, #32]
      break;
 8009c9e:	e017      	b.n	8009cd0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cac:	461a      	mov	r2, r3
 8009cae:	f000 f885 	bl	8009dbc <TIM_TI1_ConfigInputStage>
      break;
 8009cb2:	e00d      	b.n	8009cd0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f000 f8e7 	bl	8009e94 <TIM_TI2_ConfigInputStage>
      break;
 8009cc6:	e003      	b.n	8009cd0 <TIM_SlaveTimer_SetConfig+0x16c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	75fb      	strb	r3, [r7, #23]
      break;
 8009ccc:	e000      	b.n	8009cd0 <TIM_SlaveTimer_SetConfig+0x16c>
      break;
 8009cce:	bf00      	nop
  }

  return status;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	00100070 	.word	0x00100070
 8009ce0:	00100040 	.word	0x00100040
 8009ce4:	00100030 	.word	0x00100030
 8009ce8:	00100020 	.word	0x00100020

08009cec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	f023 0201 	bic.w	r2, r3, #1
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4a24      	ldr	r2, [pc, #144]	@ (8009da8 <TIM_TI1_SetConfig+0xbc>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d013      	beq.n	8009d42 <TIM_TI1_SetConfig+0x56>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d20:	d00f      	beq.n	8009d42 <TIM_TI1_SetConfig+0x56>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4a21      	ldr	r2, [pc, #132]	@ (8009dac <TIM_TI1_SetConfig+0xc0>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d00b      	beq.n	8009d42 <TIM_TI1_SetConfig+0x56>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a20      	ldr	r2, [pc, #128]	@ (8009db0 <TIM_TI1_SetConfig+0xc4>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d007      	beq.n	8009d42 <TIM_TI1_SetConfig+0x56>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4a1f      	ldr	r2, [pc, #124]	@ (8009db4 <TIM_TI1_SetConfig+0xc8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d003      	beq.n	8009d42 <TIM_TI1_SetConfig+0x56>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8009db8 <TIM_TI1_SetConfig+0xcc>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d101      	bne.n	8009d46 <TIM_TI1_SetConfig+0x5a>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e000      	b.n	8009d48 <TIM_TI1_SetConfig+0x5c>
 8009d46:	2300      	movs	r3, #0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d008      	beq.n	8009d5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]
 8009d5c:	e003      	b.n	8009d66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	011b      	lsls	r3, r3, #4
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f023 030a 	bic.w	r3, r3, #10
 8009d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f003 030a 	and.w	r3, r3, #10
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40000400 	.word	0x40000400
 8009db0:	40000800 	.word	0x40000800
 8009db4:	40013400 	.word	0x40013400
 8009db8:	40014000 	.word	0x40014000

08009dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f023 0201 	bic.w	r2, r3, #1
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f023 030a 	bic.w	r3, r3, #10
 8009df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	621a      	str	r2, [r3, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b087      	sub	sp, #28
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	f023 0210 	bic.w	r2, r3, #16
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	031b      	lsls	r3, r3, #12
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	621a      	str	r2, [r3, #32]
}
 8009e88:	bf00      	nop
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f023 0210 	bic.w	r2, r3, #16
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	031b      	lsls	r3, r3, #12
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	621a      	str	r2, [r3, #32]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009f44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	621a      	str	r2, [r3, #32]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009faa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	031b      	lsls	r3, r3, #12
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	031b      	lsls	r3, r3, #12
 8009fc4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	621a      	str	r2, [r3, #32]
}
 8009fda:	bf00      	nop
 8009fdc:	371c      	adds	r7, #28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	f043 0307 	orr.w	r3, r3, #7
 800a00c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	609a      	str	r2, [r3, #8]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	021a      	lsls	r2, r3, #8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	431a      	orrs	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4313      	orrs	r3, r2
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	609a      	str	r2, [r3, #8]
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f003 031f 	and.w	r3, r3, #31
 800a072:	2201      	movs	r2, #1
 800a074:	fa02 f303 	lsl.w	r3, r2, r3
 800a078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1a      	ldr	r2, [r3, #32]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	43db      	mvns	r3, r3
 800a082:	401a      	ands	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a1a      	ldr	r2, [r3, #32]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f003 031f 	and.w	r3, r3, #31
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	fa01 f303 	lsl.w	r3, r1, r3
 800a098:	431a      	orrs	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	621a      	str	r2, [r3, #32]
}
 800a09e:	bf00      	nop
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
	...

0800a0ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <HAL_TIMEx_PWMN_Start+0x24>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	bf14      	ite	ne
 800a0c8:	2301      	movne	r3, #1
 800a0ca:	2300      	moveq	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	e022      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d109      	bne.n	800a0ea <HAL_TIMEx_PWMN_Start+0x3e>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	bf14      	ite	ne
 800a0e2:	2301      	movne	r3, #1
 800a0e4:	2300      	moveq	r3, #0
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	e015      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0x6a>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d109      	bne.n	800a104 <HAL_TIMEx_PWMN_Start+0x58>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	bf14      	ite	ne
 800a0fc:	2301      	movne	r3, #1
 800a0fe:	2300      	moveq	r3, #0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	e008      	b.n	800a116 <HAL_TIMEx_PWMN_Start+0x6a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e069      	b.n	800a1f2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d104      	bne.n	800a12e <HAL_TIMEx_PWMN_Start+0x82>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a12c:	e013      	b.n	800a156 <HAL_TIMEx_PWMN_Start+0xaa>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d104      	bne.n	800a13e <HAL_TIMEx_PWMN_Start+0x92>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a13c:	e00b      	b.n	800a156 <HAL_TIMEx_PWMN_Start+0xaa>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b08      	cmp	r3, #8
 800a142:	d104      	bne.n	800a14e <HAL_TIMEx_PWMN_Start+0xa2>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a14c:	e003      	b.n	800a156 <HAL_TIMEx_PWMN_Start+0xaa>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2202      	movs	r2, #2
 800a152:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2204      	movs	r2, #4
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 f9ac 	bl	800a4bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a172:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a20      	ldr	r2, [pc, #128]	@ (800a1fc <HAL_TIMEx_PWMN_Start+0x150>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d018      	beq.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x104>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a186:	d013      	beq.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x104>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a1c      	ldr	r2, [pc, #112]	@ (800a200 <HAL_TIMEx_PWMN_Start+0x154>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00e      	beq.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x104>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a1b      	ldr	r2, [pc, #108]	@ (800a204 <HAL_TIMEx_PWMN_Start+0x158>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d009      	beq.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x104>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a19      	ldr	r2, [pc, #100]	@ (800a208 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIMEx_PWMN_Start+0x104>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a18      	ldr	r2, [pc, #96]	@ (800a20c <HAL_TIMEx_PWMN_Start+0x160>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d115      	bne.n	800a1dc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	4b16      	ldr	r3, [pc, #88]	@ (800a210 <HAL_TIMEx_PWMN_Start+0x164>)
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b06      	cmp	r3, #6
 800a1c0:	d015      	beq.n	800a1ee <HAL_TIMEx_PWMN_Start+0x142>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c8:	d011      	beq.n	800a1ee <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f042 0201 	orr.w	r2, r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1da:	e008      	b.n	800a1ee <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	e000      	b.n	800a1f0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	40012c00 	.word	0x40012c00
 800a200:	40000400 	.word	0x40000400
 800a204:	40000800 	.word	0x40000800
 800a208:	40013400 	.word	0x40013400
 800a20c:	40014000 	.word	0x40014000
 800a210:	00010007 	.word	0x00010007

0800a214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a228:	2302      	movs	r3, #2
 800a22a:	e065      	b.n	800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a2c      	ldr	r2, [pc, #176]	@ (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a2b      	ldr	r2, [pc, #172]	@ (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d108      	bne.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a27c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d018      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a2:	d013      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a18      	ldr	r2, [pc, #96]	@ (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d00e      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a17      	ldr	r2, [pc, #92]	@ (800a310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d009      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a12      	ldr	r2, [pc, #72]	@ (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a13      	ldr	r2, [pc, #76]	@ (800a314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d10c      	bne.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40012c00 	.word	0x40012c00
 800a308:	40013400 	.word	0x40013400
 800a30c:	40000400 	.word	0x40000400
 800a310:	40000800 	.word	0x40000800
 800a314:	40014000 	.word	0x40014000

0800a318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a330:	2302      	movs	r3, #2
 800a332:	e073      	b.n	800a41c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	041b      	lsls	r3, r3, #16
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a19      	ldr	r2, [pc, #100]	@ (800a428 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a18      	ldr	r2, [pc, #96]	@ (800a42c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d11c      	bne.n	800a40a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3da:	051b      	lsls	r3, r3, #20
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	40012c00 	.word	0x40012c00
 800a42c:	40013400 	.word	0x40013400

0800a430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	2204      	movs	r2, #4
 800a4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a1a      	ldr	r2, [r3, #32]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	401a      	ands	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a1a      	ldr	r2, [r3, #32]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	621a      	str	r2, [r3, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e042      	b.n	800a59e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7f8 fcc2 	bl	8002eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2224      	movs	r2, #36	@ 0x24
 800a534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0201 	bic.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 ff31 	bl	800b3b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fc62 	bl	800ae20 <UART_SetConfig>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e01b      	b.n	800a59e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0201 	orr.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 ffb0 	bl	800b4fc <UART_CheckIdleState>
 800a59c:	4603      	mov	r3, r0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b08a      	sub	sp, #40	@ 0x28
 800a5aa:	af02      	add	r7, sp, #8
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	d17b      	bne.n	800a6b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_UART_Transmit+0x26>
 800a5c6:	88fb      	ldrh	r3, [r7, #6]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e074      	b.n	800a6ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2221      	movs	r2, #33	@ 0x21
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5e0:	f7f8 fee6 	bl	80033b0 <HAL_GetTick>
 800a5e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	88fa      	ldrh	r2, [r7, #6]
 800a5ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	88fa      	ldrh	r2, [r7, #6]
 800a5f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5fe:	d108      	bne.n	800a612 <HAL_UART_Transmit+0x6c>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	e003      	b.n	800a61a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a61a:	e030      	b.n	800a67e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2200      	movs	r2, #0
 800a624:	2180      	movs	r1, #128	@ 0x80
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f001 f812 	bl	800b650 <UART_WaitOnFlagUntilTimeout>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e03d      	b.n	800a6ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10b      	bne.n	800a65c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	461a      	mov	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	3302      	adds	r3, #2
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	e007      	b.n	800a66c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	3301      	adds	r3, #1
 800a66a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a684:	b29b      	uxth	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1c8      	bne.n	800a61c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	2140      	movs	r1, #64	@ 0x40
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 ffdb 	bl	800b650 <UART_WaitOnFlagUntilTimeout>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e006      	b.n	800a6ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e000      	b.n	800a6ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a6b8:	2302      	movs	r3, #2
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
	...

0800a6c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08a      	sub	sp, #40	@ 0x28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d137      	bne.n	800a74c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <HAL_UART_Receive_IT+0x24>
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e030      	b.n	800a74e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a18      	ldr	r2, [pc, #96]	@ (800a758 <HAL_UART_Receive_IT+0x94>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d01f      	beq.n	800a73c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d018      	beq.n	800a73c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	613b      	str	r3, [r7, #16]
   return(result);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	623b      	str	r3, [r7, #32]
 800a72a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	69f9      	ldr	r1, [r7, #28]
 800a72e:	6a3a      	ldr	r2, [r7, #32]
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	61bb      	str	r3, [r7, #24]
   return(result);
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e6      	bne.n	800a70a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a73c:	88fb      	ldrh	r3, [r7, #6]
 800a73e:	461a      	mov	r2, r3
 800a740:	68b9      	ldr	r1, [r7, #8]
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 fff2 	bl	800b72c <UART_Start_Receive_IT>
 800a748:	4603      	mov	r3, r0
 800a74a:	e000      	b.n	800a74e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a74c:	2302      	movs	r3, #2
  }
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	@ 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40008000 	.word	0x40008000

0800a75c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b0ba      	sub	sp, #232	@ 0xe8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a782:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a786:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a78a:	4013      	ands	r3, r2
 800a78c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11b      	bne.n	800a7d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d015      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7a8:	f003 0320 	and.w	r3, r3, #32
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d105      	bne.n	800a7bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d009      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8300 	beq.w	800adc6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
      }
      return;
 800a7ce:	e2fa      	b.n	800adc6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8123 	beq.w	800aa20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a7de:	4b8d      	ldr	r3, [pc, #564]	@ (800aa14 <HAL_UART_IRQHandler+0x2b8>)
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a7e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a7ea:	4b8b      	ldr	r3, [pc, #556]	@ (800aa18 <HAL_UART_IRQHandler+0x2bc>)
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8116 	beq.w	800aa20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d011      	beq.n	800a824 <HAL_UART_IRQHandler+0xc8>
 800a800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2201      	movs	r2, #1
 800a812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a81a:	f043 0201 	orr.w	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d011      	beq.n	800a854 <HAL_UART_IRQHandler+0xf8>
 800a830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2202      	movs	r2, #2
 800a842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a84a:	f043 0204 	orr.w	r2, r3, #4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d011      	beq.n	800a884 <HAL_UART_IRQHandler+0x128>
 800a860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2204      	movs	r2, #4
 800a872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a87a:	f043 0202 	orr.w	r2, r3, #2
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d017      	beq.n	800a8c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d105      	bne.n	800a8a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a89c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a8a0:	4b5c      	ldr	r3, [pc, #368]	@ (800aa14 <HAL_UART_IRQHandler+0x2b8>)
 800a8a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2208      	movs	r2, #8
 800a8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8b6:	f043 0208 	orr.w	r2, r3, #8
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d012      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x196>
 800a8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8e8:	f043 0220 	orr.w	r2, r3, #32
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8266 	beq.w	800adca <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a902:	f003 0320 	and.w	r3, r3, #32
 800a906:	2b00      	cmp	r3, #0
 800a908:	d013      	beq.n	800a932 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a90a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a91a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d007      	beq.n	800a932 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a938:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a946:	2b40      	cmp	r3, #64	@ 0x40
 800a948:	d005      	beq.n	800a956 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a94a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a94e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a952:	2b00      	cmp	r3, #0
 800a954:	d054      	beq.n	800aa00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 f80a 	bl	800b970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a966:	2b40      	cmp	r3, #64	@ 0x40
 800a968:	d146      	bne.n	800a9f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3308      	adds	r3, #8
 800a970:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3308      	adds	r3, #8
 800a992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a996:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a99a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a9a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a9ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1d9      	bne.n	800a96a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d017      	beq.n	800a9f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9c6:	4a15      	ldr	r2, [pc, #84]	@ (800aa1c <HAL_UART_IRQHandler+0x2c0>)
 800a9c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f9 ffbb 	bl	800494c <HAL_DMA_Abort_IT>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d019      	beq.n	800aa10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ee:	e00f      	b.n	800aa10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f9ff 	bl	800adf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f6:	e00b      	b.n	800aa10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f9fb 	bl	800adf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fe:	e007      	b.n	800aa10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f9f7 	bl	800adf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800aa0e:	e1dc      	b.n	800adca <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa10:	bf00      	nop
    return;
 800aa12:	e1da      	b.n	800adca <HAL_UART_IRQHandler+0x66e>
 800aa14:	10000001 	.word	0x10000001
 800aa18:	04000120 	.word	0x04000120
 800aa1c:	0800ba3d 	.word	0x0800ba3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	f040 8170 	bne.w	800ad0a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 8169 	beq.w	800ad0a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 8162 	beq.w	800ad0a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2210      	movs	r2, #16
 800aa4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa58:	2b40      	cmp	r3, #64	@ 0x40
 800aa5a:	f040 80d8 	bne.w	800ac0e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80af 	beq.w	800abd4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa80:	429a      	cmp	r2, r3
 800aa82:	f080 80a7 	bcs.w	800abd4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f040 8087 	bne.w	800abb2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aab0:	e853 3f00 	ldrex	r3, [r3]
 800aab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aabc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aad2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aade:	e841 2300 	strex	r3, r2, [r1]
 800aae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1da      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aafe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ab16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ab24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e1      	bne.n	800aaee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3308      	adds	r3, #8
 800ab30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab34:	e853 3f00 	ldrex	r3, [r3]
 800ab38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ab3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ab4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e3      	bne.n	800ab2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2220      	movs	r2, #32
 800ab66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab80:	f023 0310 	bic.w	r3, r3, #16
 800ab84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e4      	bne.n	800ab70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abac:	4618      	mov	r0, r3
 800abae:	f7f9 fe74 	bl	800489a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2202      	movs	r2, #2
 800abb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	b29b      	uxth	r3, r3
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f91b 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800abd2:	e0fc      	b.n	800adce <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800abde:	429a      	cmp	r2, r3
 800abe0:	f040 80f5 	bne.w	800adce <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0320 	and.w	r3, r3, #32
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	f040 80eb 	bne.w	800adce <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f8fe 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
      return;
 800ac0c:	e0df      	b.n	800adce <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 80d1 	beq.w	800add2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ac30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 80cc 	beq.w	800add2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac64:	e841 2300 	strex	r3, r2, [r1]
 800ac68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e4      	bne.n	800ac3a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3308      	adds	r3, #8
 800ac76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac86:	f023 0301 	bic.w	r3, r3, #1
 800ac8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ac98:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e1      	bne.n	800ac70 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	60fb      	str	r3, [r7, #12]
   return(result);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ace2:	61fb      	str	r3, [r7, #28]
 800ace4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	69b9      	ldr	r1, [r7, #24]
 800ace8:	69fa      	ldr	r2, [r7, #28]
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	617b      	str	r3, [r7, #20]
   return(result);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e4      	bne.n	800acc0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2202      	movs	r2, #2
 800acfa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f880 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad08:	e063      	b.n	800add2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00e      	beq.n	800ad34 <HAL_UART_IRQHandler+0x5d8>
 800ad16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d008      	beq.n	800ad34 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ad2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f001 fbe3 	bl	800c4f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad32:	e051      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d014      	beq.n	800ad6a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d008      	beq.n	800ad6a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d03a      	beq.n	800add6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	4798      	blx	r3
    }
    return;
 800ad68:	e035      	b.n	800add6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d009      	beq.n	800ad8a <HAL_UART_IRQHandler+0x62e>
 800ad76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fe6c 	bl	800ba60 <UART_EndTransmit_IT>
    return;
 800ad88:	e026      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <HAL_UART_IRQHandler+0x64e>
 800ad96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fbbc 	bl	800c520 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ada8:	e016      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800adaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <HAL_UART_IRQHandler+0x67c>
 800adb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da0c      	bge.n	800add8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fba4 	bl	800c50c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adc4:	e008      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
      return;
 800adc6:	bf00      	nop
 800adc8:	e006      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
    return;
 800adca:	bf00      	nop
 800adcc:	e004      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
      return;
 800adce:	bf00      	nop
 800add0:	e002      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
      return;
 800add2:	bf00      	nop
 800add4:	e000      	b.n	800add8 <HAL_UART_IRQHandler+0x67c>
    return;
 800add6:	bf00      	nop
  }
}
 800add8:	37e8      	adds	r7, #232	@ 0xe8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop

0800ade0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae24:	b08c      	sub	sp, #48	@ 0x30
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4bab      	ldr	r3, [pc, #684]	@ (800b0fc <UART_SetConfig+0x2dc>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae58:	430b      	orrs	r3, r1
 800ae5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4aa0      	ldr	r2, [pc, #640]	@ (800b100 <UART_SetConfig+0x2e0>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d004      	beq.n	800ae8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aea0:	430b      	orrs	r3, r1
 800aea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	f023 010f 	bic.w	r1, r3, #15
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a91      	ldr	r2, [pc, #580]	@ (800b104 <UART_SetConfig+0x2e4>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d125      	bne.n	800af10 <UART_SetConfig+0xf0>
 800aec4:	4b90      	ldr	r3, [pc, #576]	@ (800b108 <UART_SetConfig+0x2e8>)
 800aec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d81a      	bhi.n	800af08 <UART_SetConfig+0xe8>
 800aed2:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <UART_SetConfig+0xb8>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800aee9 	.word	0x0800aee9
 800aedc:	0800aef9 	.word	0x0800aef9
 800aee0:	0800aef1 	.word	0x0800aef1
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeee:	e0d6      	b.n	800b09e <UART_SetConfig+0x27e>
 800aef0:	2302      	movs	r3, #2
 800aef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef6:	e0d2      	b.n	800b09e <UART_SetConfig+0x27e>
 800aef8:	2304      	movs	r3, #4
 800aefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefe:	e0ce      	b.n	800b09e <UART_SetConfig+0x27e>
 800af00:	2308      	movs	r3, #8
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af06:	e0ca      	b.n	800b09e <UART_SetConfig+0x27e>
 800af08:	2310      	movs	r3, #16
 800af0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af0e:	e0c6      	b.n	800b09e <UART_SetConfig+0x27e>
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a7d      	ldr	r2, [pc, #500]	@ (800b10c <UART_SetConfig+0x2ec>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d138      	bne.n	800af8c <UART_SetConfig+0x16c>
 800af1a:	4b7b      	ldr	r3, [pc, #492]	@ (800b108 <UART_SetConfig+0x2e8>)
 800af1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af20:	f003 030c 	and.w	r3, r3, #12
 800af24:	2b0c      	cmp	r3, #12
 800af26:	d82d      	bhi.n	800af84 <UART_SetConfig+0x164>
 800af28:	a201      	add	r2, pc, #4	@ (adr r2, 800af30 <UART_SetConfig+0x110>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af65 	.word	0x0800af65
 800af34:	0800af85 	.word	0x0800af85
 800af38:	0800af85 	.word	0x0800af85
 800af3c:	0800af85 	.word	0x0800af85
 800af40:	0800af75 	.word	0x0800af75
 800af44:	0800af85 	.word	0x0800af85
 800af48:	0800af85 	.word	0x0800af85
 800af4c:	0800af85 	.word	0x0800af85
 800af50:	0800af6d 	.word	0x0800af6d
 800af54:	0800af85 	.word	0x0800af85
 800af58:	0800af85 	.word	0x0800af85
 800af5c:	0800af85 	.word	0x0800af85
 800af60:	0800af7d 	.word	0x0800af7d
 800af64:	2300      	movs	r3, #0
 800af66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af6a:	e098      	b.n	800b09e <UART_SetConfig+0x27e>
 800af6c:	2302      	movs	r3, #2
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af72:	e094      	b.n	800b09e <UART_SetConfig+0x27e>
 800af74:	2304      	movs	r3, #4
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e090      	b.n	800b09e <UART_SetConfig+0x27e>
 800af7c:	2308      	movs	r3, #8
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e08c      	b.n	800b09e <UART_SetConfig+0x27e>
 800af84:	2310      	movs	r3, #16
 800af86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	e088      	b.n	800b09e <UART_SetConfig+0x27e>
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a5f      	ldr	r2, [pc, #380]	@ (800b110 <UART_SetConfig+0x2f0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d125      	bne.n	800afe2 <UART_SetConfig+0x1c2>
 800af96:	4b5c      	ldr	r3, [pc, #368]	@ (800b108 <UART_SetConfig+0x2e8>)
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800afa0:	2b30      	cmp	r3, #48	@ 0x30
 800afa2:	d016      	beq.n	800afd2 <UART_SetConfig+0x1b2>
 800afa4:	2b30      	cmp	r3, #48	@ 0x30
 800afa6:	d818      	bhi.n	800afda <UART_SetConfig+0x1ba>
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d00a      	beq.n	800afc2 <UART_SetConfig+0x1a2>
 800afac:	2b20      	cmp	r3, #32
 800afae:	d814      	bhi.n	800afda <UART_SetConfig+0x1ba>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <UART_SetConfig+0x19a>
 800afb4:	2b10      	cmp	r3, #16
 800afb6:	d008      	beq.n	800afca <UART_SetConfig+0x1aa>
 800afb8:	e00f      	b.n	800afda <UART_SetConfig+0x1ba>
 800afba:	2300      	movs	r3, #0
 800afbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc0:	e06d      	b.n	800b09e <UART_SetConfig+0x27e>
 800afc2:	2302      	movs	r3, #2
 800afc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc8:	e069      	b.n	800b09e <UART_SetConfig+0x27e>
 800afca:	2304      	movs	r3, #4
 800afcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd0:	e065      	b.n	800b09e <UART_SetConfig+0x27e>
 800afd2:	2308      	movs	r3, #8
 800afd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afd8:	e061      	b.n	800b09e <UART_SetConfig+0x27e>
 800afda:	2310      	movs	r3, #16
 800afdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afe0:	e05d      	b.n	800b09e <UART_SetConfig+0x27e>
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a4b      	ldr	r2, [pc, #300]	@ (800b114 <UART_SetConfig+0x2f4>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d125      	bne.n	800b038 <UART_SetConfig+0x218>
 800afec:	4b46      	ldr	r3, [pc, #280]	@ (800b108 <UART_SetConfig+0x2e8>)
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aff6:	2bc0      	cmp	r3, #192	@ 0xc0
 800aff8:	d016      	beq.n	800b028 <UART_SetConfig+0x208>
 800affa:	2bc0      	cmp	r3, #192	@ 0xc0
 800affc:	d818      	bhi.n	800b030 <UART_SetConfig+0x210>
 800affe:	2b80      	cmp	r3, #128	@ 0x80
 800b000:	d00a      	beq.n	800b018 <UART_SetConfig+0x1f8>
 800b002:	2b80      	cmp	r3, #128	@ 0x80
 800b004:	d814      	bhi.n	800b030 <UART_SetConfig+0x210>
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <UART_SetConfig+0x1f0>
 800b00a:	2b40      	cmp	r3, #64	@ 0x40
 800b00c:	d008      	beq.n	800b020 <UART_SetConfig+0x200>
 800b00e:	e00f      	b.n	800b030 <UART_SetConfig+0x210>
 800b010:	2300      	movs	r3, #0
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b016:	e042      	b.n	800b09e <UART_SetConfig+0x27e>
 800b018:	2302      	movs	r3, #2
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b01e:	e03e      	b.n	800b09e <UART_SetConfig+0x27e>
 800b020:	2304      	movs	r3, #4
 800b022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b026:	e03a      	b.n	800b09e <UART_SetConfig+0x27e>
 800b028:	2308      	movs	r3, #8
 800b02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b02e:	e036      	b.n	800b09e <UART_SetConfig+0x27e>
 800b030:	2310      	movs	r3, #16
 800b032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b036:	e032      	b.n	800b09e <UART_SetConfig+0x27e>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a30      	ldr	r2, [pc, #192]	@ (800b100 <UART_SetConfig+0x2e0>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d12a      	bne.n	800b098 <UART_SetConfig+0x278>
 800b042:	4b31      	ldr	r3, [pc, #196]	@ (800b108 <UART_SetConfig+0x2e8>)
 800b044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b048:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b04c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b050:	d01a      	beq.n	800b088 <UART_SetConfig+0x268>
 800b052:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b056:	d81b      	bhi.n	800b090 <UART_SetConfig+0x270>
 800b058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b05c:	d00c      	beq.n	800b078 <UART_SetConfig+0x258>
 800b05e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b062:	d815      	bhi.n	800b090 <UART_SetConfig+0x270>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <UART_SetConfig+0x250>
 800b068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b06c:	d008      	beq.n	800b080 <UART_SetConfig+0x260>
 800b06e:	e00f      	b.n	800b090 <UART_SetConfig+0x270>
 800b070:	2300      	movs	r3, #0
 800b072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b076:	e012      	b.n	800b09e <UART_SetConfig+0x27e>
 800b078:	2302      	movs	r3, #2
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b07e:	e00e      	b.n	800b09e <UART_SetConfig+0x27e>
 800b080:	2304      	movs	r3, #4
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b086:	e00a      	b.n	800b09e <UART_SetConfig+0x27e>
 800b088:	2308      	movs	r3, #8
 800b08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b08e:	e006      	b.n	800b09e <UART_SetConfig+0x27e>
 800b090:	2310      	movs	r3, #16
 800b092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b096:	e002      	b.n	800b09e <UART_SetConfig+0x27e>
 800b098:	2310      	movs	r3, #16
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a17      	ldr	r2, [pc, #92]	@ (800b100 <UART_SetConfig+0x2e0>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	f040 80a8 	bne.w	800b1fa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0ae:	2b08      	cmp	r3, #8
 800b0b0:	d834      	bhi.n	800b11c <UART_SetConfig+0x2fc>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <UART_SetConfig+0x298>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0dd 	.word	0x0800b0dd
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	0800b0e5 	.word	0x0800b0e5
 800b0c4:	0800b11d 	.word	0x0800b11d
 800b0c8:	0800b0eb 	.word	0x0800b0eb
 800b0cc:	0800b11d 	.word	0x0800b11d
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b0f3 	.word	0x0800b0f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0dc:	f7fc fef2 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800b0e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0e2:	e021      	b.n	800b128 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <UART_SetConfig+0x2f8>)
 800b0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0e8:	e01e      	b.n	800b128 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0ea:	f7fc fe7d 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 800b0ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0f0:	e01a      	b.n	800b128 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0f8:	e016      	b.n	800b128 <UART_SetConfig+0x308>
 800b0fa:	bf00      	nop
 800b0fc:	cfff69f3 	.word	0xcfff69f3
 800b100:	40008000 	.word	0x40008000
 800b104:	40013800 	.word	0x40013800
 800b108:	40021000 	.word	0x40021000
 800b10c:	40004400 	.word	0x40004400
 800b110:	40004800 	.word	0x40004800
 800b114:	40004c00 	.word	0x40004c00
 800b118:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b126:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 812a 	beq.w	800b384 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	4a9e      	ldr	r2, [pc, #632]	@ (800b3b0 <UART_SetConfig+0x590>)
 800b136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b13a:	461a      	mov	r2, r3
 800b13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b142:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	4613      	mov	r3, r2
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	4413      	add	r3, r2
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	429a      	cmp	r2, r3
 800b152:	d305      	bcc.n	800b160 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b15a:	69ba      	ldr	r2, [r7, #24]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d903      	bls.n	800b168 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b166:	e10d      	b.n	800b384 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	2200      	movs	r2, #0
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	60fa      	str	r2, [r7, #12]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b174:	4a8e      	ldr	r2, [pc, #568]	@ (800b3b0 <UART_SetConfig+0x590>)
 800b176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	2200      	movs	r2, #0
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b18a:	f7f5 fda5 	bl	8000cd8 <__aeabi_uldivmod>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	4610      	mov	r0, r2
 800b194:	4619      	mov	r1, r3
 800b196:	f04f 0200 	mov.w	r2, #0
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	020b      	lsls	r3, r1, #8
 800b1a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1a4:	0202      	lsls	r2, r0, #8
 800b1a6:	6979      	ldr	r1, [r7, #20]
 800b1a8:	6849      	ldr	r1, [r1, #4]
 800b1aa:	0849      	lsrs	r1, r1, #1
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	eb12 0804 	adds.w	r8, r2, r4
 800b1b6:	eb43 0905 	adc.w	r9, r3, r5
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	4693      	mov	fp, r2
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fd84 	bl	8000cd8 <__aeabi_uldivmod>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1de:	d308      	bcc.n	800b1f2 <UART_SetConfig+0x3d2>
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1e6:	d204      	bcs.n	800b1f2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6a3a      	ldr	r2, [r7, #32]
 800b1ee:	60da      	str	r2, [r3, #12]
 800b1f0:	e0c8      	b.n	800b384 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1f8:	e0c4      	b.n	800b384 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b202:	d167      	bne.n	800b2d4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b204:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d828      	bhi.n	800b25e <UART_SetConfig+0x43e>
 800b20c:	a201      	add	r2, pc, #4	@ (adr r2, 800b214 <UART_SetConfig+0x3f4>)
 800b20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b212:	bf00      	nop
 800b214:	0800b239 	.word	0x0800b239
 800b218:	0800b241 	.word	0x0800b241
 800b21c:	0800b249 	.word	0x0800b249
 800b220:	0800b25f 	.word	0x0800b25f
 800b224:	0800b24f 	.word	0x0800b24f
 800b228:	0800b25f 	.word	0x0800b25f
 800b22c:	0800b25f 	.word	0x0800b25f
 800b230:	0800b25f 	.word	0x0800b25f
 800b234:	0800b257 	.word	0x0800b257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b238:	f7fc fe44 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800b23c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b23e:	e014      	b.n	800b26a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b240:	f7fc fe56 	bl	8007ef0 <HAL_RCC_GetPCLK2Freq>
 800b244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b246:	e010      	b.n	800b26a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b248:	4b5a      	ldr	r3, [pc, #360]	@ (800b3b4 <UART_SetConfig+0x594>)
 800b24a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b24c:	e00d      	b.n	800b26a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b24e:	f7fc fdcb 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 800b252:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b254:	e009      	b.n	800b26a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b25c:	e005      	b.n	800b26a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 8089 	beq.w	800b384 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b276:	4a4e      	ldr	r2, [pc, #312]	@ (800b3b0 <UART_SetConfig+0x590>)
 800b278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b27c:	461a      	mov	r2, r3
 800b27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b280:	fbb3 f3f2 	udiv	r3, r3, r2
 800b284:	005a      	lsls	r2, r3, #1
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	085b      	lsrs	r3, r3, #1
 800b28c:	441a      	add	r2, r3
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	fbb2 f3f3 	udiv	r3, r2, r3
 800b296:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	2b0f      	cmp	r3, #15
 800b29c:	d916      	bls.n	800b2cc <UART_SetConfig+0x4ac>
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a4:	d212      	bcs.n	800b2cc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	f023 030f 	bic.w	r3, r3, #15
 800b2ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	085b      	lsrs	r3, r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	8bfb      	ldrh	r3, [r7, #30]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	8bfa      	ldrh	r2, [r7, #30]
 800b2c8:	60da      	str	r2, [r3, #12]
 800b2ca:	e05b      	b.n	800b384 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b2d2:	e057      	b.n	800b384 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d828      	bhi.n	800b32e <UART_SetConfig+0x50e>
 800b2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <UART_SetConfig+0x4c4>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b311 	.word	0x0800b311
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b32f 	.word	0x0800b32f
 800b2f4:	0800b31f 	.word	0x0800b31f
 800b2f8:	0800b32f 	.word	0x0800b32f
 800b2fc:	0800b32f 	.word	0x0800b32f
 800b300:	0800b32f 	.word	0x0800b32f
 800b304:	0800b327 	.word	0x0800b327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b308:	f7fc fddc 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800b30c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b30e:	e014      	b.n	800b33a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b310:	f7fc fdee 	bl	8007ef0 <HAL_RCC_GetPCLK2Freq>
 800b314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b316:	e010      	b.n	800b33a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b318:	4b26      	ldr	r3, [pc, #152]	@ (800b3b4 <UART_SetConfig+0x594>)
 800b31a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b31c:	e00d      	b.n	800b33a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b31e:	f7fc fd63 	bl	8007de8 <HAL_RCC_GetSysClockFreq>
 800b322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b324:	e009      	b.n	800b33a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b32c:	e005      	b.n	800b33a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b338:	bf00      	nop
    }

    if (pclk != 0U)
 800b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d021      	beq.n	800b384 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b0 <UART_SetConfig+0x590>)
 800b346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b34a:	461a      	mov	r2, r3
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	085b      	lsrs	r3, r3, #1
 800b358:	441a      	add	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b362:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	2b0f      	cmp	r3, #15
 800b368:	d909      	bls.n	800b37e <UART_SetConfig+0x55e>
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b370:	d205      	bcs.n	800b37e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	b29a      	uxth	r2, r3
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60da      	str	r2, [r3, #12]
 800b37c:	e002      	b.n	800b384 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2201      	movs	r2, #1
 800b388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2201      	movs	r2, #1
 800b390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2200      	movs	r2, #0
 800b398:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2200      	movs	r2, #0
 800b39e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b3a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3730      	adds	r7, #48	@ 0x30
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08011b08 	.word	0x08011b08
 800b3b4:	00f42400 	.word	0x00f42400

0800b3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c4:	f003 0308 	and.w	r3, r3, #8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b408:	f003 0302 	and.w	r3, r3, #2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00a      	beq.n	800b448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	f003 0310 	and.w	r3, r3, #16
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00a      	beq.n	800b46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	430a      	orrs	r2, r1
 800b468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46e:	f003 0320 	and.w	r3, r3, #32
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00a      	beq.n	800b48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	430a      	orrs	r2, r1
 800b48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01a      	beq.n	800b4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	430a      	orrs	r2, r1
 800b4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4b6:	d10a      	bne.n	800b4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	605a      	str	r2, [r3, #4]
  }
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b098      	sub	sp, #96	@ 0x60
 800b500:	af02      	add	r7, sp, #8
 800b502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b50c:	f7f7 ff50 	bl	80033b0 <HAL_GetTick>
 800b510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b08      	cmp	r3, #8
 800b51e:	d12f      	bne.n	800b580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b528:	2200      	movs	r2, #0
 800b52a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f88e 	bl	800b650 <UART_WaitOnFlagUntilTimeout>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d022      	beq.n	800b580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	e853 3f00 	ldrex	r3, [r3]
 800b546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b54e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	461a      	mov	r2, r3
 800b556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b558:	647b      	str	r3, [r7, #68]	@ 0x44
 800b55a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b55e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b560:	e841 2300 	strex	r3, r2, [r1]
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e6      	bne.n	800b53a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2220      	movs	r2, #32
 800b570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e063      	b.n	800b648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0304 	and.w	r3, r3, #4
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d149      	bne.n	800b622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b58e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b596:	2200      	movs	r2, #0
 800b598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f857 	bl	800b650 <UART_WaitOnFlagUntilTimeout>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d03c      	beq.n	800b622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ce:	e841 2300 	strex	r3, r2, [r1]
 800b5d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1e6      	bne.n	800b5a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f023 0301 	bic.w	r3, r3, #1
 800b5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5fa:	61fa      	str	r2, [r7, #28]
 800b5fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fe:	69b9      	ldr	r1, [r7, #24]
 800b600:	69fa      	ldr	r2, [r7, #28]
 800b602:	e841 2300 	strex	r3, r2, [r1]
 800b606:	617b      	str	r3, [r7, #20]
   return(result);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1e5      	bne.n	800b5da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2220      	movs	r2, #32
 800b612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e012      	b.n	800b648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3758      	adds	r7, #88	@ 0x58
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b660:	e04f      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d04b      	beq.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b66a:	f7f7 fea1 	bl	80033b0 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	429a      	cmp	r2, r3
 800b678:	d302      	bcc.n	800b680 <UART_WaitOnFlagUntilTimeout+0x30>
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e04e      	b.n	800b722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d037      	beq.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b80      	cmp	r3, #128	@ 0x80
 800b696:	d034      	beq.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b40      	cmp	r3, #64	@ 0x40
 800b69c:	d031      	beq.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	f003 0308 	and.w	r3, r3, #8
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d110      	bne.n	800b6ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 f95b 	bl	800b970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2208      	movs	r2, #8
 800b6be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e029      	b.n	800b722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6dc:	d111      	bne.n	800b702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f941 	bl	800b970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e00f      	b.n	800b722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69da      	ldr	r2, [r3, #28]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4013      	ands	r3, r2
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	429a      	cmp	r2, r3
 800b710:	bf0c      	ite	eq
 800b712:	2301      	moveq	r3, #1
 800b714:	2300      	movne	r3, #0
 800b716:	b2db      	uxtb	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d0a0      	beq.n	800b662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b0a3      	sub	sp, #140	@ 0x8c
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4613      	mov	r3, r2
 800b738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	88fa      	ldrh	r2, [r7, #6]
 800b74c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b75e:	d10e      	bne.n	800b77e <UART_Start_Receive_IT+0x52>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d105      	bne.n	800b774 <UART_Start_Receive_IT+0x48>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b76e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b772:	e02d      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	22ff      	movs	r2, #255	@ 0xff
 800b778:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b77c:	e028      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10d      	bne.n	800b7a2 <UART_Start_Receive_IT+0x76>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d104      	bne.n	800b798 <UART_Start_Receive_IT+0x6c>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	22ff      	movs	r2, #255	@ 0xff
 800b792:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b796:	e01b      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	227f      	movs	r2, #127	@ 0x7f
 800b79c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7a0:	e016      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7aa:	d10d      	bne.n	800b7c8 <UART_Start_Receive_IT+0x9c>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d104      	bne.n	800b7be <UART_Start_Receive_IT+0x92>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	227f      	movs	r2, #127	@ 0x7f
 800b7b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7bc:	e008      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	223f      	movs	r2, #63	@ 0x3f
 800b7c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b7c6:	e003      	b.n	800b7d0 <UART_Start_Receive_IT+0xa4>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2222      	movs	r2, #34	@ 0x22
 800b7dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7ea:	e853 3f00 	ldrex	r3, [r3]
 800b7ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b7f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b7f2:	f043 0301 	orr.w	r3, r3, #1
 800b7f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b804:	673a      	str	r2, [r7, #112]	@ 0x70
 800b806:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b80a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e3      	bne.n	800b7e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b81c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b820:	d14f      	bne.n	800b8c2 <UART_Start_Receive_IT+0x196>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b828:	88fa      	ldrh	r2, [r7, #6]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d349      	bcc.n	800b8c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b836:	d107      	bne.n	800b848 <UART_Start_Receive_IT+0x11c>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d103      	bne.n	800b848 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4a47      	ldr	r2, [pc, #284]	@ (800b960 <UART_Start_Receive_IT+0x234>)
 800b844:	675a      	str	r2, [r3, #116]	@ 0x74
 800b846:	e002      	b.n	800b84e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4a46      	ldr	r2, [pc, #280]	@ (800b964 <UART_Start_Receive_IT+0x238>)
 800b84c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d01a      	beq.n	800b88c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b86a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b87a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b87e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e4      	bne.n	800b856 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3308      	adds	r3, #8
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b896:	e853 3f00 	ldrex	r3, [r3]
 800b89a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3308      	adds	r3, #8
 800b8aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b8ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b8ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8b4:	e841 2300 	strex	r3, r2, [r1]
 800b8b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e5      	bne.n	800b88c <UART_Start_Receive_IT+0x160>
 800b8c0:	e046      	b.n	800b950 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8ca:	d107      	bne.n	800b8dc <UART_Start_Receive_IT+0x1b0>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a24      	ldr	r2, [pc, #144]	@ (800b968 <UART_Start_Receive_IT+0x23c>)
 800b8d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b8da:	e002      	b.n	800b8e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4a23      	ldr	r2, [pc, #140]	@ (800b96c <UART_Start_Receive_IT+0x240>)
 800b8e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d019      	beq.n	800b91e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b8fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b908:	637b      	str	r3, [r7, #52]	@ 0x34
 800b90a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b90e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e6      	bne.n	800b8ea <UART_Start_Receive_IT+0x1be>
 800b91c:	e018      	b.n	800b950 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	613b      	str	r3, [r7, #16]
   return(result);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f043 0320 	orr.w	r3, r3, #32
 800b932:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	6a3a      	ldr	r2, [r7, #32]
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	61bb      	str	r3, [r7, #24]
   return(result);
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e6      	bne.n	800b91e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	378c      	adds	r7, #140	@ 0x8c
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	0800c18d 	.word	0x0800c18d
 800b964:	0800be29 	.word	0x0800be29
 800b968:	0800bc71 	.word	0x0800bc71
 800b96c:	0800bab9 	.word	0x0800bab9

0800b970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b970:	b480      	push	{r7}
 800b972:	b095      	sub	sp, #84	@ 0x54
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b980:	e853 3f00 	ldrex	r3, [r3]
 800b984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b98c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b996:	643b      	str	r3, [r7, #64]	@ 0x40
 800b998:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b99c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b99e:	e841 2300 	strex	r3, r2, [r1]
 800b9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1e6      	bne.n	800b978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	6a3b      	ldr	r3, [r7, #32]
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e3      	bne.n	800b9aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d118      	bne.n	800ba1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f023 0310 	bic.w	r3, r3, #16
 800b9fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba08:	61bb      	str	r3, [r7, #24]
 800ba0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0c:	6979      	ldr	r1, [r7, #20]
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	e841 2300 	strex	r3, r2, [r1]
 800ba14:	613b      	str	r3, [r7, #16]
   return(result);
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1e6      	bne.n	800b9ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2220      	movs	r2, #32
 800ba20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba30:	bf00      	nop
 800ba32:	3754      	adds	r7, #84	@ 0x54
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff f9ce 	bl	800adf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba58:	bf00      	nop
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	461a      	mov	r2, r3
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	61bb      	str	r3, [r7, #24]
 800ba88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	6979      	ldr	r1, [r7, #20]
 800ba8c:	69ba      	ldr	r2, [r7, #24]
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	613b      	str	r3, [r7, #16]
   return(result);
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e6      	bne.n	800ba68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff f999 	bl	800ade0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baae:	bf00      	nop
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b09c      	sub	sp, #112	@ 0x70
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bac6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bad0:	2b22      	cmp	r3, #34	@ 0x22
 800bad2:	f040 80be 	bne.w	800bc52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800badc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bae0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bae4:	b2d9      	uxtb	r1, r3
 800bae6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800baea:	b2da      	uxtb	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baf0:	400a      	ands	r2, r1
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f040 80a1 	bne.w	800bc62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb28:	e853 3f00 	ldrex	r3, [r3]
 800bb2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb46:	e841 2300 	strex	r3, r2, [r1]
 800bb4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1e6      	bne.n	800bb20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3308      	adds	r3, #8
 800bb58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	e853 3f00 	ldrex	r3, [r3]
 800bb60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb64:	f023 0301 	bic.w	r3, r3, #1
 800bb68:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bb72:	647a      	str	r2, [r7, #68]	@ 0x44
 800bb74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e5      	bne.n	800bb52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a33      	ldr	r2, [pc, #204]	@ (800bc6c <UART_RxISR_8BIT+0x1b4>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d01f      	beq.n	800bbe4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d018      	beq.n	800bbe4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	623b      	str	r3, [r7, #32]
   return(result);
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bbc6:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e6      	bne.n	800bbb2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d12e      	bne.n	800bc4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0310 	bic.w	r3, r3, #16
 800bc06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc10:	61fb      	str	r3, [r7, #28]
 800bc12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	69b9      	ldr	r1, [r7, #24]
 800bc16:	69fa      	ldr	r2, [r7, #28]
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	617b      	str	r3, [r7, #20]
   return(result);
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e6      	bne.n	800bbf2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	2b10      	cmp	r3, #16
 800bc30:	d103      	bne.n	800bc3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2210      	movs	r2, #16
 800bc38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff f8e0 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc48:	e00b      	b.n	800bc62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7f6 f9d2 	bl	8001ff4 <HAL_UART_RxCpltCallback>
}
 800bc50:	e007      	b.n	800bc62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	699a      	ldr	r2, [r3, #24]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f042 0208 	orr.w	r2, r2, #8
 800bc60:	619a      	str	r2, [r3, #24]
}
 800bc62:	bf00      	nop
 800bc64:	3770      	adds	r7, #112	@ 0x70
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40008000 	.word	0x40008000

0800bc70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b09c      	sub	sp, #112	@ 0x70
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc88:	2b22      	cmp	r3, #34	@ 0x22
 800bc8a:	f040 80be 	bne.w	800be0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800bca2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bca6:	4013      	ands	r3, r2
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bcac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcb2:	1c9a      	adds	r2, r3, #2
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 80a1 	bne.w	800be1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcec:	667b      	str	r3, [r7, #100]	@ 0x64
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcf8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bcfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e6      	bne.n	800bcd8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3308      	adds	r3, #8
 800bd28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd2a:	643a      	str	r2, [r7, #64]	@ 0x40
 800bd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd32:	e841 2300 	strex	r3, r2, [r1]
 800bd36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e5      	bne.n	800bd0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a33      	ldr	r2, [pc, #204]	@ (800be24 <UART_RxISR_16BIT+0x1b4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d01f      	beq.n	800bd9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d018      	beq.n	800bd9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd90:	e841 2300 	strex	r3, r2, [r1]
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1e6      	bne.n	800bd6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d12e      	bne.n	800be02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f023 0310 	bic.w	r3, r3, #16
 800bdbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdc8:	61bb      	str	r3, [r7, #24]
 800bdca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6979      	ldr	r1, [r7, #20]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e6      	bne.n	800bdaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	69db      	ldr	r3, [r3, #28]
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	2b10      	cmp	r3, #16
 800bde8:	d103      	bne.n	800bdf2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2210      	movs	r2, #16
 800bdf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff f804 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be00:	e00b      	b.n	800be1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7f6 f8f6 	bl	8001ff4 <HAL_UART_RxCpltCallback>
}
 800be08:	e007      	b.n	800be1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	699a      	ldr	r2, [r3, #24]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f042 0208 	orr.w	r2, r2, #8
 800be18:	619a      	str	r2, [r3, #24]
}
 800be1a:	bf00      	nop
 800be1c:	3770      	adds	r7, #112	@ 0x70
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	40008000 	.word	0x40008000

0800be28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b0ac      	sub	sp, #176	@ 0xb0
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be36:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	69db      	ldr	r3, [r3, #28]
 800be40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be5e:	2b22      	cmp	r3, #34	@ 0x22
 800be60:	f040 8183 	bne.w	800c16a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be6a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be6e:	e126      	b.n	800c0be <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be76:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800be7e:	b2d9      	uxtb	r1, r3
 800be80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800be84:	b2da      	uxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be8a:	400a      	ands	r2, r1
 800be8c:	b2d2      	uxtb	r2, r2
 800be8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	69db      	ldr	r3, [r3, #28]
 800beb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800beb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d053      	beq.n	800bf6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d011      	beq.n	800bef2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800bece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2201      	movs	r2, #1
 800bee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bee8:	f043 0201 	orr.w	r2, r3, #1
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d011      	beq.n	800bf22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800befe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00b      	beq.n	800bf22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2202      	movs	r2, #2
 800bf10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf18:	f043 0204 	orr.w	r2, r3, #4
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf26:	f003 0304 	and.w	r3, r3, #4
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d011      	beq.n	800bf52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bf2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00b      	beq.n	800bf52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2204      	movs	r2, #4
 800bf40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf48:	f043 0202 	orr.w	r2, r3, #2
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7fe ff49 	bl	800adf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f040 80a3 	bne.w	800c0be <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800bf86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf9c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800bfa0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bfa2:	e841 2300 	strex	r3, r2, [r1]
 800bfa6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800bfa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1e4      	bne.n	800bf78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800bfbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bfc4:	f023 0301 	bic.w	r3, r3, #1
 800bfc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bfd6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800bfd8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfda:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bfdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfde:	e841 2300 	strex	r3, r2, [r1]
 800bfe2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bfe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e1      	bne.n	800bfae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a60      	ldr	r2, [pc, #384]	@ (800c184 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d021      	beq.n	800c04c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01a      	beq.n	800c04c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c02a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c038:	657b      	str	r3, [r7, #84]	@ 0x54
 800c03a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c03e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e4      	bne.n	800c016 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c050:	2b01      	cmp	r3, #1
 800c052:	d130      	bne.n	800c0b6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c062:	e853 3f00 	ldrex	r3, [r3]
 800c066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06a:	f023 0310 	bic.w	r3, r3, #16
 800c06e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c07c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c07e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e4      	bne.n	800c05a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	f003 0310 	and.w	r3, r3, #16
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d103      	bne.n	800c0a6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7fe feaa 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c0b4:	e00e      	b.n	800c0d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7f5 ff9c 	bl	8001ff4 <HAL_UART_RxCpltCallback>
        break;
 800c0bc:	e00a      	b.n	800c0d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d006      	beq.n	800c0d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800c0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0ca:	f003 0320 	and.w	r3, r3, #32
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f47f aece 	bne.w	800be70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d049      	beq.n	800c17a <UART_RxISR_8BIT_FIFOEN+0x352>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0ec:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d242      	bcs.n	800c17a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	e853 3f00 	ldrex	r3, [r3]
 800c102:	61fb      	str	r3, [r7, #28]
   return(result);
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c10a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e3      	bne.n	800c0f4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a16      	ldr	r2, [pc, #88]	@ (800c188 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c130:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f043 0320 	orr.w	r3, r3, #32
 800c146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e4      	bne.n	800c132 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c168:	e007      	b.n	800c17a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	699a      	ldr	r2, [r3, #24]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f042 0208 	orr.w	r2, r2, #8
 800c178:	619a      	str	r2, [r3, #24]
}
 800c17a:	bf00      	nop
 800c17c:	37b0      	adds	r7, #176	@ 0xb0
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	40008000 	.word	0x40008000
 800c188:	0800bab9 	.word	0x0800bab9

0800c18c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b0ae      	sub	sp, #184	@ 0xb8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c19a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1c2:	2b22      	cmp	r3, #34	@ 0x22
 800c1c4:	f040 8187 	bne.w	800c4d6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c1ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1d2:	e12a      	b.n	800c42a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c1e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c1ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c1f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1fc:	1c9a      	adds	r2, r3, #2
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c208:	b29b      	uxth	r3, r3
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c21e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	2b00      	cmp	r3, #0
 800c228:	d053      	beq.n	800c2d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c22a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d011      	beq.n	800c25a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c23a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00b      	beq.n	800c25a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2201      	movs	r2, #1
 800c248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c250:	f043 0201 	orr.w	r2, r3, #1
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c25a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d011      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2202      	movs	r2, #2
 800c278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c280:	f043 0204 	orr.w	r2, r3, #4
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c28a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c28e:	f003 0304 	and.w	r3, r3, #4
 800c292:	2b00      	cmp	r3, #0
 800c294:	d011      	beq.n	800c2ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00b      	beq.n	800c2ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2204      	movs	r2, #4
 800c2a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b0:	f043 0202 	orr.w	r2, r3, #2
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fe fd95 	bl	800adf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f040 80a5 	bne.w	800c42a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2e8:	e853 3f00 	ldrex	r3, [r3]
 800c2ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c2ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c302:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c306:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c30a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e2      	bne.n	800c2e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	3308      	adds	r3, #8
 800c320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c32a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c32c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c330:	f023 0301 	bic.w	r3, r3, #1
 800c334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3308      	adds	r3, #8
 800c33e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c342:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c344:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e1      	bne.n	800c31a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2220      	movs	r2, #32
 800c35a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a60      	ldr	r2, [pc, #384]	@ (800c4f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d021      	beq.n	800c3b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d01a      	beq.n	800c3b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c3a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e4      	bne.n	800c382 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d130      	bne.n	800c422 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ce:	e853 3f00 	ldrex	r3, [r3]
 800c3d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d6:	f023 0310 	bic.w	r3, r3, #16
 800c3da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e4      	bne.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	69db      	ldr	r3, [r3, #28]
 800c402:	f003 0310 	and.w	r3, r3, #16
 800c406:	2b10      	cmp	r3, #16
 800c408:	d103      	bne.n	800c412 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2210      	movs	r2, #16
 800c410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fe fcf4 	bl	800ae08 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c420:	e00e      	b.n	800c440 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7f5 fde6 	bl	8001ff4 <HAL_UART_RxCpltCallback>
        break;
 800c428:	e00a      	b.n	800c440 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c42a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d006      	beq.n	800c440 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c436:	f003 0320 	and.w	r3, r3, #32
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f47f aeca 	bne.w	800c1d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c446:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c44a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d049      	beq.n	800c4e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c458:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d242      	bcs.n	800c4e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	623b      	str	r3, [r7, #32]
   return(result);
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3308      	adds	r3, #8
 800c480:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c484:	633a      	str	r2, [r7, #48]	@ 0x30
 800c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e3      	bne.n	800c460 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a16      	ldr	r2, [pc, #88]	@ (800c4f4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c49c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f043 0320 	orr.w	r3, r3, #32
 800c4b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	69b9      	ldr	r1, [r7, #24]
 800c4c6:	69fa      	ldr	r2, [r7, #28]
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e4      	bne.n	800c49e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4d4:	e007      	b.n	800c4e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	699a      	ldr	r2, [r3, #24]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0208 	orr.w	r2, r2, #8
 800c4e4:	619a      	str	r2, [r3, #24]
}
 800c4e6:	bf00      	nop
 800c4e8:	37b8      	adds	r7, #184	@ 0xb8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	40008000 	.word	0x40008000
 800c4f4:	0800bc71 	.word	0x0800bc71

0800c4f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c542:	2b01      	cmp	r3, #1
 800c544:	d101      	bne.n	800c54a <HAL_UARTEx_DisableFifoMode+0x16>
 800c546:	2302      	movs	r3, #2
 800c548:	e027      	b.n	800c59a <HAL_UARTEx_DisableFifoMode+0x66>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2224      	movs	r2, #36	@ 0x24
 800c556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0201 	bic.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c578:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e02d      	b.n	800c61a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2224      	movs	r2, #36	@ 0x24
 800c5ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f022 0201 	bic.w	r2, r2, #1
 800c5e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f850 	bl	800c6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c632:	2b01      	cmp	r3, #1
 800c634:	d101      	bne.n	800c63a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c636:	2302      	movs	r3, #2
 800c638:	e02d      	b.n	800c696 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2201      	movs	r2, #1
 800c63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2224      	movs	r2, #36	@ 0x24
 800c646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f022 0201 	bic.w	r2, r2, #1
 800c660:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	683a      	ldr	r2, [r7, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f812 	bl	800c6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2220      	movs	r2, #32
 800c688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d108      	bne.n	800c6c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6c0:	e031      	b.n	800c726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	0e5b      	lsrs	r3, r3, #25
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0307 	and.w	r3, r3, #7
 800c6d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	0f5b      	lsrs	r3, r3, #29
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f003 0307 	and.w	r3, r3, #7
 800c6e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	7b3a      	ldrb	r2, [r7, #12]
 800c6ee:	4911      	ldr	r1, [pc, #68]	@ (800c734 <UARTEx_SetNbDataToProcess+0x94>)
 800c6f0:	5c8a      	ldrb	r2, [r1, r2]
 800c6f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6f6:	7b3a      	ldrb	r2, [r7, #12]
 800c6f8:	490f      	ldr	r1, [pc, #60]	@ (800c738 <UARTEx_SetNbDataToProcess+0x98>)
 800c6fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	7b7a      	ldrb	r2, [r7, #13]
 800c70c:	4909      	ldr	r1, [pc, #36]	@ (800c734 <UARTEx_SetNbDataToProcess+0x94>)
 800c70e:	5c8a      	ldrb	r2, [r1, r2]
 800c710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c714:	7b7a      	ldrb	r2, [r7, #13]
 800c716:	4908      	ldr	r1, [pc, #32]	@ (800c738 <UARTEx_SetNbDataToProcess+0x98>)
 800c718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c71a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c71e:	b29a      	uxth	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	08011b20 	.word	0x08011b20
 800c738:	08011b28 	.word	0x08011b28

0800c73c <sulp>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	ec45 4b10 	vmov	d0, r4, r5
 800c746:	4616      	mov	r6, r2
 800c748:	f003 fa86 	bl	800fc58 <__ulp>
 800c74c:	ec51 0b10 	vmov	r0, r1, d0
 800c750:	b17e      	cbz	r6, 800c772 <sulp+0x36>
 800c752:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c756:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	dd09      	ble.n	800c772 <sulp+0x36>
 800c75e:	051b      	lsls	r3, r3, #20
 800c760:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c764:	2400      	movs	r4, #0
 800c766:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c76a:	4622      	mov	r2, r4
 800c76c:	462b      	mov	r3, r5
 800c76e:	f7f3 ff6b 	bl	8000648 <__aeabi_dmul>
 800c772:	ec41 0b10 	vmov	d0, r0, r1
 800c776:	bd70      	pop	{r4, r5, r6, pc}

0800c778 <_strtod_l>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	b09f      	sub	sp, #124	@ 0x7c
 800c77e:	460c      	mov	r4, r1
 800c780:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c782:	2200      	movs	r2, #0
 800c784:	921a      	str	r2, [sp, #104]	@ 0x68
 800c786:	9005      	str	r0, [sp, #20]
 800c788:	f04f 0a00 	mov.w	sl, #0
 800c78c:	f04f 0b00 	mov.w	fp, #0
 800c790:	460a      	mov	r2, r1
 800c792:	9219      	str	r2, [sp, #100]	@ 0x64
 800c794:	7811      	ldrb	r1, [r2, #0]
 800c796:	292b      	cmp	r1, #43	@ 0x2b
 800c798:	d04a      	beq.n	800c830 <_strtod_l+0xb8>
 800c79a:	d838      	bhi.n	800c80e <_strtod_l+0x96>
 800c79c:	290d      	cmp	r1, #13
 800c79e:	d832      	bhi.n	800c806 <_strtod_l+0x8e>
 800c7a0:	2908      	cmp	r1, #8
 800c7a2:	d832      	bhi.n	800c80a <_strtod_l+0x92>
 800c7a4:	2900      	cmp	r1, #0
 800c7a6:	d03b      	beq.n	800c820 <_strtod_l+0xa8>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c7ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c7ae:	782a      	ldrb	r2, [r5, #0]
 800c7b0:	2a30      	cmp	r2, #48	@ 0x30
 800c7b2:	f040 80b3 	bne.w	800c91c <_strtod_l+0x1a4>
 800c7b6:	786a      	ldrb	r2, [r5, #1]
 800c7b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c7bc:	2a58      	cmp	r2, #88	@ 0x58
 800c7be:	d16e      	bne.n	800c89e <_strtod_l+0x126>
 800c7c0:	9302      	str	r3, [sp, #8]
 800c7c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	4a8e      	ldr	r2, [pc, #568]	@ (800ca04 <_strtod_l+0x28c>)
 800c7cc:	9805      	ldr	r0, [sp, #20]
 800c7ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c7d0:	a919      	add	r1, sp, #100	@ 0x64
 800c7d2:	f002 fb33 	bl	800ee3c <__gethex>
 800c7d6:	f010 060f 	ands.w	r6, r0, #15
 800c7da:	4604      	mov	r4, r0
 800c7dc:	d005      	beq.n	800c7ea <_strtod_l+0x72>
 800c7de:	2e06      	cmp	r6, #6
 800c7e0:	d128      	bne.n	800c834 <_strtod_l+0xbc>
 800c7e2:	3501      	adds	r5, #1
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c7e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 858e 	bne.w	800d30e <_strtod_l+0xb96>
 800c7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f4:	b1cb      	cbz	r3, 800c82a <_strtod_l+0xb2>
 800c7f6:	4652      	mov	r2, sl
 800c7f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c7fc:	ec43 2b10 	vmov	d0, r2, r3
 800c800:	b01f      	add	sp, #124	@ 0x7c
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c806:	2920      	cmp	r1, #32
 800c808:	d1ce      	bne.n	800c7a8 <_strtod_l+0x30>
 800c80a:	3201      	adds	r2, #1
 800c80c:	e7c1      	b.n	800c792 <_strtod_l+0x1a>
 800c80e:	292d      	cmp	r1, #45	@ 0x2d
 800c810:	d1ca      	bne.n	800c7a8 <_strtod_l+0x30>
 800c812:	2101      	movs	r1, #1
 800c814:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c816:	1c51      	adds	r1, r2, #1
 800c818:	9119      	str	r1, [sp, #100]	@ 0x64
 800c81a:	7852      	ldrb	r2, [r2, #1]
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	d1c5      	bne.n	800c7ac <_strtod_l+0x34>
 800c820:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c822:	9419      	str	r4, [sp, #100]	@ 0x64
 800c824:	2b00      	cmp	r3, #0
 800c826:	f040 8570 	bne.w	800d30a <_strtod_l+0xb92>
 800c82a:	4652      	mov	r2, sl
 800c82c:	465b      	mov	r3, fp
 800c82e:	e7e5      	b.n	800c7fc <_strtod_l+0x84>
 800c830:	2100      	movs	r1, #0
 800c832:	e7ef      	b.n	800c814 <_strtod_l+0x9c>
 800c834:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c836:	b13a      	cbz	r2, 800c848 <_strtod_l+0xd0>
 800c838:	2135      	movs	r1, #53	@ 0x35
 800c83a:	a81c      	add	r0, sp, #112	@ 0x70
 800c83c:	f003 fb06 	bl	800fe4c <__copybits>
 800c840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c842:	9805      	ldr	r0, [sp, #20]
 800c844:	f002 fed4 	bl	800f5f0 <_Bfree>
 800c848:	3e01      	subs	r6, #1
 800c84a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c84c:	2e04      	cmp	r6, #4
 800c84e:	d806      	bhi.n	800c85e <_strtod_l+0xe6>
 800c850:	e8df f006 	tbb	[pc, r6]
 800c854:	201d0314 	.word	0x201d0314
 800c858:	14          	.byte	0x14
 800c859:	00          	.byte	0x00
 800c85a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c85e:	05e1      	lsls	r1, r4, #23
 800c860:	bf48      	it	mi
 800c862:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c866:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c86a:	0d1b      	lsrs	r3, r3, #20
 800c86c:	051b      	lsls	r3, r3, #20
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1bb      	bne.n	800c7ea <_strtod_l+0x72>
 800c872:	f001 fb97 	bl	800dfa4 <__errno>
 800c876:	2322      	movs	r3, #34	@ 0x22
 800c878:	6003      	str	r3, [r0, #0]
 800c87a:	e7b6      	b.n	800c7ea <_strtod_l+0x72>
 800c87c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c880:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c884:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c888:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c88c:	e7e7      	b.n	800c85e <_strtod_l+0xe6>
 800c88e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ca0c <_strtod_l+0x294>
 800c892:	e7e4      	b.n	800c85e <_strtod_l+0xe6>
 800c894:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c898:	f04f 3aff 	mov.w	sl, #4294967295
 800c89c:	e7df      	b.n	800c85e <_strtod_l+0xe6>
 800c89e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8a4:	785b      	ldrb	r3, [r3, #1]
 800c8a6:	2b30      	cmp	r3, #48	@ 0x30
 800c8a8:	d0f9      	beq.n	800c89e <_strtod_l+0x126>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d09d      	beq.n	800c7ea <_strtod_l+0x72>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9308      	str	r3, [sp, #32]
 800c8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8bc:	461f      	mov	r7, r3
 800c8be:	220a      	movs	r2, #10
 800c8c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c8c2:	7805      	ldrb	r5, [r0, #0]
 800c8c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c8c8:	b2d9      	uxtb	r1, r3
 800c8ca:	2909      	cmp	r1, #9
 800c8cc:	d928      	bls.n	800c920 <_strtod_l+0x1a8>
 800c8ce:	494e      	ldr	r1, [pc, #312]	@ (800ca08 <_strtod_l+0x290>)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f001 fb0b 	bl	800deec <strncmp>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d032      	beq.n	800c940 <_strtod_l+0x1c8>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4681      	mov	r9, r0
 800c8e0:	463d      	mov	r5, r7
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2a65      	cmp	r2, #101	@ 0x65
 800c8e6:	d001      	beq.n	800c8ec <_strtod_l+0x174>
 800c8e8:	2a45      	cmp	r2, #69	@ 0x45
 800c8ea:	d114      	bne.n	800c916 <_strtod_l+0x19e>
 800c8ec:	b91d      	cbnz	r5, 800c8f6 <_strtod_l+0x17e>
 800c8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8f0:	4302      	orrs	r2, r0
 800c8f2:	d095      	beq.n	800c820 <_strtod_l+0xa8>
 800c8f4:	2500      	movs	r5, #0
 800c8f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c8f8:	1c62      	adds	r2, r4, #1
 800c8fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8fc:	7862      	ldrb	r2, [r4, #1]
 800c8fe:	2a2b      	cmp	r2, #43	@ 0x2b
 800c900:	d077      	beq.n	800c9f2 <_strtod_l+0x27a>
 800c902:	2a2d      	cmp	r2, #45	@ 0x2d
 800c904:	d07b      	beq.n	800c9fe <_strtod_l+0x286>
 800c906:	f04f 0c00 	mov.w	ip, #0
 800c90a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c90e:	2909      	cmp	r1, #9
 800c910:	f240 8082 	bls.w	800ca18 <_strtod_l+0x2a0>
 800c914:	9419      	str	r4, [sp, #100]	@ 0x64
 800c916:	f04f 0800 	mov.w	r8, #0
 800c91a:	e0a2      	b.n	800ca62 <_strtod_l+0x2ea>
 800c91c:	2300      	movs	r3, #0
 800c91e:	e7c7      	b.n	800c8b0 <_strtod_l+0x138>
 800c920:	2f08      	cmp	r7, #8
 800c922:	bfd5      	itete	le
 800c924:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c926:	9908      	ldrgt	r1, [sp, #32]
 800c928:	fb02 3301 	mlale	r3, r2, r1, r3
 800c92c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c930:	f100 0001 	add.w	r0, r0, #1
 800c934:	bfd4      	ite	le
 800c936:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c938:	9308      	strgt	r3, [sp, #32]
 800c93a:	3701      	adds	r7, #1
 800c93c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c93e:	e7bf      	b.n	800c8c0 <_strtod_l+0x148>
 800c940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	9219      	str	r2, [sp, #100]	@ 0x64
 800c946:	785a      	ldrb	r2, [r3, #1]
 800c948:	b37f      	cbz	r7, 800c9aa <_strtod_l+0x232>
 800c94a:	4681      	mov	r9, r0
 800c94c:	463d      	mov	r5, r7
 800c94e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c952:	2b09      	cmp	r3, #9
 800c954:	d912      	bls.n	800c97c <_strtod_l+0x204>
 800c956:	2301      	movs	r3, #1
 800c958:	e7c4      	b.n	800c8e4 <_strtod_l+0x16c>
 800c95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c960:	785a      	ldrb	r2, [r3, #1]
 800c962:	3001      	adds	r0, #1
 800c964:	2a30      	cmp	r2, #48	@ 0x30
 800c966:	d0f8      	beq.n	800c95a <_strtod_l+0x1e2>
 800c968:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	f200 84d3 	bhi.w	800d318 <_strtod_l+0xba0>
 800c972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c974:	930c      	str	r3, [sp, #48]	@ 0x30
 800c976:	4681      	mov	r9, r0
 800c978:	2000      	movs	r0, #0
 800c97a:	4605      	mov	r5, r0
 800c97c:	3a30      	subs	r2, #48	@ 0x30
 800c97e:	f100 0301 	add.w	r3, r0, #1
 800c982:	d02a      	beq.n	800c9da <_strtod_l+0x262>
 800c984:	4499      	add	r9, r3
 800c986:	eb00 0c05 	add.w	ip, r0, r5
 800c98a:	462b      	mov	r3, r5
 800c98c:	210a      	movs	r1, #10
 800c98e:	4563      	cmp	r3, ip
 800c990:	d10d      	bne.n	800c9ae <_strtod_l+0x236>
 800c992:	1c69      	adds	r1, r5, #1
 800c994:	4401      	add	r1, r0
 800c996:	4428      	add	r0, r5
 800c998:	2808      	cmp	r0, #8
 800c99a:	dc16      	bgt.n	800c9ca <_strtod_l+0x252>
 800c99c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c99e:	230a      	movs	r3, #10
 800c9a0:	fb03 2300 	mla	r3, r3, r0, r2
 800c9a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e018      	b.n	800c9dc <_strtod_l+0x264>
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	e7da      	b.n	800c964 <_strtod_l+0x1ec>
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	f103 0301 	add.w	r3, r3, #1
 800c9b4:	dc03      	bgt.n	800c9be <_strtod_l+0x246>
 800c9b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c9b8:	434e      	muls	r6, r1
 800c9ba:	960a      	str	r6, [sp, #40]	@ 0x28
 800c9bc:	e7e7      	b.n	800c98e <_strtod_l+0x216>
 800c9be:	2b10      	cmp	r3, #16
 800c9c0:	bfde      	ittt	le
 800c9c2:	9e08      	ldrle	r6, [sp, #32]
 800c9c4:	434e      	mulle	r6, r1
 800c9c6:	9608      	strle	r6, [sp, #32]
 800c9c8:	e7e1      	b.n	800c98e <_strtod_l+0x216>
 800c9ca:	280f      	cmp	r0, #15
 800c9cc:	dceb      	bgt.n	800c9a6 <_strtod_l+0x22e>
 800c9ce:	9808      	ldr	r0, [sp, #32]
 800c9d0:	230a      	movs	r3, #10
 800c9d2:	fb03 2300 	mla	r3, r3, r0, r2
 800c9d6:	9308      	str	r3, [sp, #32]
 800c9d8:	e7e5      	b.n	800c9a6 <_strtod_l+0x22e>
 800c9da:	4629      	mov	r1, r5
 800c9dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9de:	1c50      	adds	r0, r2, #1
 800c9e0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c9e2:	7852      	ldrb	r2, [r2, #1]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	e7b1      	b.n	800c94e <_strtod_l+0x1d6>
 800c9ea:	f04f 0900 	mov.w	r9, #0
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e77d      	b.n	800c8ee <_strtod_l+0x176>
 800c9f2:	f04f 0c00 	mov.w	ip, #0
 800c9f6:	1ca2      	adds	r2, r4, #2
 800c9f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9fa:	78a2      	ldrb	r2, [r4, #2]
 800c9fc:	e785      	b.n	800c90a <_strtod_l+0x192>
 800c9fe:	f04f 0c01 	mov.w	ip, #1
 800ca02:	e7f8      	b.n	800c9f6 <_strtod_l+0x27e>
 800ca04:	08011b48 	.word	0x08011b48
 800ca08:	08011b30 	.word	0x08011b30
 800ca0c:	7ff00000 	.word	0x7ff00000
 800ca10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca12:	1c51      	adds	r1, r2, #1
 800ca14:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca16:	7852      	ldrb	r2, [r2, #1]
 800ca18:	2a30      	cmp	r2, #48	@ 0x30
 800ca1a:	d0f9      	beq.n	800ca10 <_strtod_l+0x298>
 800ca1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ca20:	2908      	cmp	r1, #8
 800ca22:	f63f af78 	bhi.w	800c916 <_strtod_l+0x19e>
 800ca26:	3a30      	subs	r2, #48	@ 0x30
 800ca28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca2e:	f04f 080a 	mov.w	r8, #10
 800ca32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca34:	1c56      	adds	r6, r2, #1
 800ca36:	9619      	str	r6, [sp, #100]	@ 0x64
 800ca38:	7852      	ldrb	r2, [r2, #1]
 800ca3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ca3e:	f1be 0f09 	cmp.w	lr, #9
 800ca42:	d939      	bls.n	800cab8 <_strtod_l+0x340>
 800ca44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca46:	1a76      	subs	r6, r6, r1
 800ca48:	2e08      	cmp	r6, #8
 800ca4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ca4e:	dc03      	bgt.n	800ca58 <_strtod_l+0x2e0>
 800ca50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ca52:	4588      	cmp	r8, r1
 800ca54:	bfa8      	it	ge
 800ca56:	4688      	movge	r8, r1
 800ca58:	f1bc 0f00 	cmp.w	ip, #0
 800ca5c:	d001      	beq.n	800ca62 <_strtod_l+0x2ea>
 800ca5e:	f1c8 0800 	rsb	r8, r8, #0
 800ca62:	2d00      	cmp	r5, #0
 800ca64:	d14e      	bne.n	800cb04 <_strtod_l+0x38c>
 800ca66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca68:	4308      	orrs	r0, r1
 800ca6a:	f47f aebe 	bne.w	800c7ea <_strtod_l+0x72>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f47f aed6 	bne.w	800c820 <_strtod_l+0xa8>
 800ca74:	2a69      	cmp	r2, #105	@ 0x69
 800ca76:	d028      	beq.n	800caca <_strtod_l+0x352>
 800ca78:	dc25      	bgt.n	800cac6 <_strtod_l+0x34e>
 800ca7a:	2a49      	cmp	r2, #73	@ 0x49
 800ca7c:	d025      	beq.n	800caca <_strtod_l+0x352>
 800ca7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ca80:	f47f aece 	bne.w	800c820 <_strtod_l+0xa8>
 800ca84:	499b      	ldr	r1, [pc, #620]	@ (800ccf4 <_strtod_l+0x57c>)
 800ca86:	a819      	add	r0, sp, #100	@ 0x64
 800ca88:	f002 fbfa 	bl	800f280 <__match>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	f43f aec7 	beq.w	800c820 <_strtod_l+0xa8>
 800ca92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b28      	cmp	r3, #40	@ 0x28
 800ca98:	d12e      	bne.n	800caf8 <_strtod_l+0x380>
 800ca9a:	4997      	ldr	r1, [pc, #604]	@ (800ccf8 <_strtod_l+0x580>)
 800ca9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca9e:	a819      	add	r0, sp, #100	@ 0x64
 800caa0:	f002 fc02 	bl	800f2a8 <__hexnan>
 800caa4:	2805      	cmp	r0, #5
 800caa6:	d127      	bne.n	800caf8 <_strtod_l+0x380>
 800caa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800caaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800caae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cab2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cab6:	e698      	b.n	800c7ea <_strtod_l+0x72>
 800cab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800caba:	fb08 2101 	mla	r1, r8, r1, r2
 800cabe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cac2:	920e      	str	r2, [sp, #56]	@ 0x38
 800cac4:	e7b5      	b.n	800ca32 <_strtod_l+0x2ba>
 800cac6:	2a6e      	cmp	r2, #110	@ 0x6e
 800cac8:	e7da      	b.n	800ca80 <_strtod_l+0x308>
 800caca:	498c      	ldr	r1, [pc, #560]	@ (800ccfc <_strtod_l+0x584>)
 800cacc:	a819      	add	r0, sp, #100	@ 0x64
 800cace:	f002 fbd7 	bl	800f280 <__match>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	f43f aea4 	beq.w	800c820 <_strtod_l+0xa8>
 800cad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cada:	4989      	ldr	r1, [pc, #548]	@ (800cd00 <_strtod_l+0x588>)
 800cadc:	3b01      	subs	r3, #1
 800cade:	a819      	add	r0, sp, #100	@ 0x64
 800cae0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cae2:	f002 fbcd 	bl	800f280 <__match>
 800cae6:	b910      	cbnz	r0, 800caee <_strtod_l+0x376>
 800cae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caea:	3301      	adds	r3, #1
 800caec:	9319      	str	r3, [sp, #100]	@ 0x64
 800caee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cd10 <_strtod_l+0x598>
 800caf2:	f04f 0a00 	mov.w	sl, #0
 800caf6:	e678      	b.n	800c7ea <_strtod_l+0x72>
 800caf8:	4882      	ldr	r0, [pc, #520]	@ (800cd04 <_strtod_l+0x58c>)
 800cafa:	f001 fa91 	bl	800e020 <nan>
 800cafe:	ec5b ab10 	vmov	sl, fp, d0
 800cb02:	e672      	b.n	800c7ea <_strtod_l+0x72>
 800cb04:	eba8 0309 	sub.w	r3, r8, r9
 800cb08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	bf08      	it	eq
 800cb10:	462f      	moveq	r7, r5
 800cb12:	2d10      	cmp	r5, #16
 800cb14:	462c      	mov	r4, r5
 800cb16:	bfa8      	it	ge
 800cb18:	2410      	movge	r4, #16
 800cb1a:	f7f3 fd1b 	bl	8000554 <__aeabi_ui2d>
 800cb1e:	2d09      	cmp	r5, #9
 800cb20:	4682      	mov	sl, r0
 800cb22:	468b      	mov	fp, r1
 800cb24:	dc13      	bgt.n	800cb4e <_strtod_l+0x3d6>
 800cb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f43f ae5e 	beq.w	800c7ea <_strtod_l+0x72>
 800cb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb30:	dd78      	ble.n	800cc24 <_strtod_l+0x4ac>
 800cb32:	2b16      	cmp	r3, #22
 800cb34:	dc5f      	bgt.n	800cbf6 <_strtod_l+0x47e>
 800cb36:	4974      	ldr	r1, [pc, #464]	@ (800cd08 <_strtod_l+0x590>)
 800cb38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb40:	4652      	mov	r2, sl
 800cb42:	465b      	mov	r3, fp
 800cb44:	f7f3 fd80 	bl	8000648 <__aeabi_dmul>
 800cb48:	4682      	mov	sl, r0
 800cb4a:	468b      	mov	fp, r1
 800cb4c:	e64d      	b.n	800c7ea <_strtod_l+0x72>
 800cb4e:	4b6e      	ldr	r3, [pc, #440]	@ (800cd08 <_strtod_l+0x590>)
 800cb50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cb58:	f7f3 fd76 	bl	8000648 <__aeabi_dmul>
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	9808      	ldr	r0, [sp, #32]
 800cb60:	468b      	mov	fp, r1
 800cb62:	f7f3 fcf7 	bl	8000554 <__aeabi_ui2d>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	4659      	mov	r1, fp
 800cb6e:	f7f3 fbb5 	bl	80002dc <__adddf3>
 800cb72:	2d0f      	cmp	r5, #15
 800cb74:	4682      	mov	sl, r0
 800cb76:	468b      	mov	fp, r1
 800cb78:	ddd5      	ble.n	800cb26 <_strtod_l+0x3ae>
 800cb7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7c:	1b2c      	subs	r4, r5, r4
 800cb7e:	441c      	add	r4, r3
 800cb80:	2c00      	cmp	r4, #0
 800cb82:	f340 8096 	ble.w	800ccb2 <_strtod_l+0x53a>
 800cb86:	f014 030f 	ands.w	r3, r4, #15
 800cb8a:	d00a      	beq.n	800cba2 <_strtod_l+0x42a>
 800cb8c:	495e      	ldr	r1, [pc, #376]	@ (800cd08 <_strtod_l+0x590>)
 800cb8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb92:	4652      	mov	r2, sl
 800cb94:	465b      	mov	r3, fp
 800cb96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb9a:	f7f3 fd55 	bl	8000648 <__aeabi_dmul>
 800cb9e:	4682      	mov	sl, r0
 800cba0:	468b      	mov	fp, r1
 800cba2:	f034 040f 	bics.w	r4, r4, #15
 800cba6:	d073      	beq.n	800cc90 <_strtod_l+0x518>
 800cba8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cbac:	dd48      	ble.n	800cc40 <_strtod_l+0x4c8>
 800cbae:	2400      	movs	r4, #0
 800cbb0:	46a0      	mov	r8, r4
 800cbb2:	940a      	str	r4, [sp, #40]	@ 0x28
 800cbb4:	46a1      	mov	r9, r4
 800cbb6:	9a05      	ldr	r2, [sp, #20]
 800cbb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cd10 <_strtod_l+0x598>
 800cbbc:	2322      	movs	r3, #34	@ 0x22
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	f04f 0a00 	mov.w	sl, #0
 800cbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f43f ae0f 	beq.w	800c7ea <_strtod_l+0x72>
 800cbcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbce:	9805      	ldr	r0, [sp, #20]
 800cbd0:	f002 fd0e 	bl	800f5f0 <_Bfree>
 800cbd4:	9805      	ldr	r0, [sp, #20]
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	f002 fd0a 	bl	800f5f0 <_Bfree>
 800cbdc:	9805      	ldr	r0, [sp, #20]
 800cbde:	4641      	mov	r1, r8
 800cbe0:	f002 fd06 	bl	800f5f0 <_Bfree>
 800cbe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cbe6:	9805      	ldr	r0, [sp, #20]
 800cbe8:	f002 fd02 	bl	800f5f0 <_Bfree>
 800cbec:	9805      	ldr	r0, [sp, #20]
 800cbee:	4621      	mov	r1, r4
 800cbf0:	f002 fcfe 	bl	800f5f0 <_Bfree>
 800cbf4:	e5f9      	b.n	800c7ea <_strtod_l+0x72>
 800cbf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	dbbc      	blt.n	800cb7a <_strtod_l+0x402>
 800cc00:	4c41      	ldr	r4, [pc, #260]	@ (800cd08 <_strtod_l+0x590>)
 800cc02:	f1c5 050f 	rsb	r5, r5, #15
 800cc06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc0a:	4652      	mov	r2, sl
 800cc0c:	465b      	mov	r3, fp
 800cc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc12:	f7f3 fd19 	bl	8000648 <__aeabi_dmul>
 800cc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc18:	1b5d      	subs	r5, r3, r5
 800cc1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc22:	e78f      	b.n	800cb44 <_strtod_l+0x3cc>
 800cc24:	3316      	adds	r3, #22
 800cc26:	dba8      	blt.n	800cb7a <_strtod_l+0x402>
 800cc28:	4b37      	ldr	r3, [pc, #220]	@ (800cd08 <_strtod_l+0x590>)
 800cc2a:	eba9 0808 	sub.w	r8, r9, r8
 800cc2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cc32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cc36:	4650      	mov	r0, sl
 800cc38:	4659      	mov	r1, fp
 800cc3a:	f7f3 fe2f 	bl	800089c <__aeabi_ddiv>
 800cc3e:	e783      	b.n	800cb48 <_strtod_l+0x3d0>
 800cc40:	4b32      	ldr	r3, [pc, #200]	@ (800cd0c <_strtod_l+0x594>)
 800cc42:	9308      	str	r3, [sp, #32]
 800cc44:	2300      	movs	r3, #0
 800cc46:	1124      	asrs	r4, r4, #4
 800cc48:	4650      	mov	r0, sl
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	461e      	mov	r6, r3
 800cc4e:	2c01      	cmp	r4, #1
 800cc50:	dc21      	bgt.n	800cc96 <_strtod_l+0x51e>
 800cc52:	b10b      	cbz	r3, 800cc58 <_strtod_l+0x4e0>
 800cc54:	4682      	mov	sl, r0
 800cc56:	468b      	mov	fp, r1
 800cc58:	492c      	ldr	r1, [pc, #176]	@ (800cd0c <_strtod_l+0x594>)
 800cc5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cc5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cc62:	4652      	mov	r2, sl
 800cc64:	465b      	mov	r3, fp
 800cc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc6a:	f7f3 fced 	bl	8000648 <__aeabi_dmul>
 800cc6e:	4b28      	ldr	r3, [pc, #160]	@ (800cd10 <_strtod_l+0x598>)
 800cc70:	460a      	mov	r2, r1
 800cc72:	400b      	ands	r3, r1
 800cc74:	4927      	ldr	r1, [pc, #156]	@ (800cd14 <_strtod_l+0x59c>)
 800cc76:	428b      	cmp	r3, r1
 800cc78:	4682      	mov	sl, r0
 800cc7a:	d898      	bhi.n	800cbae <_strtod_l+0x436>
 800cc7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf86      	itte	hi
 800cc84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cd18 <_strtod_l+0x5a0>
 800cc88:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cc90:	2300      	movs	r3, #0
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	e07a      	b.n	800cd8c <_strtod_l+0x614>
 800cc96:	07e2      	lsls	r2, r4, #31
 800cc98:	d505      	bpl.n	800cca6 <_strtod_l+0x52e>
 800cc9a:	9b08      	ldr	r3, [sp, #32]
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fcd2 	bl	8000648 <__aeabi_dmul>
 800cca4:	2301      	movs	r3, #1
 800cca6:	9a08      	ldr	r2, [sp, #32]
 800cca8:	3208      	adds	r2, #8
 800ccaa:	3601      	adds	r6, #1
 800ccac:	1064      	asrs	r4, r4, #1
 800ccae:	9208      	str	r2, [sp, #32]
 800ccb0:	e7cd      	b.n	800cc4e <_strtod_l+0x4d6>
 800ccb2:	d0ed      	beq.n	800cc90 <_strtod_l+0x518>
 800ccb4:	4264      	negs	r4, r4
 800ccb6:	f014 020f 	ands.w	r2, r4, #15
 800ccba:	d00a      	beq.n	800ccd2 <_strtod_l+0x55a>
 800ccbc:	4b12      	ldr	r3, [pc, #72]	@ (800cd08 <_strtod_l+0x590>)
 800ccbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc2:	4650      	mov	r0, sl
 800ccc4:	4659      	mov	r1, fp
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	f7f3 fde7 	bl	800089c <__aeabi_ddiv>
 800ccce:	4682      	mov	sl, r0
 800ccd0:	468b      	mov	fp, r1
 800ccd2:	1124      	asrs	r4, r4, #4
 800ccd4:	d0dc      	beq.n	800cc90 <_strtod_l+0x518>
 800ccd6:	2c1f      	cmp	r4, #31
 800ccd8:	dd20      	ble.n	800cd1c <_strtod_l+0x5a4>
 800ccda:	2400      	movs	r4, #0
 800ccdc:	46a0      	mov	r8, r4
 800ccde:	940a      	str	r4, [sp, #40]	@ 0x28
 800cce0:	46a1      	mov	r9, r4
 800cce2:	9a05      	ldr	r2, [sp, #20]
 800cce4:	2322      	movs	r3, #34	@ 0x22
 800cce6:	f04f 0a00 	mov.w	sl, #0
 800ccea:	f04f 0b00 	mov.w	fp, #0
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	e768      	b.n	800cbc4 <_strtod_l+0x44c>
 800ccf2:	bf00      	nop
 800ccf4:	08011b95 	.word	0x08011b95
 800ccf8:	08011b34 	.word	0x08011b34
 800ccfc:	08011b8d 	.word	0x08011b8d
 800cd00:	08011bc7 	.word	0x08011bc7
 800cd04:	08011f44 	.word	0x08011f44
 800cd08:	08011d40 	.word	0x08011d40
 800cd0c:	08011d18 	.word	0x08011d18
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	7ca00000 	.word	0x7ca00000
 800cd18:	7fefffff 	.word	0x7fefffff
 800cd1c:	f014 0310 	ands.w	r3, r4, #16
 800cd20:	bf18      	it	ne
 800cd22:	236a      	movne	r3, #106	@ 0x6a
 800cd24:	4ea9      	ldr	r6, [pc, #676]	@ (800cfcc <_strtod_l+0x854>)
 800cd26:	9308      	str	r3, [sp, #32]
 800cd28:	4650      	mov	r0, sl
 800cd2a:	4659      	mov	r1, fp
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	07e2      	lsls	r2, r4, #31
 800cd30:	d504      	bpl.n	800cd3c <_strtod_l+0x5c4>
 800cd32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd36:	f7f3 fc87 	bl	8000648 <__aeabi_dmul>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	1064      	asrs	r4, r4, #1
 800cd3e:	f106 0608 	add.w	r6, r6, #8
 800cd42:	d1f4      	bne.n	800cd2e <_strtod_l+0x5b6>
 800cd44:	b10b      	cbz	r3, 800cd4a <_strtod_l+0x5d2>
 800cd46:	4682      	mov	sl, r0
 800cd48:	468b      	mov	fp, r1
 800cd4a:	9b08      	ldr	r3, [sp, #32]
 800cd4c:	b1b3      	cbz	r3, 800cd7c <_strtod_l+0x604>
 800cd4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cd52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	4659      	mov	r1, fp
 800cd5a:	dd0f      	ble.n	800cd7c <_strtod_l+0x604>
 800cd5c:	2b1f      	cmp	r3, #31
 800cd5e:	dd55      	ble.n	800ce0c <_strtod_l+0x694>
 800cd60:	2b34      	cmp	r3, #52	@ 0x34
 800cd62:	bfde      	ittt	le
 800cd64:	f04f 33ff 	movle.w	r3, #4294967295
 800cd68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cd6c:	4093      	lslle	r3, r2
 800cd6e:	f04f 0a00 	mov.w	sl, #0
 800cd72:	bfcc      	ite	gt
 800cd74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cd78:	ea03 0b01 	andle.w	fp, r3, r1
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2300      	movs	r3, #0
 800cd80:	4650      	mov	r0, sl
 800cd82:	4659      	mov	r1, fp
 800cd84:	f7f3 fec8 	bl	8000b18 <__aeabi_dcmpeq>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d1a6      	bne.n	800ccda <_strtod_l+0x562>
 800cd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd92:	9805      	ldr	r0, [sp, #20]
 800cd94:	462b      	mov	r3, r5
 800cd96:	463a      	mov	r2, r7
 800cd98:	f002 fc92 	bl	800f6c0 <__s2b>
 800cd9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f43f af05 	beq.w	800cbae <_strtod_l+0x436>
 800cda4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	eba9 0308 	sub.w	r3, r9, r8
 800cdac:	bfa8      	it	ge
 800cdae:	2300      	movge	r3, #0
 800cdb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdb2:	2400      	movs	r4, #0
 800cdb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cdb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800cdba:	46a0      	mov	r8, r4
 800cdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdbe:	9805      	ldr	r0, [sp, #20]
 800cdc0:	6859      	ldr	r1, [r3, #4]
 800cdc2:	f002 fbd5 	bl	800f570 <_Balloc>
 800cdc6:	4681      	mov	r9, r0
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f aef4 	beq.w	800cbb6 <_strtod_l+0x43e>
 800cdce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdd0:	691a      	ldr	r2, [r3, #16]
 800cdd2:	3202      	adds	r2, #2
 800cdd4:	f103 010c 	add.w	r1, r3, #12
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	300c      	adds	r0, #12
 800cddc:	f001 f90f 	bl	800dffe <memcpy>
 800cde0:	ec4b ab10 	vmov	d0, sl, fp
 800cde4:	9805      	ldr	r0, [sp, #20]
 800cde6:	aa1c      	add	r2, sp, #112	@ 0x70
 800cde8:	a91b      	add	r1, sp, #108	@ 0x6c
 800cdea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cdee:	f002 ffa3 	bl	800fd38 <__d2b>
 800cdf2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f43f aede 	beq.w	800cbb6 <_strtod_l+0x43e>
 800cdfa:	9805      	ldr	r0, [sp, #20]
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	f002 fcf5 	bl	800f7ec <__i2b>
 800ce02:	4680      	mov	r8, r0
 800ce04:	b948      	cbnz	r0, 800ce1a <_strtod_l+0x6a2>
 800ce06:	f04f 0800 	mov.w	r8, #0
 800ce0a:	e6d4      	b.n	800cbb6 <_strtod_l+0x43e>
 800ce0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce10:	fa02 f303 	lsl.w	r3, r2, r3
 800ce14:	ea03 0a0a 	and.w	sl, r3, sl
 800ce18:	e7b0      	b.n	800cd7c <_strtod_l+0x604>
 800ce1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ce1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	bfab      	itete	ge
 800ce22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ce24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ce26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ce28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ce2a:	bfac      	ite	ge
 800ce2c:	18ef      	addge	r7, r5, r3
 800ce2e:	1b5e      	sublt	r6, r3, r5
 800ce30:	9b08      	ldr	r3, [sp, #32]
 800ce32:	1aed      	subs	r5, r5, r3
 800ce34:	4415      	add	r5, r2
 800ce36:	4b66      	ldr	r3, [pc, #408]	@ (800cfd0 <_strtod_l+0x858>)
 800ce38:	3d01      	subs	r5, #1
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce40:	da50      	bge.n	800cee4 <_strtod_l+0x76c>
 800ce42:	1b5b      	subs	r3, r3, r5
 800ce44:	2b1f      	cmp	r3, #31
 800ce46:	eba2 0203 	sub.w	r2, r2, r3
 800ce4a:	f04f 0101 	mov.w	r1, #1
 800ce4e:	dc3d      	bgt.n	800cecc <_strtod_l+0x754>
 800ce50:	fa01 f303 	lsl.w	r3, r1, r3
 800ce54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce56:	2300      	movs	r3, #0
 800ce58:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce5a:	18bd      	adds	r5, r7, r2
 800ce5c:	9b08      	ldr	r3, [sp, #32]
 800ce5e:	42af      	cmp	r7, r5
 800ce60:	4416      	add	r6, r2
 800ce62:	441e      	add	r6, r3
 800ce64:	463b      	mov	r3, r7
 800ce66:	bfa8      	it	ge
 800ce68:	462b      	movge	r3, r5
 800ce6a:	42b3      	cmp	r3, r6
 800ce6c:	bfa8      	it	ge
 800ce6e:	4633      	movge	r3, r6
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfc2      	ittt	gt
 800ce74:	1aed      	subgt	r5, r5, r3
 800ce76:	1af6      	subgt	r6, r6, r3
 800ce78:	1aff      	subgt	r7, r7, r3
 800ce7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	dd16      	ble.n	800ceae <_strtod_l+0x736>
 800ce80:	4641      	mov	r1, r8
 800ce82:	9805      	ldr	r0, [sp, #20]
 800ce84:	461a      	mov	r2, r3
 800ce86:	f002 fd71 	bl	800f96c <__pow5mult>
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d0ba      	beq.n	800ce06 <_strtod_l+0x68e>
 800ce90:	4601      	mov	r1, r0
 800ce92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce94:	9805      	ldr	r0, [sp, #20]
 800ce96:	f002 fcbf 	bl	800f818 <__multiply>
 800ce9a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	f43f ae8a 	beq.w	800cbb6 <_strtod_l+0x43e>
 800cea2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cea4:	9805      	ldr	r0, [sp, #20]
 800cea6:	f002 fba3 	bl	800f5f0 <_Bfree>
 800ceaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceac:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceae:	2d00      	cmp	r5, #0
 800ceb0:	dc1d      	bgt.n	800ceee <_strtod_l+0x776>
 800ceb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dd23      	ble.n	800cf00 <_strtod_l+0x788>
 800ceb8:	4649      	mov	r1, r9
 800ceba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cebc:	9805      	ldr	r0, [sp, #20]
 800cebe:	f002 fd55 	bl	800f96c <__pow5mult>
 800cec2:	4681      	mov	r9, r0
 800cec4:	b9e0      	cbnz	r0, 800cf00 <_strtod_l+0x788>
 800cec6:	f04f 0900 	mov.w	r9, #0
 800ceca:	e674      	b.n	800cbb6 <_strtod_l+0x43e>
 800cecc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ced0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ced4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ced8:	35e2      	adds	r5, #226	@ 0xe2
 800ceda:	fa01 f305 	lsl.w	r3, r1, r5
 800cede:	9310      	str	r3, [sp, #64]	@ 0x40
 800cee0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cee2:	e7ba      	b.n	800ce5a <_strtod_l+0x6e2>
 800cee4:	2300      	movs	r3, #0
 800cee6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cee8:	2301      	movs	r3, #1
 800ceea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceec:	e7b5      	b.n	800ce5a <_strtod_l+0x6e2>
 800ceee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cef0:	9805      	ldr	r0, [sp, #20]
 800cef2:	462a      	mov	r2, r5
 800cef4:	f002 fd94 	bl	800fa20 <__lshift>
 800cef8:	901a      	str	r0, [sp, #104]	@ 0x68
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d1d9      	bne.n	800ceb2 <_strtod_l+0x73a>
 800cefe:	e65a      	b.n	800cbb6 <_strtod_l+0x43e>
 800cf00:	2e00      	cmp	r6, #0
 800cf02:	dd07      	ble.n	800cf14 <_strtod_l+0x79c>
 800cf04:	4649      	mov	r1, r9
 800cf06:	9805      	ldr	r0, [sp, #20]
 800cf08:	4632      	mov	r2, r6
 800cf0a:	f002 fd89 	bl	800fa20 <__lshift>
 800cf0e:	4681      	mov	r9, r0
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d0d8      	beq.n	800cec6 <_strtod_l+0x74e>
 800cf14:	2f00      	cmp	r7, #0
 800cf16:	dd08      	ble.n	800cf2a <_strtod_l+0x7b2>
 800cf18:	4641      	mov	r1, r8
 800cf1a:	9805      	ldr	r0, [sp, #20]
 800cf1c:	463a      	mov	r2, r7
 800cf1e:	f002 fd7f 	bl	800fa20 <__lshift>
 800cf22:	4680      	mov	r8, r0
 800cf24:	2800      	cmp	r0, #0
 800cf26:	f43f ae46 	beq.w	800cbb6 <_strtod_l+0x43e>
 800cf2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf2c:	9805      	ldr	r0, [sp, #20]
 800cf2e:	464a      	mov	r2, r9
 800cf30:	f002 fdfe 	bl	800fb30 <__mdiff>
 800cf34:	4604      	mov	r4, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f43f ae3d 	beq.w	800cbb6 <_strtod_l+0x43e>
 800cf3c:	68c3      	ldr	r3, [r0, #12]
 800cf3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf40:	2300      	movs	r3, #0
 800cf42:	60c3      	str	r3, [r0, #12]
 800cf44:	4641      	mov	r1, r8
 800cf46:	f002 fdd7 	bl	800faf8 <__mcmp>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	da46      	bge.n	800cfdc <_strtod_l+0x864>
 800cf4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf50:	ea53 030a 	orrs.w	r3, r3, sl
 800cf54:	d16c      	bne.n	800d030 <_strtod_l+0x8b8>
 800cf56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d168      	bne.n	800d030 <_strtod_l+0x8b8>
 800cf5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf62:	0d1b      	lsrs	r3, r3, #20
 800cf64:	051b      	lsls	r3, r3, #20
 800cf66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf6a:	d961      	bls.n	800d030 <_strtod_l+0x8b8>
 800cf6c:	6963      	ldr	r3, [r4, #20]
 800cf6e:	b913      	cbnz	r3, 800cf76 <_strtod_l+0x7fe>
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	dd5c      	ble.n	800d030 <_strtod_l+0x8b8>
 800cf76:	4621      	mov	r1, r4
 800cf78:	2201      	movs	r2, #1
 800cf7a:	9805      	ldr	r0, [sp, #20]
 800cf7c:	f002 fd50 	bl	800fa20 <__lshift>
 800cf80:	4641      	mov	r1, r8
 800cf82:	4604      	mov	r4, r0
 800cf84:	f002 fdb8 	bl	800faf8 <__mcmp>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	dd51      	ble.n	800d030 <_strtod_l+0x8b8>
 800cf8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf90:	9a08      	ldr	r2, [sp, #32]
 800cf92:	0d1b      	lsrs	r3, r3, #20
 800cf94:	051b      	lsls	r3, r3, #20
 800cf96:	2a00      	cmp	r2, #0
 800cf98:	d06b      	beq.n	800d072 <_strtod_l+0x8fa>
 800cf9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf9e:	d868      	bhi.n	800d072 <_strtod_l+0x8fa>
 800cfa0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cfa4:	f67f ae9d 	bls.w	800cce2 <_strtod_l+0x56a>
 800cfa8:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd4 <_strtod_l+0x85c>)
 800cfaa:	4650      	mov	r0, sl
 800cfac:	4659      	mov	r1, fp
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f7f3 fb4a 	bl	8000648 <__aeabi_dmul>
 800cfb4:	4b08      	ldr	r3, [pc, #32]	@ (800cfd8 <_strtod_l+0x860>)
 800cfb6:	400b      	ands	r3, r1
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f47f ae05 	bne.w	800cbcc <_strtod_l+0x454>
 800cfc2:	9a05      	ldr	r2, [sp, #20]
 800cfc4:	2322      	movs	r3, #34	@ 0x22
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	e600      	b.n	800cbcc <_strtod_l+0x454>
 800cfca:	bf00      	nop
 800cfcc:	08011b60 	.word	0x08011b60
 800cfd0:	fffffc02 	.word	0xfffffc02
 800cfd4:	39500000 	.word	0x39500000
 800cfd8:	7ff00000 	.word	0x7ff00000
 800cfdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cfe0:	d165      	bne.n	800d0ae <_strtod_l+0x936>
 800cfe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cfe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfe8:	b35a      	cbz	r2, 800d042 <_strtod_l+0x8ca>
 800cfea:	4a9f      	ldr	r2, [pc, #636]	@ (800d268 <_strtod_l+0xaf0>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d12b      	bne.n	800d048 <_strtod_l+0x8d0>
 800cff0:	9b08      	ldr	r3, [sp, #32]
 800cff2:	4651      	mov	r1, sl
 800cff4:	b303      	cbz	r3, 800d038 <_strtod_l+0x8c0>
 800cff6:	4b9d      	ldr	r3, [pc, #628]	@ (800d26c <_strtod_l+0xaf4>)
 800cff8:	465a      	mov	r2, fp
 800cffa:	4013      	ands	r3, r2
 800cffc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d000:	f04f 32ff 	mov.w	r2, #4294967295
 800d004:	d81b      	bhi.n	800d03e <_strtod_l+0x8c6>
 800d006:	0d1b      	lsrs	r3, r3, #20
 800d008:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d00c:	fa02 f303 	lsl.w	r3, r2, r3
 800d010:	4299      	cmp	r1, r3
 800d012:	d119      	bne.n	800d048 <_strtod_l+0x8d0>
 800d014:	4b96      	ldr	r3, [pc, #600]	@ (800d270 <_strtod_l+0xaf8>)
 800d016:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d018:	429a      	cmp	r2, r3
 800d01a:	d102      	bne.n	800d022 <_strtod_l+0x8aa>
 800d01c:	3101      	adds	r1, #1
 800d01e:	f43f adca 	beq.w	800cbb6 <_strtod_l+0x43e>
 800d022:	4b92      	ldr	r3, [pc, #584]	@ (800d26c <_strtod_l+0xaf4>)
 800d024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d026:	401a      	ands	r2, r3
 800d028:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1b8      	bne.n	800cfa8 <_strtod_l+0x830>
 800d036:	e5c9      	b.n	800cbcc <_strtod_l+0x454>
 800d038:	f04f 33ff 	mov.w	r3, #4294967295
 800d03c:	e7e8      	b.n	800d010 <_strtod_l+0x898>
 800d03e:	4613      	mov	r3, r2
 800d040:	e7e6      	b.n	800d010 <_strtod_l+0x898>
 800d042:	ea53 030a 	orrs.w	r3, r3, sl
 800d046:	d0a1      	beq.n	800cf8c <_strtod_l+0x814>
 800d048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d04a:	b1db      	cbz	r3, 800d084 <_strtod_l+0x90c>
 800d04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d04e:	4213      	tst	r3, r2
 800d050:	d0ee      	beq.n	800d030 <_strtod_l+0x8b8>
 800d052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d054:	9a08      	ldr	r2, [sp, #32]
 800d056:	4650      	mov	r0, sl
 800d058:	4659      	mov	r1, fp
 800d05a:	b1bb      	cbz	r3, 800d08c <_strtod_l+0x914>
 800d05c:	f7ff fb6e 	bl	800c73c <sulp>
 800d060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d064:	ec53 2b10 	vmov	r2, r3, d0
 800d068:	f7f3 f938 	bl	80002dc <__adddf3>
 800d06c:	4682      	mov	sl, r0
 800d06e:	468b      	mov	fp, r1
 800d070:	e7de      	b.n	800d030 <_strtod_l+0x8b8>
 800d072:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d076:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d07a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d07e:	f04f 3aff 	mov.w	sl, #4294967295
 800d082:	e7d5      	b.n	800d030 <_strtod_l+0x8b8>
 800d084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d086:	ea13 0f0a 	tst.w	r3, sl
 800d08a:	e7e1      	b.n	800d050 <_strtod_l+0x8d8>
 800d08c:	f7ff fb56 	bl	800c73c <sulp>
 800d090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d094:	ec53 2b10 	vmov	r2, r3, d0
 800d098:	f7f3 f91e 	bl	80002d8 <__aeabi_dsub>
 800d09c:	2200      	movs	r2, #0
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4682      	mov	sl, r0
 800d0a2:	468b      	mov	fp, r1
 800d0a4:	f7f3 fd38 	bl	8000b18 <__aeabi_dcmpeq>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d0c1      	beq.n	800d030 <_strtod_l+0x8b8>
 800d0ac:	e619      	b.n	800cce2 <_strtod_l+0x56a>
 800d0ae:	4641      	mov	r1, r8
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f002 fe99 	bl	800fde8 <__ratio>
 800d0b6:	ec57 6b10 	vmov	r6, r7, d0
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	f7f3 fd3c 	bl	8000b40 <__aeabi_dcmple>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d06f      	beq.n	800d1ac <_strtod_l+0xa34>
 800d0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d17a      	bne.n	800d1c8 <_strtod_l+0xa50>
 800d0d2:	f1ba 0f00 	cmp.w	sl, #0
 800d0d6:	d158      	bne.n	800d18a <_strtod_l+0xa12>
 800d0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d15a      	bne.n	800d198 <_strtod_l+0xa20>
 800d0e2:	4b64      	ldr	r3, [pc, #400]	@ (800d274 <_strtod_l+0xafc>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	f7f3 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d159      	bne.n	800d1a6 <_strtod_l+0xa2e>
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	4b60      	ldr	r3, [pc, #384]	@ (800d278 <_strtod_l+0xb00>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f7f3 faa5 	bl	8000648 <__aeabi_dmul>
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d106:	9606      	str	r6, [sp, #24]
 800d108:	9307      	str	r3, [sp, #28]
 800d10a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d10e:	4d57      	ldr	r5, [pc, #348]	@ (800d26c <_strtod_l+0xaf4>)
 800d110:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d116:	401d      	ands	r5, r3
 800d118:	4b58      	ldr	r3, [pc, #352]	@ (800d27c <_strtod_l+0xb04>)
 800d11a:	429d      	cmp	r5, r3
 800d11c:	f040 80b2 	bne.w	800d284 <_strtod_l+0xb0c>
 800d120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d122:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d126:	ec4b ab10 	vmov	d0, sl, fp
 800d12a:	f002 fd95 	bl	800fc58 <__ulp>
 800d12e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d132:	ec51 0b10 	vmov	r0, r1, d0
 800d136:	f7f3 fa87 	bl	8000648 <__aeabi_dmul>
 800d13a:	4652      	mov	r2, sl
 800d13c:	465b      	mov	r3, fp
 800d13e:	f7f3 f8cd 	bl	80002dc <__adddf3>
 800d142:	460b      	mov	r3, r1
 800d144:	4949      	ldr	r1, [pc, #292]	@ (800d26c <_strtod_l+0xaf4>)
 800d146:	4a4e      	ldr	r2, [pc, #312]	@ (800d280 <_strtod_l+0xb08>)
 800d148:	4019      	ands	r1, r3
 800d14a:	4291      	cmp	r1, r2
 800d14c:	4682      	mov	sl, r0
 800d14e:	d942      	bls.n	800d1d6 <_strtod_l+0xa5e>
 800d150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d152:	4b47      	ldr	r3, [pc, #284]	@ (800d270 <_strtod_l+0xaf8>)
 800d154:	429a      	cmp	r2, r3
 800d156:	d103      	bne.n	800d160 <_strtod_l+0x9e8>
 800d158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d15a:	3301      	adds	r3, #1
 800d15c:	f43f ad2b 	beq.w	800cbb6 <_strtod_l+0x43e>
 800d160:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d270 <_strtod_l+0xaf8>
 800d164:	f04f 3aff 	mov.w	sl, #4294967295
 800d168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d16a:	9805      	ldr	r0, [sp, #20]
 800d16c:	f002 fa40 	bl	800f5f0 <_Bfree>
 800d170:	9805      	ldr	r0, [sp, #20]
 800d172:	4649      	mov	r1, r9
 800d174:	f002 fa3c 	bl	800f5f0 <_Bfree>
 800d178:	9805      	ldr	r0, [sp, #20]
 800d17a:	4641      	mov	r1, r8
 800d17c:	f002 fa38 	bl	800f5f0 <_Bfree>
 800d180:	9805      	ldr	r0, [sp, #20]
 800d182:	4621      	mov	r1, r4
 800d184:	f002 fa34 	bl	800f5f0 <_Bfree>
 800d188:	e618      	b.n	800cdbc <_strtod_l+0x644>
 800d18a:	f1ba 0f01 	cmp.w	sl, #1
 800d18e:	d103      	bne.n	800d198 <_strtod_l+0xa20>
 800d190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d192:	2b00      	cmp	r3, #0
 800d194:	f43f ada5 	beq.w	800cce2 <_strtod_l+0x56a>
 800d198:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d248 <_strtod_l+0xad0>
 800d19c:	4f35      	ldr	r7, [pc, #212]	@ (800d274 <_strtod_l+0xafc>)
 800d19e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1a2:	2600      	movs	r6, #0
 800d1a4:	e7b1      	b.n	800d10a <_strtod_l+0x992>
 800d1a6:	4f34      	ldr	r7, [pc, #208]	@ (800d278 <_strtod_l+0xb00>)
 800d1a8:	2600      	movs	r6, #0
 800d1aa:	e7aa      	b.n	800d102 <_strtod_l+0x98a>
 800d1ac:	4b32      	ldr	r3, [pc, #200]	@ (800d278 <_strtod_l+0xb00>)
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f7f3 fa48 	bl	8000648 <__aeabi_dmul>
 800d1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460f      	mov	r7, r1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d09f      	beq.n	800d102 <_strtod_l+0x98a>
 800d1c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d1c6:	e7a0      	b.n	800d10a <_strtod_l+0x992>
 800d1c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d250 <_strtod_l+0xad8>
 800d1cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1d0:	ec57 6b17 	vmov	r6, r7, d7
 800d1d4:	e799      	b.n	800d10a <_strtod_l+0x992>
 800d1d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1c1      	bne.n	800d168 <_strtod_l+0x9f0>
 800d1e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1e8:	0d1b      	lsrs	r3, r3, #20
 800d1ea:	051b      	lsls	r3, r3, #20
 800d1ec:	429d      	cmp	r5, r3
 800d1ee:	d1bb      	bne.n	800d168 <_strtod_l+0x9f0>
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	f7f3 fd88 	bl	8000d08 <__aeabi_d2lz>
 800d1f8:	f7f3 f9f8 	bl	80005ec <__aeabi_l2d>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4630      	mov	r0, r6
 800d202:	4639      	mov	r1, r7
 800d204:	f7f3 f868 	bl	80002d8 <__aeabi_dsub>
 800d208:	460b      	mov	r3, r1
 800d20a:	4602      	mov	r2, r0
 800d20c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d210:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d216:	ea46 060a 	orr.w	r6, r6, sl
 800d21a:	431e      	orrs	r6, r3
 800d21c:	d06f      	beq.n	800d2fe <_strtod_l+0xb86>
 800d21e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d258 <_strtod_l+0xae0>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 fc82 	bl	8000b2c <__aeabi_dcmplt>
 800d228:	2800      	cmp	r0, #0
 800d22a:	f47f accf 	bne.w	800cbcc <_strtod_l+0x454>
 800d22e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d260 <_strtod_l+0xae8>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d238:	f7f3 fc96 	bl	8000b68 <__aeabi_dcmpgt>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d093      	beq.n	800d168 <_strtod_l+0x9f0>
 800d240:	e4c4      	b.n	800cbcc <_strtod_l+0x454>
 800d242:	bf00      	nop
 800d244:	f3af 8000 	nop.w
 800d248:	00000000 	.word	0x00000000
 800d24c:	bff00000 	.word	0xbff00000
 800d250:	00000000 	.word	0x00000000
 800d254:	3ff00000 	.word	0x3ff00000
 800d258:	94a03595 	.word	0x94a03595
 800d25c:	3fdfffff 	.word	0x3fdfffff
 800d260:	35afe535 	.word	0x35afe535
 800d264:	3fe00000 	.word	0x3fe00000
 800d268:	000fffff 	.word	0x000fffff
 800d26c:	7ff00000 	.word	0x7ff00000
 800d270:	7fefffff 	.word	0x7fefffff
 800d274:	3ff00000 	.word	0x3ff00000
 800d278:	3fe00000 	.word	0x3fe00000
 800d27c:	7fe00000 	.word	0x7fe00000
 800d280:	7c9fffff 	.word	0x7c9fffff
 800d284:	9b08      	ldr	r3, [sp, #32]
 800d286:	b323      	cbz	r3, 800d2d2 <_strtod_l+0xb5a>
 800d288:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d28c:	d821      	bhi.n	800d2d2 <_strtod_l+0xb5a>
 800d28e:	a328      	add	r3, pc, #160	@ (adr r3, 800d330 <_strtod_l+0xbb8>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	4630      	mov	r0, r6
 800d296:	4639      	mov	r1, r7
 800d298:	f7f3 fc52 	bl	8000b40 <__aeabi_dcmple>
 800d29c:	b1a0      	cbz	r0, 800d2c8 <_strtod_l+0xb50>
 800d29e:	4639      	mov	r1, r7
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f7f3 fca9 	bl	8000bf8 <__aeabi_d2uiz>
 800d2a6:	2801      	cmp	r0, #1
 800d2a8:	bf38      	it	cc
 800d2aa:	2001      	movcc	r0, #1
 800d2ac:	f7f3 f952 	bl	8000554 <__aeabi_ui2d>
 800d2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	b9fb      	cbnz	r3, 800d2f8 <_strtod_l+0xb80>
 800d2b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800d2be:	9315      	str	r3, [sp, #84]	@ 0x54
 800d2c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d2c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d2c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d2ce:	1b5b      	subs	r3, r3, r5
 800d2d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d2d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d2d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d2da:	f002 fcbd 	bl	800fc58 <__ulp>
 800d2de:	4650      	mov	r0, sl
 800d2e0:	ec53 2b10 	vmov	r2, r3, d0
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	f7f3 f9af 	bl	8000648 <__aeabi_dmul>
 800d2ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d2ee:	f7f2 fff5 	bl	80002dc <__adddf3>
 800d2f2:	4682      	mov	sl, r0
 800d2f4:	468b      	mov	fp, r1
 800d2f6:	e770      	b.n	800d1da <_strtod_l+0xa62>
 800d2f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d2fc:	e7e0      	b.n	800d2c0 <_strtod_l+0xb48>
 800d2fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800d338 <_strtod_l+0xbc0>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f7f3 fc12 	bl	8000b2c <__aeabi_dcmplt>
 800d308:	e798      	b.n	800d23c <_strtod_l+0xac4>
 800d30a:	2300      	movs	r3, #0
 800d30c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d30e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d312:	6013      	str	r3, [r2, #0]
 800d314:	f7ff ba6d 	b.w	800c7f2 <_strtod_l+0x7a>
 800d318:	2a65      	cmp	r2, #101	@ 0x65
 800d31a:	f43f ab66 	beq.w	800c9ea <_strtod_l+0x272>
 800d31e:	2a45      	cmp	r2, #69	@ 0x45
 800d320:	f43f ab63 	beq.w	800c9ea <_strtod_l+0x272>
 800d324:	2301      	movs	r3, #1
 800d326:	f7ff bb9e 	b.w	800ca66 <_strtod_l+0x2ee>
 800d32a:	bf00      	nop
 800d32c:	f3af 8000 	nop.w
 800d330:	ffc00000 	.word	0xffc00000
 800d334:	41dfffff 	.word	0x41dfffff
 800d338:	94a03595 	.word	0x94a03595
 800d33c:	3fcfffff 	.word	0x3fcfffff

0800d340 <strtof>:
 800d340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d344:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800d404 <strtof+0xc4>
 800d348:	4b29      	ldr	r3, [pc, #164]	@ (800d3f0 <strtof+0xb0>)
 800d34a:	460a      	mov	r2, r1
 800d34c:	ed2d 8b02 	vpush	{d8}
 800d350:	4601      	mov	r1, r0
 800d352:	f8d8 0000 	ldr.w	r0, [r8]
 800d356:	f7ff fa0f 	bl	800c778 <_strtod_l>
 800d35a:	ec55 4b10 	vmov	r4, r5, d0
 800d35e:	4622      	mov	r2, r4
 800d360:	462b      	mov	r3, r5
 800d362:	4620      	mov	r0, r4
 800d364:	4629      	mov	r1, r5
 800d366:	f7f3 fc09 	bl	8000b7c <__aeabi_dcmpun>
 800d36a:	b190      	cbz	r0, 800d392 <strtof+0x52>
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	4821      	ldr	r0, [pc, #132]	@ (800d3f4 <strtof+0xb4>)
 800d370:	da09      	bge.n	800d386 <strtof+0x46>
 800d372:	f000 fe5d 	bl	800e030 <nanf>
 800d376:	eeb1 8a40 	vneg.f32	s16, s0
 800d37a:	eeb0 0a48 	vmov.f32	s0, s16
 800d37e:	ecbd 8b02 	vpop	{d8}
 800d382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d386:	ecbd 8b02 	vpop	{d8}
 800d38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d38e:	f000 be4f 	b.w	800e030 <nanf>
 800d392:	4620      	mov	r0, r4
 800d394:	4629      	mov	r1, r5
 800d396:	f7f3 fc4f 	bl	8000c38 <__aeabi_d2f>
 800d39a:	ee08 0a10 	vmov	s16, r0
 800d39e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800d3f8 <strtof+0xb8>
 800d3a2:	eeb0 7ac8 	vabs.f32	s14, s16
 800d3a6:	eeb4 7a67 	vcmp.f32	s14, s15
 800d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ae:	dd11      	ble.n	800d3d4 <strtof+0x94>
 800d3b0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800d3b4:	4b11      	ldr	r3, [pc, #68]	@ (800d3fc <strtof+0xbc>)
 800d3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f3 fbdd 	bl	8000b7c <__aeabi_dcmpun>
 800d3c2:	b980      	cbnz	r0, 800d3e6 <strtof+0xa6>
 800d3c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3fc <strtof+0xbc>)
 800d3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	f7f3 fbb7 	bl	8000b40 <__aeabi_dcmple>
 800d3d2:	b940      	cbnz	r0, 800d3e6 <strtof+0xa6>
 800d3d4:	ee18 3a10 	vmov	r3, s16
 800d3d8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d3dc:	d1cd      	bne.n	800d37a <strtof+0x3a>
 800d3de:	4b08      	ldr	r3, [pc, #32]	@ (800d400 <strtof+0xc0>)
 800d3e0:	402b      	ands	r3, r5
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d0c9      	beq.n	800d37a <strtof+0x3a>
 800d3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ea:	2222      	movs	r2, #34	@ 0x22
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e7c4      	b.n	800d37a <strtof+0x3a>
 800d3f0:	2000001c 	.word	0x2000001c
 800d3f4:	08011f44 	.word	0x08011f44
 800d3f8:	7f7fffff 	.word	0x7f7fffff
 800d3fc:	7fefffff 	.word	0x7fefffff
 800d400:	7ff00000 	.word	0x7ff00000
 800d404:	20000188 	.word	0x20000188

0800d408 <__cvt>:
 800d408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d40c:	ec57 6b10 	vmov	r6, r7, d0
 800d410:	2f00      	cmp	r7, #0
 800d412:	460c      	mov	r4, r1
 800d414:	4619      	mov	r1, r3
 800d416:	463b      	mov	r3, r7
 800d418:	bfbb      	ittet	lt
 800d41a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d41e:	461f      	movlt	r7, r3
 800d420:	2300      	movge	r3, #0
 800d422:	232d      	movlt	r3, #45	@ 0x2d
 800d424:	700b      	strb	r3, [r1, #0]
 800d426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d428:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d42c:	4691      	mov	r9, r2
 800d42e:	f023 0820 	bic.w	r8, r3, #32
 800d432:	bfbc      	itt	lt
 800d434:	4632      	movlt	r2, r6
 800d436:	4616      	movlt	r6, r2
 800d438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d43c:	d005      	beq.n	800d44a <__cvt+0x42>
 800d43e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d442:	d100      	bne.n	800d446 <__cvt+0x3e>
 800d444:	3401      	adds	r4, #1
 800d446:	2102      	movs	r1, #2
 800d448:	e000      	b.n	800d44c <__cvt+0x44>
 800d44a:	2103      	movs	r1, #3
 800d44c:	ab03      	add	r3, sp, #12
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	ab02      	add	r3, sp, #8
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	ec47 6b10 	vmov	d0, r6, r7
 800d458:	4653      	mov	r3, sl
 800d45a:	4622      	mov	r2, r4
 800d45c:	f000 fe78 	bl	800e150 <_dtoa_r>
 800d460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d464:	4605      	mov	r5, r0
 800d466:	d119      	bne.n	800d49c <__cvt+0x94>
 800d468:	f019 0f01 	tst.w	r9, #1
 800d46c:	d00e      	beq.n	800d48c <__cvt+0x84>
 800d46e:	eb00 0904 	add.w	r9, r0, r4
 800d472:	2200      	movs	r2, #0
 800d474:	2300      	movs	r3, #0
 800d476:	4630      	mov	r0, r6
 800d478:	4639      	mov	r1, r7
 800d47a:	f7f3 fb4d 	bl	8000b18 <__aeabi_dcmpeq>
 800d47e:	b108      	cbz	r0, 800d484 <__cvt+0x7c>
 800d480:	f8cd 900c 	str.w	r9, [sp, #12]
 800d484:	2230      	movs	r2, #48	@ 0x30
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	454b      	cmp	r3, r9
 800d48a:	d31e      	bcc.n	800d4ca <__cvt+0xc2>
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d490:	1b5b      	subs	r3, r3, r5
 800d492:	4628      	mov	r0, r5
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	b004      	add	sp, #16
 800d498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4a0:	eb00 0904 	add.w	r9, r0, r4
 800d4a4:	d1e5      	bne.n	800d472 <__cvt+0x6a>
 800d4a6:	7803      	ldrb	r3, [r0, #0]
 800d4a8:	2b30      	cmp	r3, #48	@ 0x30
 800d4aa:	d10a      	bne.n	800d4c2 <__cvt+0xba>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f3 fb30 	bl	8000b18 <__aeabi_dcmpeq>
 800d4b8:	b918      	cbnz	r0, 800d4c2 <__cvt+0xba>
 800d4ba:	f1c4 0401 	rsb	r4, r4, #1
 800d4be:	f8ca 4000 	str.w	r4, [sl]
 800d4c2:	f8da 3000 	ldr.w	r3, [sl]
 800d4c6:	4499      	add	r9, r3
 800d4c8:	e7d3      	b.n	800d472 <__cvt+0x6a>
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e7d9      	b.n	800d486 <__cvt+0x7e>

0800d4d2 <__exponent>:
 800d4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d4:	2900      	cmp	r1, #0
 800d4d6:	bfba      	itte	lt
 800d4d8:	4249      	neglt	r1, r1
 800d4da:	232d      	movlt	r3, #45	@ 0x2d
 800d4dc:	232b      	movge	r3, #43	@ 0x2b
 800d4de:	2909      	cmp	r1, #9
 800d4e0:	7002      	strb	r2, [r0, #0]
 800d4e2:	7043      	strb	r3, [r0, #1]
 800d4e4:	dd29      	ble.n	800d53a <__exponent+0x68>
 800d4e6:	f10d 0307 	add.w	r3, sp, #7
 800d4ea:	461d      	mov	r5, r3
 800d4ec:	270a      	movs	r7, #10
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d4f4:	fb07 1416 	mls	r4, r7, r6, r1
 800d4f8:	3430      	adds	r4, #48	@ 0x30
 800d4fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d4fe:	460c      	mov	r4, r1
 800d500:	2c63      	cmp	r4, #99	@ 0x63
 800d502:	f103 33ff 	add.w	r3, r3, #4294967295
 800d506:	4631      	mov	r1, r6
 800d508:	dcf1      	bgt.n	800d4ee <__exponent+0x1c>
 800d50a:	3130      	adds	r1, #48	@ 0x30
 800d50c:	1e94      	subs	r4, r2, #2
 800d50e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d512:	1c41      	adds	r1, r0, #1
 800d514:	4623      	mov	r3, r4
 800d516:	42ab      	cmp	r3, r5
 800d518:	d30a      	bcc.n	800d530 <__exponent+0x5e>
 800d51a:	f10d 0309 	add.w	r3, sp, #9
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	42ac      	cmp	r4, r5
 800d522:	bf88      	it	hi
 800d524:	2300      	movhi	r3, #0
 800d526:	3302      	adds	r3, #2
 800d528:	4403      	add	r3, r0
 800d52a:	1a18      	subs	r0, r3, r0
 800d52c:	b003      	add	sp, #12
 800d52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d530:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d534:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d538:	e7ed      	b.n	800d516 <__exponent+0x44>
 800d53a:	2330      	movs	r3, #48	@ 0x30
 800d53c:	3130      	adds	r1, #48	@ 0x30
 800d53e:	7083      	strb	r3, [r0, #2]
 800d540:	70c1      	strb	r1, [r0, #3]
 800d542:	1d03      	adds	r3, r0, #4
 800d544:	e7f1      	b.n	800d52a <__exponent+0x58>
	...

0800d548 <_printf_float>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	b08d      	sub	sp, #52	@ 0x34
 800d54e:	460c      	mov	r4, r1
 800d550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d554:	4616      	mov	r6, r2
 800d556:	461f      	mov	r7, r3
 800d558:	4605      	mov	r5, r0
 800d55a:	f000 fcd9 	bl	800df10 <_localeconv_r>
 800d55e:	6803      	ldr	r3, [r0, #0]
 800d560:	9304      	str	r3, [sp, #16]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f2 feac 	bl	80002c0 <strlen>
 800d568:	2300      	movs	r3, #0
 800d56a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d56c:	f8d8 3000 	ldr.w	r3, [r8]
 800d570:	9005      	str	r0, [sp, #20]
 800d572:	3307      	adds	r3, #7
 800d574:	f023 0307 	bic.w	r3, r3, #7
 800d578:	f103 0208 	add.w	r2, r3, #8
 800d57c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d580:	f8d4 b000 	ldr.w	fp, [r4]
 800d584:	f8c8 2000 	str.w	r2, [r8]
 800d588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d58c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d590:	9307      	str	r3, [sp, #28]
 800d592:	f8cd 8018 	str.w	r8, [sp, #24]
 800d596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59e:	4b9c      	ldr	r3, [pc, #624]	@ (800d810 <_printf_float+0x2c8>)
 800d5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a4:	f7f3 faea 	bl	8000b7c <__aeabi_dcmpun>
 800d5a8:	bb70      	cbnz	r0, 800d608 <_printf_float+0xc0>
 800d5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ae:	4b98      	ldr	r3, [pc, #608]	@ (800d810 <_printf_float+0x2c8>)
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b4:	f7f3 fac4 	bl	8000b40 <__aeabi_dcmple>
 800d5b8:	bb30      	cbnz	r0, 800d608 <_printf_float+0xc0>
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f3 fab3 	bl	8000b2c <__aeabi_dcmplt>
 800d5c6:	b110      	cbz	r0, 800d5ce <_printf_float+0x86>
 800d5c8:	232d      	movs	r3, #45	@ 0x2d
 800d5ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ce:	4a91      	ldr	r2, [pc, #580]	@ (800d814 <_printf_float+0x2cc>)
 800d5d0:	4b91      	ldr	r3, [pc, #580]	@ (800d818 <_printf_float+0x2d0>)
 800d5d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5d6:	bf94      	ite	ls
 800d5d8:	4690      	movls	r8, r2
 800d5da:	4698      	movhi	r8, r3
 800d5dc:	2303      	movs	r3, #3
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	f02b 0304 	bic.w	r3, fp, #4
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	f04f 0900 	mov.w	r9, #0
 800d5ea:	9700      	str	r7, [sp, #0]
 800d5ec:	4633      	mov	r3, r6
 800d5ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 f9d2 	bl	800d99c <_printf_common>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f040 808d 	bne.w	800d718 <_printf_float+0x1d0>
 800d5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d602:	b00d      	add	sp, #52	@ 0x34
 800d604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d608:	4642      	mov	r2, r8
 800d60a:	464b      	mov	r3, r9
 800d60c:	4640      	mov	r0, r8
 800d60e:	4649      	mov	r1, r9
 800d610:	f7f3 fab4 	bl	8000b7c <__aeabi_dcmpun>
 800d614:	b140      	cbz	r0, 800d628 <_printf_float+0xe0>
 800d616:	464b      	mov	r3, r9
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bfbc      	itt	lt
 800d61c:	232d      	movlt	r3, #45	@ 0x2d
 800d61e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d622:	4a7e      	ldr	r2, [pc, #504]	@ (800d81c <_printf_float+0x2d4>)
 800d624:	4b7e      	ldr	r3, [pc, #504]	@ (800d820 <_printf_float+0x2d8>)
 800d626:	e7d4      	b.n	800d5d2 <_printf_float+0x8a>
 800d628:	6863      	ldr	r3, [r4, #4]
 800d62a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d62e:	9206      	str	r2, [sp, #24]
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	d13b      	bne.n	800d6ac <_printf_float+0x164>
 800d634:	2306      	movs	r3, #6
 800d636:	6063      	str	r3, [r4, #4]
 800d638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d63c:	2300      	movs	r3, #0
 800d63e:	6022      	str	r2, [r4, #0]
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	ab0a      	add	r3, sp, #40	@ 0x28
 800d644:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d648:	ab09      	add	r3, sp, #36	@ 0x24
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	6861      	ldr	r1, [r4, #4]
 800d64e:	ec49 8b10 	vmov	d0, r8, r9
 800d652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d656:	4628      	mov	r0, r5
 800d658:	f7ff fed6 	bl	800d408 <__cvt>
 800d65c:	9b06      	ldr	r3, [sp, #24]
 800d65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d660:	2b47      	cmp	r3, #71	@ 0x47
 800d662:	4680      	mov	r8, r0
 800d664:	d129      	bne.n	800d6ba <_printf_float+0x172>
 800d666:	1cc8      	adds	r0, r1, #3
 800d668:	db02      	blt.n	800d670 <_printf_float+0x128>
 800d66a:	6863      	ldr	r3, [r4, #4]
 800d66c:	4299      	cmp	r1, r3
 800d66e:	dd41      	ble.n	800d6f4 <_printf_float+0x1ac>
 800d670:	f1aa 0a02 	sub.w	sl, sl, #2
 800d674:	fa5f fa8a 	uxtb.w	sl, sl
 800d678:	3901      	subs	r1, #1
 800d67a:	4652      	mov	r2, sl
 800d67c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d680:	9109      	str	r1, [sp, #36]	@ 0x24
 800d682:	f7ff ff26 	bl	800d4d2 <__exponent>
 800d686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d688:	1813      	adds	r3, r2, r0
 800d68a:	2a01      	cmp	r2, #1
 800d68c:	4681      	mov	r9, r0
 800d68e:	6123      	str	r3, [r4, #16]
 800d690:	dc02      	bgt.n	800d698 <_printf_float+0x150>
 800d692:	6822      	ldr	r2, [r4, #0]
 800d694:	07d2      	lsls	r2, r2, #31
 800d696:	d501      	bpl.n	800d69c <_printf_float+0x154>
 800d698:	3301      	adds	r3, #1
 800d69a:	6123      	str	r3, [r4, #16]
 800d69c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0a2      	beq.n	800d5ea <_printf_float+0xa2>
 800d6a4:	232d      	movs	r3, #45	@ 0x2d
 800d6a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6aa:	e79e      	b.n	800d5ea <_printf_float+0xa2>
 800d6ac:	9a06      	ldr	r2, [sp, #24]
 800d6ae:	2a47      	cmp	r2, #71	@ 0x47
 800d6b0:	d1c2      	bne.n	800d638 <_printf_float+0xf0>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1c0      	bne.n	800d638 <_printf_float+0xf0>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e7bd      	b.n	800d636 <_printf_float+0xee>
 800d6ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6be:	d9db      	bls.n	800d678 <_printf_float+0x130>
 800d6c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6c4:	d118      	bne.n	800d6f8 <_printf_float+0x1b0>
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	dd0b      	ble.n	800d6e4 <_printf_float+0x19c>
 800d6cc:	6121      	str	r1, [r4, #16]
 800d6ce:	b913      	cbnz	r3, 800d6d6 <_printf_float+0x18e>
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	07d0      	lsls	r0, r2, #31
 800d6d4:	d502      	bpl.n	800d6dc <_printf_float+0x194>
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	440b      	add	r3, r1
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6de:	f04f 0900 	mov.w	r9, #0
 800d6e2:	e7db      	b.n	800d69c <_printf_float+0x154>
 800d6e4:	b913      	cbnz	r3, 800d6ec <_printf_float+0x1a4>
 800d6e6:	6822      	ldr	r2, [r4, #0]
 800d6e8:	07d2      	lsls	r2, r2, #31
 800d6ea:	d501      	bpl.n	800d6f0 <_printf_float+0x1a8>
 800d6ec:	3302      	adds	r3, #2
 800d6ee:	e7f4      	b.n	800d6da <_printf_float+0x192>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e7f2      	b.n	800d6da <_printf_float+0x192>
 800d6f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6fa:	4299      	cmp	r1, r3
 800d6fc:	db05      	blt.n	800d70a <_printf_float+0x1c2>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	6121      	str	r1, [r4, #16]
 800d702:	07d8      	lsls	r0, r3, #31
 800d704:	d5ea      	bpl.n	800d6dc <_printf_float+0x194>
 800d706:	1c4b      	adds	r3, r1, #1
 800d708:	e7e7      	b.n	800d6da <_printf_float+0x192>
 800d70a:	2900      	cmp	r1, #0
 800d70c:	bfd4      	ite	le
 800d70e:	f1c1 0202 	rsble	r2, r1, #2
 800d712:	2201      	movgt	r2, #1
 800d714:	4413      	add	r3, r2
 800d716:	e7e0      	b.n	800d6da <_printf_float+0x192>
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	055a      	lsls	r2, r3, #21
 800d71c:	d407      	bmi.n	800d72e <_printf_float+0x1e6>
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	4642      	mov	r2, r8
 800d722:	4631      	mov	r1, r6
 800d724:	4628      	mov	r0, r5
 800d726:	47b8      	blx	r7
 800d728:	3001      	adds	r0, #1
 800d72a:	d12b      	bne.n	800d784 <_printf_float+0x23c>
 800d72c:	e767      	b.n	800d5fe <_printf_float+0xb6>
 800d72e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d732:	f240 80dd 	bls.w	800d8f0 <_printf_float+0x3a8>
 800d736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d73a:	2200      	movs	r2, #0
 800d73c:	2300      	movs	r3, #0
 800d73e:	f7f3 f9eb 	bl	8000b18 <__aeabi_dcmpeq>
 800d742:	2800      	cmp	r0, #0
 800d744:	d033      	beq.n	800d7ae <_printf_float+0x266>
 800d746:	4a37      	ldr	r2, [pc, #220]	@ (800d824 <_printf_float+0x2dc>)
 800d748:	2301      	movs	r3, #1
 800d74a:	4631      	mov	r1, r6
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b8      	blx	r7
 800d750:	3001      	adds	r0, #1
 800d752:	f43f af54 	beq.w	800d5fe <_printf_float+0xb6>
 800d756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d75a:	4543      	cmp	r3, r8
 800d75c:	db02      	blt.n	800d764 <_printf_float+0x21c>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	07d8      	lsls	r0, r3, #31
 800d762:	d50f      	bpl.n	800d784 <_printf_float+0x23c>
 800d764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d768:	4631      	mov	r1, r6
 800d76a:	4628      	mov	r0, r5
 800d76c:	47b8      	blx	r7
 800d76e:	3001      	adds	r0, #1
 800d770:	f43f af45 	beq.w	800d5fe <_printf_float+0xb6>
 800d774:	f04f 0900 	mov.w	r9, #0
 800d778:	f108 38ff 	add.w	r8, r8, #4294967295
 800d77c:	f104 0a1a 	add.w	sl, r4, #26
 800d780:	45c8      	cmp	r8, r9
 800d782:	dc09      	bgt.n	800d798 <_printf_float+0x250>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	079b      	lsls	r3, r3, #30
 800d788:	f100 8103 	bmi.w	800d992 <_printf_float+0x44a>
 800d78c:	68e0      	ldr	r0, [r4, #12]
 800d78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d790:	4298      	cmp	r0, r3
 800d792:	bfb8      	it	lt
 800d794:	4618      	movlt	r0, r3
 800d796:	e734      	b.n	800d602 <_printf_float+0xba>
 800d798:	2301      	movs	r3, #1
 800d79a:	4652      	mov	r2, sl
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b8      	blx	r7
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	f43f af2b 	beq.w	800d5fe <_printf_float+0xb6>
 800d7a8:	f109 0901 	add.w	r9, r9, #1
 800d7ac:	e7e8      	b.n	800d780 <_printf_float+0x238>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	dc39      	bgt.n	800d828 <_printf_float+0x2e0>
 800d7b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d824 <_printf_float+0x2dc>)
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	f43f af1d 	beq.w	800d5fe <_printf_float+0xb6>
 800d7c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7c8:	ea59 0303 	orrs.w	r3, r9, r3
 800d7cc:	d102      	bne.n	800d7d4 <_printf_float+0x28c>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	07d9      	lsls	r1, r3, #31
 800d7d2:	d5d7      	bpl.n	800d784 <_printf_float+0x23c>
 800d7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	f43f af0d 	beq.w	800d5fe <_printf_float+0xb6>
 800d7e4:	f04f 0a00 	mov.w	sl, #0
 800d7e8:	f104 0b1a 	add.w	fp, r4, #26
 800d7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ee:	425b      	negs	r3, r3
 800d7f0:	4553      	cmp	r3, sl
 800d7f2:	dc01      	bgt.n	800d7f8 <_printf_float+0x2b0>
 800d7f4:	464b      	mov	r3, r9
 800d7f6:	e793      	b.n	800d720 <_printf_float+0x1d8>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	465a      	mov	r2, fp
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4628      	mov	r0, r5
 800d800:	47b8      	blx	r7
 800d802:	3001      	adds	r0, #1
 800d804:	f43f aefb 	beq.w	800d5fe <_printf_float+0xb6>
 800d808:	f10a 0a01 	add.w	sl, sl, #1
 800d80c:	e7ee      	b.n	800d7ec <_printf_float+0x2a4>
 800d80e:	bf00      	nop
 800d810:	7fefffff 	.word	0x7fefffff
 800d814:	08011b88 	.word	0x08011b88
 800d818:	08011b8c 	.word	0x08011b8c
 800d81c:	08011b90 	.word	0x08011b90
 800d820:	08011b94 	.word	0x08011b94
 800d824:	08011b98 	.word	0x08011b98
 800d828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d82a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d82e:	4553      	cmp	r3, sl
 800d830:	bfa8      	it	ge
 800d832:	4653      	movge	r3, sl
 800d834:	2b00      	cmp	r3, #0
 800d836:	4699      	mov	r9, r3
 800d838:	dc36      	bgt.n	800d8a8 <_printf_float+0x360>
 800d83a:	f04f 0b00 	mov.w	fp, #0
 800d83e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d842:	f104 021a 	add.w	r2, r4, #26
 800d846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d848:	9306      	str	r3, [sp, #24]
 800d84a:	eba3 0309 	sub.w	r3, r3, r9
 800d84e:	455b      	cmp	r3, fp
 800d850:	dc31      	bgt.n	800d8b6 <_printf_float+0x36e>
 800d852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d854:	459a      	cmp	sl, r3
 800d856:	dc3a      	bgt.n	800d8ce <_printf_float+0x386>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	07da      	lsls	r2, r3, #31
 800d85c:	d437      	bmi.n	800d8ce <_printf_float+0x386>
 800d85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d860:	ebaa 0903 	sub.w	r9, sl, r3
 800d864:	9b06      	ldr	r3, [sp, #24]
 800d866:	ebaa 0303 	sub.w	r3, sl, r3
 800d86a:	4599      	cmp	r9, r3
 800d86c:	bfa8      	it	ge
 800d86e:	4699      	movge	r9, r3
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	dc33      	bgt.n	800d8de <_printf_float+0x396>
 800d876:	f04f 0800 	mov.w	r8, #0
 800d87a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d87e:	f104 0b1a 	add.w	fp, r4, #26
 800d882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d884:	ebaa 0303 	sub.w	r3, sl, r3
 800d888:	eba3 0309 	sub.w	r3, r3, r9
 800d88c:	4543      	cmp	r3, r8
 800d88e:	f77f af79 	ble.w	800d784 <_printf_float+0x23c>
 800d892:	2301      	movs	r3, #1
 800d894:	465a      	mov	r2, fp
 800d896:	4631      	mov	r1, r6
 800d898:	4628      	mov	r0, r5
 800d89a:	47b8      	blx	r7
 800d89c:	3001      	adds	r0, #1
 800d89e:	f43f aeae 	beq.w	800d5fe <_printf_float+0xb6>
 800d8a2:	f108 0801 	add.w	r8, r8, #1
 800d8a6:	e7ec      	b.n	800d882 <_printf_float+0x33a>
 800d8a8:	4642      	mov	r2, r8
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	47b8      	blx	r7
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	d1c2      	bne.n	800d83a <_printf_float+0x2f2>
 800d8b4:	e6a3      	b.n	800d5fe <_printf_float+0xb6>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	4631      	mov	r1, r6
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	9206      	str	r2, [sp, #24]
 800d8be:	47b8      	blx	r7
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	f43f ae9c 	beq.w	800d5fe <_printf_float+0xb6>
 800d8c6:	9a06      	ldr	r2, [sp, #24]
 800d8c8:	f10b 0b01 	add.w	fp, fp, #1
 800d8cc:	e7bb      	b.n	800d846 <_printf_float+0x2fe>
 800d8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b8      	blx	r7
 800d8d8:	3001      	adds	r0, #1
 800d8da:	d1c0      	bne.n	800d85e <_printf_float+0x316>
 800d8dc:	e68f      	b.n	800d5fe <_printf_float+0xb6>
 800d8de:	9a06      	ldr	r2, [sp, #24]
 800d8e0:	464b      	mov	r3, r9
 800d8e2:	4442      	add	r2, r8
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	47b8      	blx	r7
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	d1c3      	bne.n	800d876 <_printf_float+0x32e>
 800d8ee:	e686      	b.n	800d5fe <_printf_float+0xb6>
 800d8f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d8f4:	f1ba 0f01 	cmp.w	sl, #1
 800d8f8:	dc01      	bgt.n	800d8fe <_printf_float+0x3b6>
 800d8fa:	07db      	lsls	r3, r3, #31
 800d8fc:	d536      	bpl.n	800d96c <_printf_float+0x424>
 800d8fe:	2301      	movs	r3, #1
 800d900:	4642      	mov	r2, r8
 800d902:	4631      	mov	r1, r6
 800d904:	4628      	mov	r0, r5
 800d906:	47b8      	blx	r7
 800d908:	3001      	adds	r0, #1
 800d90a:	f43f ae78 	beq.w	800d5fe <_printf_float+0xb6>
 800d90e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d912:	4631      	mov	r1, r6
 800d914:	4628      	mov	r0, r5
 800d916:	47b8      	blx	r7
 800d918:	3001      	adds	r0, #1
 800d91a:	f43f ae70 	beq.w	800d5fe <_printf_float+0xb6>
 800d91e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d922:	2200      	movs	r2, #0
 800d924:	2300      	movs	r3, #0
 800d926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d92a:	f7f3 f8f5 	bl	8000b18 <__aeabi_dcmpeq>
 800d92e:	b9c0      	cbnz	r0, 800d962 <_printf_float+0x41a>
 800d930:	4653      	mov	r3, sl
 800d932:	f108 0201 	add.w	r2, r8, #1
 800d936:	4631      	mov	r1, r6
 800d938:	4628      	mov	r0, r5
 800d93a:	47b8      	blx	r7
 800d93c:	3001      	adds	r0, #1
 800d93e:	d10c      	bne.n	800d95a <_printf_float+0x412>
 800d940:	e65d      	b.n	800d5fe <_printf_float+0xb6>
 800d942:	2301      	movs	r3, #1
 800d944:	465a      	mov	r2, fp
 800d946:	4631      	mov	r1, r6
 800d948:	4628      	mov	r0, r5
 800d94a:	47b8      	blx	r7
 800d94c:	3001      	adds	r0, #1
 800d94e:	f43f ae56 	beq.w	800d5fe <_printf_float+0xb6>
 800d952:	f108 0801 	add.w	r8, r8, #1
 800d956:	45d0      	cmp	r8, sl
 800d958:	dbf3      	blt.n	800d942 <_printf_float+0x3fa>
 800d95a:	464b      	mov	r3, r9
 800d95c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d960:	e6df      	b.n	800d722 <_printf_float+0x1da>
 800d962:	f04f 0800 	mov.w	r8, #0
 800d966:	f104 0b1a 	add.w	fp, r4, #26
 800d96a:	e7f4      	b.n	800d956 <_printf_float+0x40e>
 800d96c:	2301      	movs	r3, #1
 800d96e:	4642      	mov	r2, r8
 800d970:	e7e1      	b.n	800d936 <_printf_float+0x3ee>
 800d972:	2301      	movs	r3, #1
 800d974:	464a      	mov	r2, r9
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
 800d97a:	47b8      	blx	r7
 800d97c:	3001      	adds	r0, #1
 800d97e:	f43f ae3e 	beq.w	800d5fe <_printf_float+0xb6>
 800d982:	f108 0801 	add.w	r8, r8, #1
 800d986:	68e3      	ldr	r3, [r4, #12]
 800d988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d98a:	1a5b      	subs	r3, r3, r1
 800d98c:	4543      	cmp	r3, r8
 800d98e:	dcf0      	bgt.n	800d972 <_printf_float+0x42a>
 800d990:	e6fc      	b.n	800d78c <_printf_float+0x244>
 800d992:	f04f 0800 	mov.w	r8, #0
 800d996:	f104 0919 	add.w	r9, r4, #25
 800d99a:	e7f4      	b.n	800d986 <_printf_float+0x43e>

0800d99c <_printf_common>:
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	4616      	mov	r6, r2
 800d9a2:	4698      	mov	r8, r3
 800d9a4:	688a      	ldr	r2, [r1, #8]
 800d9a6:	690b      	ldr	r3, [r1, #16]
 800d9a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfb8      	it	lt
 800d9b0:	4613      	movlt	r3, r2
 800d9b2:	6033      	str	r3, [r6, #0]
 800d9b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9b8:	4607      	mov	r7, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	b10a      	cbz	r2, 800d9c2 <_printf_common+0x26>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	6033      	str	r3, [r6, #0]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	0699      	lsls	r1, r3, #26
 800d9c6:	bf42      	ittt	mi
 800d9c8:	6833      	ldrmi	r3, [r6, #0]
 800d9ca:	3302      	addmi	r3, #2
 800d9cc:	6033      	strmi	r3, [r6, #0]
 800d9ce:	6825      	ldr	r5, [r4, #0]
 800d9d0:	f015 0506 	ands.w	r5, r5, #6
 800d9d4:	d106      	bne.n	800d9e4 <_printf_common+0x48>
 800d9d6:	f104 0a19 	add.w	sl, r4, #25
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	6832      	ldr	r2, [r6, #0]
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	42ab      	cmp	r3, r5
 800d9e2:	dc26      	bgt.n	800da32 <_printf_common+0x96>
 800d9e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	3b00      	subs	r3, #0
 800d9ec:	bf18      	it	ne
 800d9ee:	2301      	movne	r3, #1
 800d9f0:	0692      	lsls	r2, r2, #26
 800d9f2:	d42b      	bmi.n	800da4c <_printf_common+0xb0>
 800d9f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	47c8      	blx	r9
 800d9fe:	3001      	adds	r0, #1
 800da00:	d01e      	beq.n	800da40 <_printf_common+0xa4>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	6922      	ldr	r2, [r4, #16]
 800da06:	f003 0306 	and.w	r3, r3, #6
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	bf02      	ittt	eq
 800da0e:	68e5      	ldreq	r5, [r4, #12]
 800da10:	6833      	ldreq	r3, [r6, #0]
 800da12:	1aed      	subeq	r5, r5, r3
 800da14:	68a3      	ldr	r3, [r4, #8]
 800da16:	bf0c      	ite	eq
 800da18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da1c:	2500      	movne	r5, #0
 800da1e:	4293      	cmp	r3, r2
 800da20:	bfc4      	itt	gt
 800da22:	1a9b      	subgt	r3, r3, r2
 800da24:	18ed      	addgt	r5, r5, r3
 800da26:	2600      	movs	r6, #0
 800da28:	341a      	adds	r4, #26
 800da2a:	42b5      	cmp	r5, r6
 800da2c:	d11a      	bne.n	800da64 <_printf_common+0xc8>
 800da2e:	2000      	movs	r0, #0
 800da30:	e008      	b.n	800da44 <_printf_common+0xa8>
 800da32:	2301      	movs	r3, #1
 800da34:	4652      	mov	r2, sl
 800da36:	4641      	mov	r1, r8
 800da38:	4638      	mov	r0, r7
 800da3a:	47c8      	blx	r9
 800da3c:	3001      	adds	r0, #1
 800da3e:	d103      	bne.n	800da48 <_printf_common+0xac>
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da48:	3501      	adds	r5, #1
 800da4a:	e7c6      	b.n	800d9da <_printf_common+0x3e>
 800da4c:	18e1      	adds	r1, r4, r3
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	2030      	movs	r0, #48	@ 0x30
 800da52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da56:	4422      	add	r2, r4
 800da58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da60:	3302      	adds	r3, #2
 800da62:	e7c7      	b.n	800d9f4 <_printf_common+0x58>
 800da64:	2301      	movs	r3, #1
 800da66:	4622      	mov	r2, r4
 800da68:	4641      	mov	r1, r8
 800da6a:	4638      	mov	r0, r7
 800da6c:	47c8      	blx	r9
 800da6e:	3001      	adds	r0, #1
 800da70:	d0e6      	beq.n	800da40 <_printf_common+0xa4>
 800da72:	3601      	adds	r6, #1
 800da74:	e7d9      	b.n	800da2a <_printf_common+0x8e>
	...

0800da78 <_printf_i>:
 800da78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	7e0f      	ldrb	r7, [r1, #24]
 800da7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da80:	2f78      	cmp	r7, #120	@ 0x78
 800da82:	4691      	mov	r9, r2
 800da84:	4680      	mov	r8, r0
 800da86:	460c      	mov	r4, r1
 800da88:	469a      	mov	sl, r3
 800da8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da8e:	d807      	bhi.n	800daa0 <_printf_i+0x28>
 800da90:	2f62      	cmp	r7, #98	@ 0x62
 800da92:	d80a      	bhi.n	800daaa <_printf_i+0x32>
 800da94:	2f00      	cmp	r7, #0
 800da96:	f000 80d2 	beq.w	800dc3e <_printf_i+0x1c6>
 800da9a:	2f58      	cmp	r7, #88	@ 0x58
 800da9c:	f000 80b9 	beq.w	800dc12 <_printf_i+0x19a>
 800daa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800daa8:	e03a      	b.n	800db20 <_printf_i+0xa8>
 800daaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daae:	2b15      	cmp	r3, #21
 800dab0:	d8f6      	bhi.n	800daa0 <_printf_i+0x28>
 800dab2:	a101      	add	r1, pc, #4	@ (adr r1, 800dab8 <_printf_i+0x40>)
 800dab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab8:	0800db11 	.word	0x0800db11
 800dabc:	0800db25 	.word	0x0800db25
 800dac0:	0800daa1 	.word	0x0800daa1
 800dac4:	0800daa1 	.word	0x0800daa1
 800dac8:	0800daa1 	.word	0x0800daa1
 800dacc:	0800daa1 	.word	0x0800daa1
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800daa1 	.word	0x0800daa1
 800dad8:	0800daa1 	.word	0x0800daa1
 800dadc:	0800daa1 	.word	0x0800daa1
 800dae0:	0800daa1 	.word	0x0800daa1
 800dae4:	0800dc25 	.word	0x0800dc25
 800dae8:	0800db4f 	.word	0x0800db4f
 800daec:	0800dbdf 	.word	0x0800dbdf
 800daf0:	0800daa1 	.word	0x0800daa1
 800daf4:	0800daa1 	.word	0x0800daa1
 800daf8:	0800dc47 	.word	0x0800dc47
 800dafc:	0800daa1 	.word	0x0800daa1
 800db00:	0800db4f 	.word	0x0800db4f
 800db04:	0800daa1 	.word	0x0800daa1
 800db08:	0800daa1 	.word	0x0800daa1
 800db0c:	0800dbe7 	.word	0x0800dbe7
 800db10:	6833      	ldr	r3, [r6, #0]
 800db12:	1d1a      	adds	r2, r3, #4
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6032      	str	r2, [r6, #0]
 800db18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db20:	2301      	movs	r3, #1
 800db22:	e09d      	b.n	800dc60 <_printf_i+0x1e8>
 800db24:	6833      	ldr	r3, [r6, #0]
 800db26:	6820      	ldr	r0, [r4, #0]
 800db28:	1d19      	adds	r1, r3, #4
 800db2a:	6031      	str	r1, [r6, #0]
 800db2c:	0606      	lsls	r6, r0, #24
 800db2e:	d501      	bpl.n	800db34 <_printf_i+0xbc>
 800db30:	681d      	ldr	r5, [r3, #0]
 800db32:	e003      	b.n	800db3c <_printf_i+0xc4>
 800db34:	0645      	lsls	r5, r0, #25
 800db36:	d5fb      	bpl.n	800db30 <_printf_i+0xb8>
 800db38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	da03      	bge.n	800db48 <_printf_i+0xd0>
 800db40:	232d      	movs	r3, #45	@ 0x2d
 800db42:	426d      	negs	r5, r5
 800db44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db48:	4859      	ldr	r0, [pc, #356]	@ (800dcb0 <_printf_i+0x238>)
 800db4a:	230a      	movs	r3, #10
 800db4c:	e011      	b.n	800db72 <_printf_i+0xfa>
 800db4e:	6821      	ldr	r1, [r4, #0]
 800db50:	6833      	ldr	r3, [r6, #0]
 800db52:	0608      	lsls	r0, r1, #24
 800db54:	f853 5b04 	ldr.w	r5, [r3], #4
 800db58:	d402      	bmi.n	800db60 <_printf_i+0xe8>
 800db5a:	0649      	lsls	r1, r1, #25
 800db5c:	bf48      	it	mi
 800db5e:	b2ad      	uxthmi	r5, r5
 800db60:	2f6f      	cmp	r7, #111	@ 0x6f
 800db62:	4853      	ldr	r0, [pc, #332]	@ (800dcb0 <_printf_i+0x238>)
 800db64:	6033      	str	r3, [r6, #0]
 800db66:	bf14      	ite	ne
 800db68:	230a      	movne	r3, #10
 800db6a:	2308      	moveq	r3, #8
 800db6c:	2100      	movs	r1, #0
 800db6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db72:	6866      	ldr	r6, [r4, #4]
 800db74:	60a6      	str	r6, [r4, #8]
 800db76:	2e00      	cmp	r6, #0
 800db78:	bfa2      	ittt	ge
 800db7a:	6821      	ldrge	r1, [r4, #0]
 800db7c:	f021 0104 	bicge.w	r1, r1, #4
 800db80:	6021      	strge	r1, [r4, #0]
 800db82:	b90d      	cbnz	r5, 800db88 <_printf_i+0x110>
 800db84:	2e00      	cmp	r6, #0
 800db86:	d04b      	beq.n	800dc20 <_printf_i+0x1a8>
 800db88:	4616      	mov	r6, r2
 800db8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800db8e:	fb03 5711 	mls	r7, r3, r1, r5
 800db92:	5dc7      	ldrb	r7, [r0, r7]
 800db94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db98:	462f      	mov	r7, r5
 800db9a:	42bb      	cmp	r3, r7
 800db9c:	460d      	mov	r5, r1
 800db9e:	d9f4      	bls.n	800db8a <_printf_i+0x112>
 800dba0:	2b08      	cmp	r3, #8
 800dba2:	d10b      	bne.n	800dbbc <_printf_i+0x144>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	07df      	lsls	r7, r3, #31
 800dba8:	d508      	bpl.n	800dbbc <_printf_i+0x144>
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	6861      	ldr	r1, [r4, #4]
 800dbae:	4299      	cmp	r1, r3
 800dbb0:	bfde      	ittt	le
 800dbb2:	2330      	movle	r3, #48	@ 0x30
 800dbb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbbc:	1b92      	subs	r2, r2, r6
 800dbbe:	6122      	str	r2, [r4, #16]
 800dbc0:	f8cd a000 	str.w	sl, [sp]
 800dbc4:	464b      	mov	r3, r9
 800dbc6:	aa03      	add	r2, sp, #12
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4640      	mov	r0, r8
 800dbcc:	f7ff fee6 	bl	800d99c <_printf_common>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d14a      	bne.n	800dc6a <_printf_i+0x1f2>
 800dbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd8:	b004      	add	sp, #16
 800dbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	f043 0320 	orr.w	r3, r3, #32
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	4833      	ldr	r0, [pc, #204]	@ (800dcb4 <_printf_i+0x23c>)
 800dbe8:	2778      	movs	r7, #120	@ 0x78
 800dbea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	6831      	ldr	r1, [r6, #0]
 800dbf2:	061f      	lsls	r7, r3, #24
 800dbf4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbf8:	d402      	bmi.n	800dc00 <_printf_i+0x188>
 800dbfa:	065f      	lsls	r7, r3, #25
 800dbfc:	bf48      	it	mi
 800dbfe:	b2ad      	uxthmi	r5, r5
 800dc00:	6031      	str	r1, [r6, #0]
 800dc02:	07d9      	lsls	r1, r3, #31
 800dc04:	bf44      	itt	mi
 800dc06:	f043 0320 	orrmi.w	r3, r3, #32
 800dc0a:	6023      	strmi	r3, [r4, #0]
 800dc0c:	b11d      	cbz	r5, 800dc16 <_printf_i+0x19e>
 800dc0e:	2310      	movs	r3, #16
 800dc10:	e7ac      	b.n	800db6c <_printf_i+0xf4>
 800dc12:	4827      	ldr	r0, [pc, #156]	@ (800dcb0 <_printf_i+0x238>)
 800dc14:	e7e9      	b.n	800dbea <_printf_i+0x172>
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	f023 0320 	bic.w	r3, r3, #32
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	e7f6      	b.n	800dc0e <_printf_i+0x196>
 800dc20:	4616      	mov	r6, r2
 800dc22:	e7bd      	b.n	800dba0 <_printf_i+0x128>
 800dc24:	6833      	ldr	r3, [r6, #0]
 800dc26:	6825      	ldr	r5, [r4, #0]
 800dc28:	6961      	ldr	r1, [r4, #20]
 800dc2a:	1d18      	adds	r0, r3, #4
 800dc2c:	6030      	str	r0, [r6, #0]
 800dc2e:	062e      	lsls	r6, r5, #24
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	d501      	bpl.n	800dc38 <_printf_i+0x1c0>
 800dc34:	6019      	str	r1, [r3, #0]
 800dc36:	e002      	b.n	800dc3e <_printf_i+0x1c6>
 800dc38:	0668      	lsls	r0, r5, #25
 800dc3a:	d5fb      	bpl.n	800dc34 <_printf_i+0x1bc>
 800dc3c:	8019      	strh	r1, [r3, #0]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6123      	str	r3, [r4, #16]
 800dc42:	4616      	mov	r6, r2
 800dc44:	e7bc      	b.n	800dbc0 <_printf_i+0x148>
 800dc46:	6833      	ldr	r3, [r6, #0]
 800dc48:	1d1a      	adds	r2, r3, #4
 800dc4a:	6032      	str	r2, [r6, #0]
 800dc4c:	681e      	ldr	r6, [r3, #0]
 800dc4e:	6862      	ldr	r2, [r4, #4]
 800dc50:	2100      	movs	r1, #0
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7f2 fae4 	bl	8000220 <memchr>
 800dc58:	b108      	cbz	r0, 800dc5e <_printf_i+0x1e6>
 800dc5a:	1b80      	subs	r0, r0, r6
 800dc5c:	6060      	str	r0, [r4, #4]
 800dc5e:	6863      	ldr	r3, [r4, #4]
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	2300      	movs	r3, #0
 800dc64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc68:	e7aa      	b.n	800dbc0 <_printf_i+0x148>
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	4632      	mov	r2, r6
 800dc6e:	4649      	mov	r1, r9
 800dc70:	4640      	mov	r0, r8
 800dc72:	47d0      	blx	sl
 800dc74:	3001      	adds	r0, #1
 800dc76:	d0ad      	beq.n	800dbd4 <_printf_i+0x15c>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	079b      	lsls	r3, r3, #30
 800dc7c:	d413      	bmi.n	800dca6 <_printf_i+0x22e>
 800dc7e:	68e0      	ldr	r0, [r4, #12]
 800dc80:	9b03      	ldr	r3, [sp, #12]
 800dc82:	4298      	cmp	r0, r3
 800dc84:	bfb8      	it	lt
 800dc86:	4618      	movlt	r0, r3
 800dc88:	e7a6      	b.n	800dbd8 <_printf_i+0x160>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	4649      	mov	r1, r9
 800dc90:	4640      	mov	r0, r8
 800dc92:	47d0      	blx	sl
 800dc94:	3001      	adds	r0, #1
 800dc96:	d09d      	beq.n	800dbd4 <_printf_i+0x15c>
 800dc98:	3501      	adds	r5, #1
 800dc9a:	68e3      	ldr	r3, [r4, #12]
 800dc9c:	9903      	ldr	r1, [sp, #12]
 800dc9e:	1a5b      	subs	r3, r3, r1
 800dca0:	42ab      	cmp	r3, r5
 800dca2:	dcf2      	bgt.n	800dc8a <_printf_i+0x212>
 800dca4:	e7eb      	b.n	800dc7e <_printf_i+0x206>
 800dca6:	2500      	movs	r5, #0
 800dca8:	f104 0619 	add.w	r6, r4, #25
 800dcac:	e7f5      	b.n	800dc9a <_printf_i+0x222>
 800dcae:	bf00      	nop
 800dcb0:	08011b9a 	.word	0x08011b9a
 800dcb4:	08011bab 	.word	0x08011bab

0800dcb8 <std>:
 800dcb8:	2300      	movs	r3, #0
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	e9c0 3300 	strd	r3, r3, [r0]
 800dcc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcc6:	6083      	str	r3, [r0, #8]
 800dcc8:	8181      	strh	r1, [r0, #12]
 800dcca:	6643      	str	r3, [r0, #100]	@ 0x64
 800dccc:	81c2      	strh	r2, [r0, #14]
 800dcce:	6183      	str	r3, [r0, #24]
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	2208      	movs	r2, #8
 800dcd4:	305c      	adds	r0, #92	@ 0x5c
 800dcd6:	f000 f8f4 	bl	800dec2 <memset>
 800dcda:	4b0d      	ldr	r3, [pc, #52]	@ (800dd10 <std+0x58>)
 800dcdc:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcde:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <std+0x5c>)
 800dce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <std+0x60>)
 800dce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dce6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd1c <std+0x64>)
 800dce8:	6323      	str	r3, [r4, #48]	@ 0x30
 800dcea:	4b0d      	ldr	r3, [pc, #52]	@ (800dd20 <std+0x68>)
 800dcec:	6224      	str	r4, [r4, #32]
 800dcee:	429c      	cmp	r4, r3
 800dcf0:	d006      	beq.n	800dd00 <std+0x48>
 800dcf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcf6:	4294      	cmp	r4, r2
 800dcf8:	d002      	beq.n	800dd00 <std+0x48>
 800dcfa:	33d0      	adds	r3, #208	@ 0xd0
 800dcfc:	429c      	cmp	r4, r3
 800dcfe:	d105      	bne.n	800dd0c <std+0x54>
 800dd00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd08:	f000 b976 	b.w	800dff8 <__retarget_lock_init_recursive>
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	bf00      	nop
 800dd10:	0800de3d 	.word	0x0800de3d
 800dd14:	0800de5f 	.word	0x0800de5f
 800dd18:	0800de97 	.word	0x0800de97
 800dd1c:	0800debb 	.word	0x0800debb
 800dd20:	20000718 	.word	0x20000718

0800dd24 <stdio_exit_handler>:
 800dd24:	4a02      	ldr	r2, [pc, #8]	@ (800dd30 <stdio_exit_handler+0xc>)
 800dd26:	4903      	ldr	r1, [pc, #12]	@ (800dd34 <stdio_exit_handler+0x10>)
 800dd28:	4803      	ldr	r0, [pc, #12]	@ (800dd38 <stdio_exit_handler+0x14>)
 800dd2a:	f000 b869 	b.w	800de00 <_fwalk_sglue>
 800dd2e:	bf00      	nop
 800dd30:	20000010 	.word	0x20000010
 800dd34:	0800fff9 	.word	0x0800fff9
 800dd38:	2000018c 	.word	0x2000018c

0800dd3c <cleanup_stdio>:
 800dd3c:	6841      	ldr	r1, [r0, #4]
 800dd3e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd70 <cleanup_stdio+0x34>)
 800dd40:	4299      	cmp	r1, r3
 800dd42:	b510      	push	{r4, lr}
 800dd44:	4604      	mov	r4, r0
 800dd46:	d001      	beq.n	800dd4c <cleanup_stdio+0x10>
 800dd48:	f002 f956 	bl	800fff8 <_fflush_r>
 800dd4c:	68a1      	ldr	r1, [r4, #8]
 800dd4e:	4b09      	ldr	r3, [pc, #36]	@ (800dd74 <cleanup_stdio+0x38>)
 800dd50:	4299      	cmp	r1, r3
 800dd52:	d002      	beq.n	800dd5a <cleanup_stdio+0x1e>
 800dd54:	4620      	mov	r0, r4
 800dd56:	f002 f94f 	bl	800fff8 <_fflush_r>
 800dd5a:	68e1      	ldr	r1, [r4, #12]
 800dd5c:	4b06      	ldr	r3, [pc, #24]	@ (800dd78 <cleanup_stdio+0x3c>)
 800dd5e:	4299      	cmp	r1, r3
 800dd60:	d004      	beq.n	800dd6c <cleanup_stdio+0x30>
 800dd62:	4620      	mov	r0, r4
 800dd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd68:	f002 b946 	b.w	800fff8 <_fflush_r>
 800dd6c:	bd10      	pop	{r4, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000718 	.word	0x20000718
 800dd74:	20000780 	.word	0x20000780
 800dd78:	200007e8 	.word	0x200007e8

0800dd7c <global_stdio_init.part.0>:
 800dd7c:	b510      	push	{r4, lr}
 800dd7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ddac <global_stdio_init.part.0+0x30>)
 800dd80:	4c0b      	ldr	r4, [pc, #44]	@ (800ddb0 <global_stdio_init.part.0+0x34>)
 800dd82:	4a0c      	ldr	r2, [pc, #48]	@ (800ddb4 <global_stdio_init.part.0+0x38>)
 800dd84:	601a      	str	r2, [r3, #0]
 800dd86:	4620      	mov	r0, r4
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2104      	movs	r1, #4
 800dd8c:	f7ff ff94 	bl	800dcb8 <std>
 800dd90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd94:	2201      	movs	r2, #1
 800dd96:	2109      	movs	r1, #9
 800dd98:	f7ff ff8e 	bl	800dcb8 <std>
 800dd9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dda0:	2202      	movs	r2, #2
 800dda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda6:	2112      	movs	r1, #18
 800dda8:	f7ff bf86 	b.w	800dcb8 <std>
 800ddac:	20000850 	.word	0x20000850
 800ddb0:	20000718 	.word	0x20000718
 800ddb4:	0800dd25 	.word	0x0800dd25

0800ddb8 <__sfp_lock_acquire>:
 800ddb8:	4801      	ldr	r0, [pc, #4]	@ (800ddc0 <__sfp_lock_acquire+0x8>)
 800ddba:	f000 b91e 	b.w	800dffa <__retarget_lock_acquire_recursive>
 800ddbe:	bf00      	nop
 800ddc0:	20000859 	.word	0x20000859

0800ddc4 <__sfp_lock_release>:
 800ddc4:	4801      	ldr	r0, [pc, #4]	@ (800ddcc <__sfp_lock_release+0x8>)
 800ddc6:	f000 b919 	b.w	800dffc <__retarget_lock_release_recursive>
 800ddca:	bf00      	nop
 800ddcc:	20000859 	.word	0x20000859

0800ddd0 <__sinit>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f7ff fff0 	bl	800ddb8 <__sfp_lock_acquire>
 800ddd8:	6a23      	ldr	r3, [r4, #32]
 800ddda:	b11b      	cbz	r3, 800dde4 <__sinit+0x14>
 800dddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dde0:	f7ff bff0 	b.w	800ddc4 <__sfp_lock_release>
 800dde4:	4b04      	ldr	r3, [pc, #16]	@ (800ddf8 <__sinit+0x28>)
 800dde6:	6223      	str	r3, [r4, #32]
 800dde8:	4b04      	ldr	r3, [pc, #16]	@ (800ddfc <__sinit+0x2c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1f5      	bne.n	800dddc <__sinit+0xc>
 800ddf0:	f7ff ffc4 	bl	800dd7c <global_stdio_init.part.0>
 800ddf4:	e7f2      	b.n	800dddc <__sinit+0xc>
 800ddf6:	bf00      	nop
 800ddf8:	0800dd3d 	.word	0x0800dd3d
 800ddfc:	20000850 	.word	0x20000850

0800de00 <_fwalk_sglue>:
 800de00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de04:	4607      	mov	r7, r0
 800de06:	4688      	mov	r8, r1
 800de08:	4614      	mov	r4, r2
 800de0a:	2600      	movs	r6, #0
 800de0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de10:	f1b9 0901 	subs.w	r9, r9, #1
 800de14:	d505      	bpl.n	800de22 <_fwalk_sglue+0x22>
 800de16:	6824      	ldr	r4, [r4, #0]
 800de18:	2c00      	cmp	r4, #0
 800de1a:	d1f7      	bne.n	800de0c <_fwalk_sglue+0xc>
 800de1c:	4630      	mov	r0, r6
 800de1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de22:	89ab      	ldrh	r3, [r5, #12]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d907      	bls.n	800de38 <_fwalk_sglue+0x38>
 800de28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de2c:	3301      	adds	r3, #1
 800de2e:	d003      	beq.n	800de38 <_fwalk_sglue+0x38>
 800de30:	4629      	mov	r1, r5
 800de32:	4638      	mov	r0, r7
 800de34:	47c0      	blx	r8
 800de36:	4306      	orrs	r6, r0
 800de38:	3568      	adds	r5, #104	@ 0x68
 800de3a:	e7e9      	b.n	800de10 <_fwalk_sglue+0x10>

0800de3c <__sread>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	460c      	mov	r4, r1
 800de40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de44:	f000 f88a 	bl	800df5c <_read_r>
 800de48:	2800      	cmp	r0, #0
 800de4a:	bfab      	itete	ge
 800de4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800de4e:	89a3      	ldrhlt	r3, [r4, #12]
 800de50:	181b      	addge	r3, r3, r0
 800de52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800de56:	bfac      	ite	ge
 800de58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800de5a:	81a3      	strhlt	r3, [r4, #12]
 800de5c:	bd10      	pop	{r4, pc}

0800de5e <__swrite>:
 800de5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de62:	461f      	mov	r7, r3
 800de64:	898b      	ldrh	r3, [r1, #12]
 800de66:	05db      	lsls	r3, r3, #23
 800de68:	4605      	mov	r5, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	4616      	mov	r6, r2
 800de6e:	d505      	bpl.n	800de7c <__swrite+0x1e>
 800de70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de74:	2302      	movs	r3, #2
 800de76:	2200      	movs	r2, #0
 800de78:	f000 f85e 	bl	800df38 <_lseek_r>
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	4632      	mov	r2, r6
 800de8a:	463b      	mov	r3, r7
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de92:	f000 b875 	b.w	800df80 <_write_r>

0800de96 <__sseek>:
 800de96:	b510      	push	{r4, lr}
 800de98:	460c      	mov	r4, r1
 800de9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9e:	f000 f84b 	bl	800df38 <_lseek_r>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	bf15      	itete	ne
 800dea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800deaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800deae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800deb2:	81a3      	strheq	r3, [r4, #12]
 800deb4:	bf18      	it	ne
 800deb6:	81a3      	strhne	r3, [r4, #12]
 800deb8:	bd10      	pop	{r4, pc}

0800deba <__sclose>:
 800deba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800debe:	f000 b82b 	b.w	800df18 <_close_r>

0800dec2 <memset>:
 800dec2:	4402      	add	r2, r0
 800dec4:	4603      	mov	r3, r0
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d100      	bne.n	800decc <memset+0xa>
 800deca:	4770      	bx	lr
 800decc:	f803 1b01 	strb.w	r1, [r3], #1
 800ded0:	e7f9      	b.n	800dec6 <memset+0x4>

0800ded2 <strchr>:
 800ded2:	b2c9      	uxtb	r1, r1
 800ded4:	4603      	mov	r3, r0
 800ded6:	4618      	mov	r0, r3
 800ded8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dedc:	b112      	cbz	r2, 800dee4 <strchr+0x12>
 800dede:	428a      	cmp	r2, r1
 800dee0:	d1f9      	bne.n	800ded6 <strchr+0x4>
 800dee2:	4770      	bx	lr
 800dee4:	2900      	cmp	r1, #0
 800dee6:	bf18      	it	ne
 800dee8:	2000      	movne	r0, #0
 800deea:	4770      	bx	lr

0800deec <strncmp>:
 800deec:	b510      	push	{r4, lr}
 800deee:	b16a      	cbz	r2, 800df0c <strncmp+0x20>
 800def0:	3901      	subs	r1, #1
 800def2:	1884      	adds	r4, r0, r2
 800def4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800def8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800defc:	429a      	cmp	r2, r3
 800defe:	d103      	bne.n	800df08 <strncmp+0x1c>
 800df00:	42a0      	cmp	r0, r4
 800df02:	d001      	beq.n	800df08 <strncmp+0x1c>
 800df04:	2a00      	cmp	r2, #0
 800df06:	d1f5      	bne.n	800def4 <strncmp+0x8>
 800df08:	1ad0      	subs	r0, r2, r3
 800df0a:	bd10      	pop	{r4, pc}
 800df0c:	4610      	mov	r0, r2
 800df0e:	e7fc      	b.n	800df0a <strncmp+0x1e>

0800df10 <_localeconv_r>:
 800df10:	4800      	ldr	r0, [pc, #0]	@ (800df14 <_localeconv_r+0x4>)
 800df12:	4770      	bx	lr
 800df14:	2000010c 	.word	0x2000010c

0800df18 <_close_r>:
 800df18:	b538      	push	{r3, r4, r5, lr}
 800df1a:	4d06      	ldr	r5, [pc, #24]	@ (800df34 <_close_r+0x1c>)
 800df1c:	2300      	movs	r3, #0
 800df1e:	4604      	mov	r4, r0
 800df20:	4608      	mov	r0, r1
 800df22:	602b      	str	r3, [r5, #0]
 800df24:	f7f5 f93a 	bl	800319c <_close>
 800df28:	1c43      	adds	r3, r0, #1
 800df2a:	d102      	bne.n	800df32 <_close_r+0x1a>
 800df2c:	682b      	ldr	r3, [r5, #0]
 800df2e:	b103      	cbz	r3, 800df32 <_close_r+0x1a>
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	bd38      	pop	{r3, r4, r5, pc}
 800df34:	20000854 	.word	0x20000854

0800df38 <_lseek_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d07      	ldr	r5, [pc, #28]	@ (800df58 <_lseek_r+0x20>)
 800df3c:	4604      	mov	r4, r0
 800df3e:	4608      	mov	r0, r1
 800df40:	4611      	mov	r1, r2
 800df42:	2200      	movs	r2, #0
 800df44:	602a      	str	r2, [r5, #0]
 800df46:	461a      	mov	r2, r3
 800df48:	f7f5 f94f 	bl	80031ea <_lseek>
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	d102      	bne.n	800df56 <_lseek_r+0x1e>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	b103      	cbz	r3, 800df56 <_lseek_r+0x1e>
 800df54:	6023      	str	r3, [r4, #0]
 800df56:	bd38      	pop	{r3, r4, r5, pc}
 800df58:	20000854 	.word	0x20000854

0800df5c <_read_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d07      	ldr	r5, [pc, #28]	@ (800df7c <_read_r+0x20>)
 800df60:	4604      	mov	r4, r0
 800df62:	4608      	mov	r0, r1
 800df64:	4611      	mov	r1, r2
 800df66:	2200      	movs	r2, #0
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f5 f8dd 	bl	800312a <_read>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_read_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_read_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	20000854 	.word	0x20000854

0800df80 <_write_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d07      	ldr	r5, [pc, #28]	@ (800dfa0 <_write_r+0x20>)
 800df84:	4604      	mov	r4, r0
 800df86:	4608      	mov	r0, r1
 800df88:	4611      	mov	r1, r2
 800df8a:	2200      	movs	r2, #0
 800df8c:	602a      	str	r2, [r5, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f7f5 f8e8 	bl	8003164 <_write>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_write_r+0x1e>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_write_r+0x1e>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	20000854 	.word	0x20000854

0800dfa4 <__errno>:
 800dfa4:	4b01      	ldr	r3, [pc, #4]	@ (800dfac <__errno+0x8>)
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000188 	.word	0x20000188

0800dfb0 <__libc_init_array>:
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800dfe8 <__libc_init_array+0x38>)
 800dfb4:	4c0d      	ldr	r4, [pc, #52]	@ (800dfec <__libc_init_array+0x3c>)
 800dfb6:	1b64      	subs	r4, r4, r5
 800dfb8:	10a4      	asrs	r4, r4, #2
 800dfba:	2600      	movs	r6, #0
 800dfbc:	42a6      	cmp	r6, r4
 800dfbe:	d109      	bne.n	800dfd4 <__libc_init_array+0x24>
 800dfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800dff0 <__libc_init_array+0x40>)
 800dfc2:	4c0c      	ldr	r4, [pc, #48]	@ (800dff4 <__libc_init_array+0x44>)
 800dfc4:	f003 fd88 	bl	8011ad8 <_init>
 800dfc8:	1b64      	subs	r4, r4, r5
 800dfca:	10a4      	asrs	r4, r4, #2
 800dfcc:	2600      	movs	r6, #0
 800dfce:	42a6      	cmp	r6, r4
 800dfd0:	d105      	bne.n	800dfde <__libc_init_array+0x2e>
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfd8:	4798      	blx	r3
 800dfda:	3601      	adds	r6, #1
 800dfdc:	e7ee      	b.n	800dfbc <__libc_init_array+0xc>
 800dfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfe2:	4798      	blx	r3
 800dfe4:	3601      	adds	r6, #1
 800dfe6:	e7f2      	b.n	800dfce <__libc_init_array+0x1e>
 800dfe8:	080123a0 	.word	0x080123a0
 800dfec:	080123a0 	.word	0x080123a0
 800dff0:	080123a0 	.word	0x080123a0
 800dff4:	080123a4 	.word	0x080123a4

0800dff8 <__retarget_lock_init_recursive>:
 800dff8:	4770      	bx	lr

0800dffa <__retarget_lock_acquire_recursive>:
 800dffa:	4770      	bx	lr

0800dffc <__retarget_lock_release_recursive>:
 800dffc:	4770      	bx	lr

0800dffe <memcpy>:
 800dffe:	440a      	add	r2, r1
 800e000:	4291      	cmp	r1, r2
 800e002:	f100 33ff 	add.w	r3, r0, #4294967295
 800e006:	d100      	bne.n	800e00a <memcpy+0xc>
 800e008:	4770      	bx	lr
 800e00a:	b510      	push	{r4, lr}
 800e00c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e010:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e014:	4291      	cmp	r1, r2
 800e016:	d1f9      	bne.n	800e00c <memcpy+0xe>
 800e018:	bd10      	pop	{r4, pc}
 800e01a:	0000      	movs	r0, r0
 800e01c:	0000      	movs	r0, r0
	...

0800e020 <nan>:
 800e020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e028 <nan+0x8>
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	00000000 	.word	0x00000000
 800e02c:	7ff80000 	.word	0x7ff80000

0800e030 <nanf>:
 800e030:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e038 <nanf+0x8>
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	7fc00000 	.word	0x7fc00000

0800e03c <quorem>:
 800e03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e040:	6903      	ldr	r3, [r0, #16]
 800e042:	690c      	ldr	r4, [r1, #16]
 800e044:	42a3      	cmp	r3, r4
 800e046:	4607      	mov	r7, r0
 800e048:	db7e      	blt.n	800e148 <quorem+0x10c>
 800e04a:	3c01      	subs	r4, #1
 800e04c:	f101 0814 	add.w	r8, r1, #20
 800e050:	00a3      	lsls	r3, r4, #2
 800e052:	f100 0514 	add.w	r5, r0, #20
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e05c:	9301      	str	r3, [sp, #4]
 800e05e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e066:	3301      	adds	r3, #1
 800e068:	429a      	cmp	r2, r3
 800e06a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e06e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e072:	d32e      	bcc.n	800e0d2 <quorem+0x96>
 800e074:	f04f 0a00 	mov.w	sl, #0
 800e078:	46c4      	mov	ip, r8
 800e07a:	46ae      	mov	lr, r5
 800e07c:	46d3      	mov	fp, sl
 800e07e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e082:	b298      	uxth	r0, r3
 800e084:	fb06 a000 	mla	r0, r6, r0, sl
 800e088:	0c02      	lsrs	r2, r0, #16
 800e08a:	0c1b      	lsrs	r3, r3, #16
 800e08c:	fb06 2303 	mla	r3, r6, r3, r2
 800e090:	f8de 2000 	ldr.w	r2, [lr]
 800e094:	b280      	uxth	r0, r0
 800e096:	b292      	uxth	r2, r2
 800e098:	1a12      	subs	r2, r2, r0
 800e09a:	445a      	add	r2, fp
 800e09c:	f8de 0000 	ldr.w	r0, [lr]
 800e0a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e0aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0ae:	b292      	uxth	r2, r2
 800e0b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e0b4:	45e1      	cmp	r9, ip
 800e0b6:	f84e 2b04 	str.w	r2, [lr], #4
 800e0ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e0be:	d2de      	bcs.n	800e07e <quorem+0x42>
 800e0c0:	9b00      	ldr	r3, [sp, #0]
 800e0c2:	58eb      	ldr	r3, [r5, r3]
 800e0c4:	b92b      	cbnz	r3, 800e0d2 <quorem+0x96>
 800e0c6:	9b01      	ldr	r3, [sp, #4]
 800e0c8:	3b04      	subs	r3, #4
 800e0ca:	429d      	cmp	r5, r3
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	d32f      	bcc.n	800e130 <quorem+0xf4>
 800e0d0:	613c      	str	r4, [r7, #16]
 800e0d2:	4638      	mov	r0, r7
 800e0d4:	f001 fd10 	bl	800faf8 <__mcmp>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	db25      	blt.n	800e128 <quorem+0xec>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	2000      	movs	r0, #0
 800e0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0e4:	f8d1 c000 	ldr.w	ip, [r1]
 800e0e8:	fa1f fe82 	uxth.w	lr, r2
 800e0ec:	fa1f f38c 	uxth.w	r3, ip
 800e0f0:	eba3 030e 	sub.w	r3, r3, lr
 800e0f4:	4403      	add	r3, r0
 800e0f6:	0c12      	lsrs	r2, r2, #16
 800e0f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e0fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e100:	b29b      	uxth	r3, r3
 800e102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e106:	45c1      	cmp	r9, r8
 800e108:	f841 3b04 	str.w	r3, [r1], #4
 800e10c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e110:	d2e6      	bcs.n	800e0e0 <quorem+0xa4>
 800e112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e11a:	b922      	cbnz	r2, 800e126 <quorem+0xea>
 800e11c:	3b04      	subs	r3, #4
 800e11e:	429d      	cmp	r5, r3
 800e120:	461a      	mov	r2, r3
 800e122:	d30b      	bcc.n	800e13c <quorem+0x100>
 800e124:	613c      	str	r4, [r7, #16]
 800e126:	3601      	adds	r6, #1
 800e128:	4630      	mov	r0, r6
 800e12a:	b003      	add	sp, #12
 800e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e130:	6812      	ldr	r2, [r2, #0]
 800e132:	3b04      	subs	r3, #4
 800e134:	2a00      	cmp	r2, #0
 800e136:	d1cb      	bne.n	800e0d0 <quorem+0x94>
 800e138:	3c01      	subs	r4, #1
 800e13a:	e7c6      	b.n	800e0ca <quorem+0x8e>
 800e13c:	6812      	ldr	r2, [r2, #0]
 800e13e:	3b04      	subs	r3, #4
 800e140:	2a00      	cmp	r2, #0
 800e142:	d1ef      	bne.n	800e124 <quorem+0xe8>
 800e144:	3c01      	subs	r4, #1
 800e146:	e7ea      	b.n	800e11e <quorem+0xe2>
 800e148:	2000      	movs	r0, #0
 800e14a:	e7ee      	b.n	800e12a <quorem+0xee>
 800e14c:	0000      	movs	r0, r0
	...

0800e150 <_dtoa_r>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	69c7      	ldr	r7, [r0, #28]
 800e156:	b099      	sub	sp, #100	@ 0x64
 800e158:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e15c:	ec55 4b10 	vmov	r4, r5, d0
 800e160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e162:	9109      	str	r1, [sp, #36]	@ 0x24
 800e164:	4683      	mov	fp, r0
 800e166:	920e      	str	r2, [sp, #56]	@ 0x38
 800e168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e16a:	b97f      	cbnz	r7, 800e18c <_dtoa_r+0x3c>
 800e16c:	2010      	movs	r0, #16
 800e16e:	f001 f937 	bl	800f3e0 <malloc>
 800e172:	4602      	mov	r2, r0
 800e174:	f8cb 001c 	str.w	r0, [fp, #28]
 800e178:	b920      	cbnz	r0, 800e184 <_dtoa_r+0x34>
 800e17a:	4ba7      	ldr	r3, [pc, #668]	@ (800e418 <_dtoa_r+0x2c8>)
 800e17c:	21ef      	movs	r1, #239	@ 0xef
 800e17e:	48a7      	ldr	r0, [pc, #668]	@ (800e41c <_dtoa_r+0x2cc>)
 800e180:	f001 ff72 	bl	8010068 <__assert_func>
 800e184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e188:	6007      	str	r7, [r0, #0]
 800e18a:	60c7      	str	r7, [r0, #12]
 800e18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e190:	6819      	ldr	r1, [r3, #0]
 800e192:	b159      	cbz	r1, 800e1ac <_dtoa_r+0x5c>
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	604a      	str	r2, [r1, #4]
 800e198:	2301      	movs	r3, #1
 800e19a:	4093      	lsls	r3, r2
 800e19c:	608b      	str	r3, [r1, #8]
 800e19e:	4658      	mov	r0, fp
 800e1a0:	f001 fa26 	bl	800f5f0 <_Bfree>
 800e1a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]
 800e1ac:	1e2b      	subs	r3, r5, #0
 800e1ae:	bfb9      	ittee	lt
 800e1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e1b4:	9303      	strlt	r3, [sp, #12]
 800e1b6:	2300      	movge	r3, #0
 800e1b8:	6033      	strge	r3, [r6, #0]
 800e1ba:	9f03      	ldr	r7, [sp, #12]
 800e1bc:	4b98      	ldr	r3, [pc, #608]	@ (800e420 <_dtoa_r+0x2d0>)
 800e1be:	bfbc      	itt	lt
 800e1c0:	2201      	movlt	r2, #1
 800e1c2:	6032      	strlt	r2, [r6, #0]
 800e1c4:	43bb      	bics	r3, r7
 800e1c6:	d112      	bne.n	800e1ee <_dtoa_r+0x9e>
 800e1c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e1ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1d4:	4323      	orrs	r3, r4
 800e1d6:	f000 854d 	beq.w	800ec74 <_dtoa_r+0xb24>
 800e1da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e434 <_dtoa_r+0x2e4>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 854f 	beq.w	800ec84 <_dtoa_r+0xb34>
 800e1e6:	f10a 0303 	add.w	r3, sl, #3
 800e1ea:	f000 bd49 	b.w	800ec80 <_dtoa_r+0xb30>
 800e1ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	ec51 0b17 	vmov	r0, r1, d7
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e1fe:	f7f2 fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 800e202:	4680      	mov	r8, r0
 800e204:	b158      	cbz	r0, 800e21e <_dtoa_r+0xce>
 800e206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e208:	2301      	movs	r3, #1
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e20e:	b113      	cbz	r3, 800e216 <_dtoa_r+0xc6>
 800e210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e212:	4b84      	ldr	r3, [pc, #528]	@ (800e424 <_dtoa_r+0x2d4>)
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e438 <_dtoa_r+0x2e8>
 800e21a:	f000 bd33 	b.w	800ec84 <_dtoa_r+0xb34>
 800e21e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e222:	aa16      	add	r2, sp, #88	@ 0x58
 800e224:	a917      	add	r1, sp, #92	@ 0x5c
 800e226:	4658      	mov	r0, fp
 800e228:	f001 fd86 	bl	800fd38 <__d2b>
 800e22c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e230:	4681      	mov	r9, r0
 800e232:	2e00      	cmp	r6, #0
 800e234:	d077      	beq.n	800e326 <_dtoa_r+0x1d6>
 800e236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e24c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e250:	4619      	mov	r1, r3
 800e252:	2200      	movs	r2, #0
 800e254:	4b74      	ldr	r3, [pc, #464]	@ (800e428 <_dtoa_r+0x2d8>)
 800e256:	f7f2 f83f 	bl	80002d8 <__aeabi_dsub>
 800e25a:	a369      	add	r3, pc, #420	@ (adr r3, 800e400 <_dtoa_r+0x2b0>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 f9f2 	bl	8000648 <__aeabi_dmul>
 800e264:	a368      	add	r3, pc, #416	@ (adr r3, 800e408 <_dtoa_r+0x2b8>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f837 	bl	80002dc <__adddf3>
 800e26e:	4604      	mov	r4, r0
 800e270:	4630      	mov	r0, r6
 800e272:	460d      	mov	r5, r1
 800e274:	f7f2 f97e 	bl	8000574 <__aeabi_i2d>
 800e278:	a365      	add	r3, pc, #404	@ (adr r3, 800e410 <_dtoa_r+0x2c0>)
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	f7f2 f9e3 	bl	8000648 <__aeabi_dmul>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4620      	mov	r0, r4
 800e288:	4629      	mov	r1, r5
 800e28a:	f7f2 f827 	bl	80002dc <__adddf3>
 800e28e:	4604      	mov	r4, r0
 800e290:	460d      	mov	r5, r1
 800e292:	f7f2 fc89 	bl	8000ba8 <__aeabi_d2iz>
 800e296:	2200      	movs	r2, #0
 800e298:	4607      	mov	r7, r0
 800e29a:	2300      	movs	r3, #0
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 fc44 	bl	8000b2c <__aeabi_dcmplt>
 800e2a4:	b140      	cbz	r0, 800e2b8 <_dtoa_r+0x168>
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7f2 f964 	bl	8000574 <__aeabi_i2d>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	f7f2 fc32 	bl	8000b18 <__aeabi_dcmpeq>
 800e2b4:	b900      	cbnz	r0, 800e2b8 <_dtoa_r+0x168>
 800e2b6:	3f01      	subs	r7, #1
 800e2b8:	2f16      	cmp	r7, #22
 800e2ba:	d851      	bhi.n	800e360 <_dtoa_r+0x210>
 800e2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e42c <_dtoa_r+0x2dc>)
 800e2be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2ca:	f7f2 fc2f 	bl	8000b2c <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d048      	beq.n	800e364 <_dtoa_r+0x214>
 800e2d2:	3f01      	subs	r7, #1
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e2d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2da:	1b9b      	subs	r3, r3, r6
 800e2dc:	1e5a      	subs	r2, r3, #1
 800e2de:	bf44      	itt	mi
 800e2e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e2e4:	2300      	movmi	r3, #0
 800e2e6:	9208      	str	r2, [sp, #32]
 800e2e8:	bf54      	ite	pl
 800e2ea:	f04f 0800 	movpl.w	r8, #0
 800e2ee:	9308      	strmi	r3, [sp, #32]
 800e2f0:	2f00      	cmp	r7, #0
 800e2f2:	db39      	blt.n	800e368 <_dtoa_r+0x218>
 800e2f4:	9b08      	ldr	r3, [sp, #32]
 800e2f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e2f8:	443b      	add	r3, r7
 800e2fa:	9308      	str	r3, [sp, #32]
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e302:	2b09      	cmp	r3, #9
 800e304:	d864      	bhi.n	800e3d0 <_dtoa_r+0x280>
 800e306:	2b05      	cmp	r3, #5
 800e308:	bfc4      	itt	gt
 800e30a:	3b04      	subgt	r3, #4
 800e30c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e310:	f1a3 0302 	sub.w	r3, r3, #2
 800e314:	bfcc      	ite	gt
 800e316:	2400      	movgt	r4, #0
 800e318:	2401      	movle	r4, #1
 800e31a:	2b03      	cmp	r3, #3
 800e31c:	d863      	bhi.n	800e3e6 <_dtoa_r+0x296>
 800e31e:	e8df f003 	tbb	[pc, r3]
 800e322:	372a      	.short	0x372a
 800e324:	5535      	.short	0x5535
 800e326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e32a:	441e      	add	r6, r3
 800e32c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e330:	2b20      	cmp	r3, #32
 800e332:	bfc1      	itttt	gt
 800e334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e338:	409f      	lslgt	r7, r3
 800e33a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e33e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e342:	bfd6      	itet	le
 800e344:	f1c3 0320 	rsble	r3, r3, #32
 800e348:	ea47 0003 	orrgt.w	r0, r7, r3
 800e34c:	fa04 f003 	lslle.w	r0, r4, r3
 800e350:	f7f2 f900 	bl	8000554 <__aeabi_ui2d>
 800e354:	2201      	movs	r2, #1
 800e356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e35a:	3e01      	subs	r6, #1
 800e35c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e35e:	e777      	b.n	800e250 <_dtoa_r+0x100>
 800e360:	2301      	movs	r3, #1
 800e362:	e7b8      	b.n	800e2d6 <_dtoa_r+0x186>
 800e364:	9012      	str	r0, [sp, #72]	@ 0x48
 800e366:	e7b7      	b.n	800e2d8 <_dtoa_r+0x188>
 800e368:	427b      	negs	r3, r7
 800e36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e36c:	2300      	movs	r3, #0
 800e36e:	eba8 0807 	sub.w	r8, r8, r7
 800e372:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e374:	e7c4      	b.n	800e300 <_dtoa_r+0x1b0>
 800e376:	2300      	movs	r3, #0
 800e378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	dc35      	bgt.n	800e3ec <_dtoa_r+0x29c>
 800e380:	2301      	movs	r3, #1
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	9307      	str	r3, [sp, #28]
 800e386:	461a      	mov	r2, r3
 800e388:	920e      	str	r2, [sp, #56]	@ 0x38
 800e38a:	e00b      	b.n	800e3a4 <_dtoa_r+0x254>
 800e38c:	2301      	movs	r3, #1
 800e38e:	e7f3      	b.n	800e378 <_dtoa_r+0x228>
 800e390:	2300      	movs	r3, #0
 800e392:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e396:	18fb      	adds	r3, r7, r3
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	9307      	str	r3, [sp, #28]
 800e3a0:	bfb8      	it	lt
 800e3a2:	2301      	movlt	r3, #1
 800e3a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	f102 0514 	add.w	r5, r2, #20
 800e3b0:	429d      	cmp	r5, r3
 800e3b2:	d91f      	bls.n	800e3f4 <_dtoa_r+0x2a4>
 800e3b4:	6041      	str	r1, [r0, #4]
 800e3b6:	4658      	mov	r0, fp
 800e3b8:	f001 f8da 	bl	800f570 <_Balloc>
 800e3bc:	4682      	mov	sl, r0
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d13c      	bne.n	800e43c <_dtoa_r+0x2ec>
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e430 <_dtoa_r+0x2e0>)
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3ca:	e6d8      	b.n	800e17e <_dtoa_r+0x2e>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e7e0      	b.n	800e392 <_dtoa_r+0x242>
 800e3d0:	2401      	movs	r4, #1
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	9307      	str	r3, [sp, #28]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2312      	movs	r3, #18
 800e3e4:	e7d0      	b.n	800e388 <_dtoa_r+0x238>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ea:	e7f5      	b.n	800e3d8 <_dtoa_r+0x288>
 800e3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	9307      	str	r3, [sp, #28]
 800e3f2:	e7d7      	b.n	800e3a4 <_dtoa_r+0x254>
 800e3f4:	3101      	adds	r1, #1
 800e3f6:	0052      	lsls	r2, r2, #1
 800e3f8:	e7d8      	b.n	800e3ac <_dtoa_r+0x25c>
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w
 800e400:	636f4361 	.word	0x636f4361
 800e404:	3fd287a7 	.word	0x3fd287a7
 800e408:	8b60c8b3 	.word	0x8b60c8b3
 800e40c:	3fc68a28 	.word	0x3fc68a28
 800e410:	509f79fb 	.word	0x509f79fb
 800e414:	3fd34413 	.word	0x3fd34413
 800e418:	08011bd1 	.word	0x08011bd1
 800e41c:	08011be8 	.word	0x08011be8
 800e420:	7ff00000 	.word	0x7ff00000
 800e424:	08011b99 	.word	0x08011b99
 800e428:	3ff80000 	.word	0x3ff80000
 800e42c:	08011d40 	.word	0x08011d40
 800e430:	08011c40 	.word	0x08011c40
 800e434:	08011bcd 	.word	0x08011bcd
 800e438:	08011b98 	.word	0x08011b98
 800e43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e440:	6018      	str	r0, [r3, #0]
 800e442:	9b07      	ldr	r3, [sp, #28]
 800e444:	2b0e      	cmp	r3, #14
 800e446:	f200 80a4 	bhi.w	800e592 <_dtoa_r+0x442>
 800e44a:	2c00      	cmp	r4, #0
 800e44c:	f000 80a1 	beq.w	800e592 <_dtoa_r+0x442>
 800e450:	2f00      	cmp	r7, #0
 800e452:	dd33      	ble.n	800e4bc <_dtoa_r+0x36c>
 800e454:	4bad      	ldr	r3, [pc, #692]	@ (800e70c <_dtoa_r+0x5bc>)
 800e456:	f007 020f 	and.w	r2, r7, #15
 800e45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e45e:	ed93 7b00 	vldr	d7, [r3]
 800e462:	05f8      	lsls	r0, r7, #23
 800e464:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e46c:	d516      	bpl.n	800e49c <_dtoa_r+0x34c>
 800e46e:	4ba8      	ldr	r3, [pc, #672]	@ (800e710 <_dtoa_r+0x5c0>)
 800e470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e478:	f7f2 fa10 	bl	800089c <__aeabi_ddiv>
 800e47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e480:	f004 040f 	and.w	r4, r4, #15
 800e484:	2603      	movs	r6, #3
 800e486:	4da2      	ldr	r5, [pc, #648]	@ (800e710 <_dtoa_r+0x5c0>)
 800e488:	b954      	cbnz	r4, 800e4a0 <_dtoa_r+0x350>
 800e48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e492:	f7f2 fa03 	bl	800089c <__aeabi_ddiv>
 800e496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e49a:	e028      	b.n	800e4ee <_dtoa_r+0x39e>
 800e49c:	2602      	movs	r6, #2
 800e49e:	e7f2      	b.n	800e486 <_dtoa_r+0x336>
 800e4a0:	07e1      	lsls	r1, r4, #31
 800e4a2:	d508      	bpl.n	800e4b6 <_dtoa_r+0x366>
 800e4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4ac:	f7f2 f8cc 	bl	8000648 <__aeabi_dmul>
 800e4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	1064      	asrs	r4, r4, #1
 800e4b8:	3508      	adds	r5, #8
 800e4ba:	e7e5      	b.n	800e488 <_dtoa_r+0x338>
 800e4bc:	f000 80d2 	beq.w	800e664 <_dtoa_r+0x514>
 800e4c0:	427c      	negs	r4, r7
 800e4c2:	4b92      	ldr	r3, [pc, #584]	@ (800e70c <_dtoa_r+0x5bc>)
 800e4c4:	4d92      	ldr	r5, [pc, #584]	@ (800e710 <_dtoa_r+0x5c0>)
 800e4c6:	f004 020f 	and.w	r2, r4, #15
 800e4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4d6:	f7f2 f8b7 	bl	8000648 <__aeabi_dmul>
 800e4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4de:	1124      	asrs	r4, r4, #4
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2602      	movs	r6, #2
 800e4e4:	2c00      	cmp	r4, #0
 800e4e6:	f040 80b2 	bne.w	800e64e <_dtoa_r+0x4fe>
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1d3      	bne.n	800e496 <_dtoa_r+0x346>
 800e4ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80b7 	beq.w	800e668 <_dtoa_r+0x518>
 800e4fa:	4b86      	ldr	r3, [pc, #536]	@ (800e714 <_dtoa_r+0x5c4>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4620      	mov	r0, r4
 800e500:	4629      	mov	r1, r5
 800e502:	f7f2 fb13 	bl	8000b2c <__aeabi_dcmplt>
 800e506:	2800      	cmp	r0, #0
 800e508:	f000 80ae 	beq.w	800e668 <_dtoa_r+0x518>
 800e50c:	9b07      	ldr	r3, [sp, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80aa 	beq.w	800e668 <_dtoa_r+0x518>
 800e514:	9b00      	ldr	r3, [sp, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dd37      	ble.n	800e58a <_dtoa_r+0x43a>
 800e51a:	1e7b      	subs	r3, r7, #1
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	4620      	mov	r0, r4
 800e520:	4b7d      	ldr	r3, [pc, #500]	@ (800e718 <_dtoa_r+0x5c8>)
 800e522:	2200      	movs	r2, #0
 800e524:	4629      	mov	r1, r5
 800e526:	f7f2 f88f 	bl	8000648 <__aeabi_dmul>
 800e52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e52e:	9c00      	ldr	r4, [sp, #0]
 800e530:	3601      	adds	r6, #1
 800e532:	4630      	mov	r0, r6
 800e534:	f7f2 f81e 	bl	8000574 <__aeabi_i2d>
 800e538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e53c:	f7f2 f884 	bl	8000648 <__aeabi_dmul>
 800e540:	4b76      	ldr	r3, [pc, #472]	@ (800e71c <_dtoa_r+0x5cc>)
 800e542:	2200      	movs	r2, #0
 800e544:	f7f1 feca 	bl	80002dc <__adddf3>
 800e548:	4605      	mov	r5, r0
 800e54a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e54e:	2c00      	cmp	r4, #0
 800e550:	f040 808d 	bne.w	800e66e <_dtoa_r+0x51e>
 800e554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e558:	4b71      	ldr	r3, [pc, #452]	@ (800e720 <_dtoa_r+0x5d0>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	f7f1 febc 	bl	80002d8 <__aeabi_dsub>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e568:	462a      	mov	r2, r5
 800e56a:	4633      	mov	r3, r6
 800e56c:	f7f2 fafc 	bl	8000b68 <__aeabi_dcmpgt>
 800e570:	2800      	cmp	r0, #0
 800e572:	f040 828b 	bne.w	800ea8c <_dtoa_r+0x93c>
 800e576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57a:	462a      	mov	r2, r5
 800e57c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e580:	f7f2 fad4 	bl	8000b2c <__aeabi_dcmplt>
 800e584:	2800      	cmp	r0, #0
 800e586:	f040 8128 	bne.w	800e7da <_dtoa_r+0x68a>
 800e58a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e58e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e594:	2b00      	cmp	r3, #0
 800e596:	f2c0 815a 	blt.w	800e84e <_dtoa_r+0x6fe>
 800e59a:	2f0e      	cmp	r7, #14
 800e59c:	f300 8157 	bgt.w	800e84e <_dtoa_r+0x6fe>
 800e5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e70c <_dtoa_r+0x5bc>)
 800e5a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e5a6:	ed93 7b00 	vldr	d7, [r3]
 800e5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	ed8d 7b00 	vstr	d7, [sp]
 800e5b2:	da03      	bge.n	800e5bc <_dtoa_r+0x46c>
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f340 8101 	ble.w	800e7be <_dtoa_r+0x66e>
 800e5bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5c0:	4656      	mov	r6, sl
 800e5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	f7f2 f967 	bl	800089c <__aeabi_ddiv>
 800e5ce:	f7f2 faeb 	bl	8000ba8 <__aeabi_d2iz>
 800e5d2:	4680      	mov	r8, r0
 800e5d4:	f7f1 ffce 	bl	8000574 <__aeabi_i2d>
 800e5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5dc:	f7f2 f834 	bl	8000648 <__aeabi_dmul>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e5ec:	f7f1 fe74 	bl	80002d8 <__aeabi_dsub>
 800e5f0:	f806 4b01 	strb.w	r4, [r6], #1
 800e5f4:	9d07      	ldr	r5, [sp, #28]
 800e5f6:	eba6 040a 	sub.w	r4, r6, sl
 800e5fa:	42a5      	cmp	r5, r4
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	f040 8117 	bne.w	800e832 <_dtoa_r+0x6e2>
 800e604:	f7f1 fe6a 	bl	80002dc <__adddf3>
 800e608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e60c:	4604      	mov	r4, r0
 800e60e:	460d      	mov	r5, r1
 800e610:	f7f2 faaa 	bl	8000b68 <__aeabi_dcmpgt>
 800e614:	2800      	cmp	r0, #0
 800e616:	f040 80f9 	bne.w	800e80c <_dtoa_r+0x6bc>
 800e61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e61e:	4620      	mov	r0, r4
 800e620:	4629      	mov	r1, r5
 800e622:	f7f2 fa79 	bl	8000b18 <__aeabi_dcmpeq>
 800e626:	b118      	cbz	r0, 800e630 <_dtoa_r+0x4e0>
 800e628:	f018 0f01 	tst.w	r8, #1
 800e62c:	f040 80ee 	bne.w	800e80c <_dtoa_r+0x6bc>
 800e630:	4649      	mov	r1, r9
 800e632:	4658      	mov	r0, fp
 800e634:	f000 ffdc 	bl	800f5f0 <_Bfree>
 800e638:	2300      	movs	r3, #0
 800e63a:	7033      	strb	r3, [r6, #0]
 800e63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e63e:	3701      	adds	r7, #1
 800e640:	601f      	str	r7, [r3, #0]
 800e642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 831d 	beq.w	800ec84 <_dtoa_r+0xb34>
 800e64a:	601e      	str	r6, [r3, #0]
 800e64c:	e31a      	b.n	800ec84 <_dtoa_r+0xb34>
 800e64e:	07e2      	lsls	r2, r4, #31
 800e650:	d505      	bpl.n	800e65e <_dtoa_r+0x50e>
 800e652:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e656:	f7f1 fff7 	bl	8000648 <__aeabi_dmul>
 800e65a:	3601      	adds	r6, #1
 800e65c:	2301      	movs	r3, #1
 800e65e:	1064      	asrs	r4, r4, #1
 800e660:	3508      	adds	r5, #8
 800e662:	e73f      	b.n	800e4e4 <_dtoa_r+0x394>
 800e664:	2602      	movs	r6, #2
 800e666:	e742      	b.n	800e4ee <_dtoa_r+0x39e>
 800e668:	9c07      	ldr	r4, [sp, #28]
 800e66a:	9704      	str	r7, [sp, #16]
 800e66c:	e761      	b.n	800e532 <_dtoa_r+0x3e2>
 800e66e:	4b27      	ldr	r3, [pc, #156]	@ (800e70c <_dtoa_r+0x5bc>)
 800e670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e67a:	4454      	add	r4, sl
 800e67c:	2900      	cmp	r1, #0
 800e67e:	d053      	beq.n	800e728 <_dtoa_r+0x5d8>
 800e680:	4928      	ldr	r1, [pc, #160]	@ (800e724 <_dtoa_r+0x5d4>)
 800e682:	2000      	movs	r0, #0
 800e684:	f7f2 f90a 	bl	800089c <__aeabi_ddiv>
 800e688:	4633      	mov	r3, r6
 800e68a:	462a      	mov	r2, r5
 800e68c:	f7f1 fe24 	bl	80002d8 <__aeabi_dsub>
 800e690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e694:	4656      	mov	r6, sl
 800e696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e69a:	f7f2 fa85 	bl	8000ba8 <__aeabi_d2iz>
 800e69e:	4605      	mov	r5, r0
 800e6a0:	f7f1 ff68 	bl	8000574 <__aeabi_i2d>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ac:	f7f1 fe14 	bl	80002d8 <__aeabi_dsub>
 800e6b0:	3530      	adds	r5, #48	@ 0x30
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6ba:	f806 5b01 	strb.w	r5, [r6], #1
 800e6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6c2:	f7f2 fa33 	bl	8000b2c <__aeabi_dcmplt>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d171      	bne.n	800e7ae <_dtoa_r+0x65e>
 800e6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6ce:	4911      	ldr	r1, [pc, #68]	@ (800e714 <_dtoa_r+0x5c4>)
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	f7f1 fe01 	bl	80002d8 <__aeabi_dsub>
 800e6d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6da:	f7f2 fa27 	bl	8000b2c <__aeabi_dcmplt>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f040 8095 	bne.w	800e80e <_dtoa_r+0x6be>
 800e6e4:	42a6      	cmp	r6, r4
 800e6e6:	f43f af50 	beq.w	800e58a <_dtoa_r+0x43a>
 800e6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e718 <_dtoa_r+0x5c8>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7f1 ffa9 	bl	8000648 <__aeabi_dmul>
 800e6f6:	4b08      	ldr	r3, [pc, #32]	@ (800e718 <_dtoa_r+0x5c8>)
 800e6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e702:	f7f1 ffa1 	bl	8000648 <__aeabi_dmul>
 800e706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e70a:	e7c4      	b.n	800e696 <_dtoa_r+0x546>
 800e70c:	08011d40 	.word	0x08011d40
 800e710:	08011d18 	.word	0x08011d18
 800e714:	3ff00000 	.word	0x3ff00000
 800e718:	40240000 	.word	0x40240000
 800e71c:	401c0000 	.word	0x401c0000
 800e720:	40140000 	.word	0x40140000
 800e724:	3fe00000 	.word	0x3fe00000
 800e728:	4631      	mov	r1, r6
 800e72a:	4628      	mov	r0, r5
 800e72c:	f7f1 ff8c 	bl	8000648 <__aeabi_dmul>
 800e730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e734:	9415      	str	r4, [sp, #84]	@ 0x54
 800e736:	4656      	mov	r6, sl
 800e738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e73c:	f7f2 fa34 	bl	8000ba8 <__aeabi_d2iz>
 800e740:	4605      	mov	r5, r0
 800e742:	f7f1 ff17 	bl	8000574 <__aeabi_i2d>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e74e:	f7f1 fdc3 	bl	80002d8 <__aeabi_dsub>
 800e752:	3530      	adds	r5, #48	@ 0x30
 800e754:	f806 5b01 	strb.w	r5, [r6], #1
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e762:	f04f 0200 	mov.w	r2, #0
 800e766:	d124      	bne.n	800e7b2 <_dtoa_r+0x662>
 800e768:	4bac      	ldr	r3, [pc, #688]	@ (800ea1c <_dtoa_r+0x8cc>)
 800e76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e76e:	f7f1 fdb5 	bl	80002dc <__adddf3>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f2 f9f5 	bl	8000b68 <__aeabi_dcmpgt>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d145      	bne.n	800e80e <_dtoa_r+0x6be>
 800e782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e786:	49a5      	ldr	r1, [pc, #660]	@ (800ea1c <_dtoa_r+0x8cc>)
 800e788:	2000      	movs	r0, #0
 800e78a:	f7f1 fda5 	bl	80002d8 <__aeabi_dsub>
 800e78e:	4602      	mov	r2, r0
 800e790:	460b      	mov	r3, r1
 800e792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e796:	f7f2 f9c9 	bl	8000b2c <__aeabi_dcmplt>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	f43f aef5 	beq.w	800e58a <_dtoa_r+0x43a>
 800e7a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e7a2:	1e73      	subs	r3, r6, #1
 800e7a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e7aa:	2b30      	cmp	r3, #48	@ 0x30
 800e7ac:	d0f8      	beq.n	800e7a0 <_dtoa_r+0x650>
 800e7ae:	9f04      	ldr	r7, [sp, #16]
 800e7b0:	e73e      	b.n	800e630 <_dtoa_r+0x4e0>
 800e7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ea20 <_dtoa_r+0x8d0>)
 800e7b4:	f7f1 ff48 	bl	8000648 <__aeabi_dmul>
 800e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7bc:	e7bc      	b.n	800e738 <_dtoa_r+0x5e8>
 800e7be:	d10c      	bne.n	800e7da <_dtoa_r+0x68a>
 800e7c0:	4b98      	ldr	r3, [pc, #608]	@ (800ea24 <_dtoa_r+0x8d4>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7c8:	f7f1 ff3e 	bl	8000648 <__aeabi_dmul>
 800e7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7d0:	f7f2 f9c0 	bl	8000b54 <__aeabi_dcmpge>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f000 8157 	beq.w	800ea88 <_dtoa_r+0x938>
 800e7da:	2400      	movs	r4, #0
 800e7dc:	4625      	mov	r5, r4
 800e7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e0:	43db      	mvns	r3, r3
 800e7e2:	9304      	str	r3, [sp, #16]
 800e7e4:	4656      	mov	r6, sl
 800e7e6:	2700      	movs	r7, #0
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	4658      	mov	r0, fp
 800e7ec:	f000 ff00 	bl	800f5f0 <_Bfree>
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	d0dc      	beq.n	800e7ae <_dtoa_r+0x65e>
 800e7f4:	b12f      	cbz	r7, 800e802 <_dtoa_r+0x6b2>
 800e7f6:	42af      	cmp	r7, r5
 800e7f8:	d003      	beq.n	800e802 <_dtoa_r+0x6b2>
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	4658      	mov	r0, fp
 800e7fe:	f000 fef7 	bl	800f5f0 <_Bfree>
 800e802:	4629      	mov	r1, r5
 800e804:	4658      	mov	r0, fp
 800e806:	f000 fef3 	bl	800f5f0 <_Bfree>
 800e80a:	e7d0      	b.n	800e7ae <_dtoa_r+0x65e>
 800e80c:	9704      	str	r7, [sp, #16]
 800e80e:	4633      	mov	r3, r6
 800e810:	461e      	mov	r6, r3
 800e812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e816:	2a39      	cmp	r2, #57	@ 0x39
 800e818:	d107      	bne.n	800e82a <_dtoa_r+0x6da>
 800e81a:	459a      	cmp	sl, r3
 800e81c:	d1f8      	bne.n	800e810 <_dtoa_r+0x6c0>
 800e81e:	9a04      	ldr	r2, [sp, #16]
 800e820:	3201      	adds	r2, #1
 800e822:	9204      	str	r2, [sp, #16]
 800e824:	2230      	movs	r2, #48	@ 0x30
 800e826:	f88a 2000 	strb.w	r2, [sl]
 800e82a:	781a      	ldrb	r2, [r3, #0]
 800e82c:	3201      	adds	r2, #1
 800e82e:	701a      	strb	r2, [r3, #0]
 800e830:	e7bd      	b.n	800e7ae <_dtoa_r+0x65e>
 800e832:	4b7b      	ldr	r3, [pc, #492]	@ (800ea20 <_dtoa_r+0x8d0>)
 800e834:	2200      	movs	r2, #0
 800e836:	f7f1 ff07 	bl	8000648 <__aeabi_dmul>
 800e83a:	2200      	movs	r2, #0
 800e83c:	2300      	movs	r3, #0
 800e83e:	4604      	mov	r4, r0
 800e840:	460d      	mov	r5, r1
 800e842:	f7f2 f969 	bl	8000b18 <__aeabi_dcmpeq>
 800e846:	2800      	cmp	r0, #0
 800e848:	f43f aebb 	beq.w	800e5c2 <_dtoa_r+0x472>
 800e84c:	e6f0      	b.n	800e630 <_dtoa_r+0x4e0>
 800e84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e850:	2a00      	cmp	r2, #0
 800e852:	f000 80db 	beq.w	800ea0c <_dtoa_r+0x8bc>
 800e856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e858:	2a01      	cmp	r2, #1
 800e85a:	f300 80bf 	bgt.w	800e9dc <_dtoa_r+0x88c>
 800e85e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e860:	2a00      	cmp	r2, #0
 800e862:	f000 80b7 	beq.w	800e9d4 <_dtoa_r+0x884>
 800e866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e86a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e86c:	4646      	mov	r6, r8
 800e86e:	9a08      	ldr	r2, [sp, #32]
 800e870:	2101      	movs	r1, #1
 800e872:	441a      	add	r2, r3
 800e874:	4658      	mov	r0, fp
 800e876:	4498      	add	r8, r3
 800e878:	9208      	str	r2, [sp, #32]
 800e87a:	f000 ffb7 	bl	800f7ec <__i2b>
 800e87e:	4605      	mov	r5, r0
 800e880:	b15e      	cbz	r6, 800e89a <_dtoa_r+0x74a>
 800e882:	9b08      	ldr	r3, [sp, #32]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd08      	ble.n	800e89a <_dtoa_r+0x74a>
 800e888:	42b3      	cmp	r3, r6
 800e88a:	9a08      	ldr	r2, [sp, #32]
 800e88c:	bfa8      	it	ge
 800e88e:	4633      	movge	r3, r6
 800e890:	eba8 0803 	sub.w	r8, r8, r3
 800e894:	1af6      	subs	r6, r6, r3
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	9308      	str	r3, [sp, #32]
 800e89a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e89c:	b1f3      	cbz	r3, 800e8dc <_dtoa_r+0x78c>
 800e89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 80b7 	beq.w	800ea14 <_dtoa_r+0x8c4>
 800e8a6:	b18c      	cbz	r4, 800e8cc <_dtoa_r+0x77c>
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4622      	mov	r2, r4
 800e8ac:	4658      	mov	r0, fp
 800e8ae:	f001 f85d 	bl	800f96c <__pow5mult>
 800e8b2:	464a      	mov	r2, r9
 800e8b4:	4601      	mov	r1, r0
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	4658      	mov	r0, fp
 800e8ba:	f000 ffad 	bl	800f818 <__multiply>
 800e8be:	4649      	mov	r1, r9
 800e8c0:	9004      	str	r0, [sp, #16]
 800e8c2:	4658      	mov	r0, fp
 800e8c4:	f000 fe94 	bl	800f5f0 <_Bfree>
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	4699      	mov	r9, r3
 800e8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ce:	1b1a      	subs	r2, r3, r4
 800e8d0:	d004      	beq.n	800e8dc <_dtoa_r+0x78c>
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	f001 f849 	bl	800f96c <__pow5mult>
 800e8da:	4681      	mov	r9, r0
 800e8dc:	2101      	movs	r1, #1
 800e8de:	4658      	mov	r0, fp
 800e8e0:	f000 ff84 	bl	800f7ec <__i2b>
 800e8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 81cf 	beq.w	800ec8c <_dtoa_r+0xb3c>
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	4658      	mov	r0, fp
 800e8f4:	f001 f83a 	bl	800f96c <__pow5mult>
 800e8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	f300 8095 	bgt.w	800ea2c <_dtoa_r+0x8dc>
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f040 8087 	bne.w	800ea18 <_dtoa_r+0x8c8>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e910:	2b00      	cmp	r3, #0
 800e912:	f040 8089 	bne.w	800ea28 <_dtoa_r+0x8d8>
 800e916:	9b03      	ldr	r3, [sp, #12]
 800e918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e91c:	0d1b      	lsrs	r3, r3, #20
 800e91e:	051b      	lsls	r3, r3, #20
 800e920:	b12b      	cbz	r3, 800e92e <_dtoa_r+0x7de>
 800e922:	9b08      	ldr	r3, [sp, #32]
 800e924:	3301      	adds	r3, #1
 800e926:	9308      	str	r3, [sp, #32]
 800e928:	f108 0801 	add.w	r8, r8, #1
 800e92c:	2301      	movs	r3, #1
 800e92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 81b0 	beq.w	800ec98 <_dtoa_r+0xb48>
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e93e:	6918      	ldr	r0, [r3, #16]
 800e940:	f000 ff08 	bl	800f754 <__hi0bits>
 800e944:	f1c0 0020 	rsb	r0, r0, #32
 800e948:	9b08      	ldr	r3, [sp, #32]
 800e94a:	4418      	add	r0, r3
 800e94c:	f010 001f 	ands.w	r0, r0, #31
 800e950:	d077      	beq.n	800ea42 <_dtoa_r+0x8f2>
 800e952:	f1c0 0320 	rsb	r3, r0, #32
 800e956:	2b04      	cmp	r3, #4
 800e958:	dd6b      	ble.n	800ea32 <_dtoa_r+0x8e2>
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	f1c0 001c 	rsb	r0, r0, #28
 800e960:	4403      	add	r3, r0
 800e962:	4480      	add	r8, r0
 800e964:	4406      	add	r6, r0
 800e966:	9308      	str	r3, [sp, #32]
 800e968:	f1b8 0f00 	cmp.w	r8, #0
 800e96c:	dd05      	ble.n	800e97a <_dtoa_r+0x82a>
 800e96e:	4649      	mov	r1, r9
 800e970:	4642      	mov	r2, r8
 800e972:	4658      	mov	r0, fp
 800e974:	f001 f854 	bl	800fa20 <__lshift>
 800e978:	4681      	mov	r9, r0
 800e97a:	9b08      	ldr	r3, [sp, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dd05      	ble.n	800e98c <_dtoa_r+0x83c>
 800e980:	4621      	mov	r1, r4
 800e982:	461a      	mov	r2, r3
 800e984:	4658      	mov	r0, fp
 800e986:	f001 f84b 	bl	800fa20 <__lshift>
 800e98a:	4604      	mov	r4, r0
 800e98c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d059      	beq.n	800ea46 <_dtoa_r+0x8f6>
 800e992:	4621      	mov	r1, r4
 800e994:	4648      	mov	r0, r9
 800e996:	f001 f8af 	bl	800faf8 <__mcmp>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	da53      	bge.n	800ea46 <_dtoa_r+0x8f6>
 800e99e:	1e7b      	subs	r3, r7, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	220a      	movs	r2, #10
 800e9a8:	4658      	mov	r0, fp
 800e9aa:	f000 fe43 	bl	800f634 <__multadd>
 800e9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b0:	4681      	mov	r9, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 8172 	beq.w	800ec9c <_dtoa_r+0xb4c>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4658      	mov	r0, fp
 800e9c0:	f000 fe38 	bl	800f634 <__multadd>
 800e9c4:	9b00      	ldr	r3, [sp, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	dc67      	bgt.n	800ea9c <_dtoa_r+0x94c>
 800e9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	dc41      	bgt.n	800ea56 <_dtoa_r+0x906>
 800e9d2:	e063      	b.n	800ea9c <_dtoa_r+0x94c>
 800e9d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e9da:	e746      	b.n	800e86a <_dtoa_r+0x71a>
 800e9dc:	9b07      	ldr	r3, [sp, #28]
 800e9de:	1e5c      	subs	r4, r3, #1
 800e9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e2:	42a3      	cmp	r3, r4
 800e9e4:	bfbf      	itttt	lt
 800e9e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e9e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e9ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e9ec:	1ae3      	sublt	r3, r4, r3
 800e9ee:	bfb4      	ite	lt
 800e9f0:	18d2      	addlt	r2, r2, r3
 800e9f2:	1b1c      	subge	r4, r3, r4
 800e9f4:	9b07      	ldr	r3, [sp, #28]
 800e9f6:	bfbc      	itt	lt
 800e9f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e9fa:	2400      	movlt	r4, #0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfb5      	itete	lt
 800ea00:	eba8 0603 	sublt.w	r6, r8, r3
 800ea04:	9b07      	ldrge	r3, [sp, #28]
 800ea06:	2300      	movlt	r3, #0
 800ea08:	4646      	movge	r6, r8
 800ea0a:	e730      	b.n	800e86e <_dtoa_r+0x71e>
 800ea0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea10:	4646      	mov	r6, r8
 800ea12:	e735      	b.n	800e880 <_dtoa_r+0x730>
 800ea14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea16:	e75c      	b.n	800e8d2 <_dtoa_r+0x782>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e788      	b.n	800e92e <_dtoa_r+0x7de>
 800ea1c:	3fe00000 	.word	0x3fe00000
 800ea20:	40240000 	.word	0x40240000
 800ea24:	40140000 	.word	0x40140000
 800ea28:	9b02      	ldr	r3, [sp, #8]
 800ea2a:	e780      	b.n	800e92e <_dtoa_r+0x7de>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea30:	e782      	b.n	800e938 <_dtoa_r+0x7e8>
 800ea32:	d099      	beq.n	800e968 <_dtoa_r+0x818>
 800ea34:	9a08      	ldr	r2, [sp, #32]
 800ea36:	331c      	adds	r3, #28
 800ea38:	441a      	add	r2, r3
 800ea3a:	4498      	add	r8, r3
 800ea3c:	441e      	add	r6, r3
 800ea3e:	9208      	str	r2, [sp, #32]
 800ea40:	e792      	b.n	800e968 <_dtoa_r+0x818>
 800ea42:	4603      	mov	r3, r0
 800ea44:	e7f6      	b.n	800ea34 <_dtoa_r+0x8e4>
 800ea46:	9b07      	ldr	r3, [sp, #28]
 800ea48:	9704      	str	r7, [sp, #16]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	dc20      	bgt.n	800ea90 <_dtoa_r+0x940>
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	dd1e      	ble.n	800ea94 <_dtoa_r+0x944>
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f47f aec0 	bne.w	800e7de <_dtoa_r+0x68e>
 800ea5e:	4621      	mov	r1, r4
 800ea60:	2205      	movs	r2, #5
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 fde6 	bl	800f634 <__multadd>
 800ea68:	4601      	mov	r1, r0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4648      	mov	r0, r9
 800ea6e:	f001 f843 	bl	800faf8 <__mcmp>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	f77f aeb3 	ble.w	800e7de <_dtoa_r+0x68e>
 800ea78:	4656      	mov	r6, sl
 800ea7a:	2331      	movs	r3, #49	@ 0x31
 800ea7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	3301      	adds	r3, #1
 800ea84:	9304      	str	r3, [sp, #16]
 800ea86:	e6ae      	b.n	800e7e6 <_dtoa_r+0x696>
 800ea88:	9c07      	ldr	r4, [sp, #28]
 800ea8a:	9704      	str	r7, [sp, #16]
 800ea8c:	4625      	mov	r5, r4
 800ea8e:	e7f3      	b.n	800ea78 <_dtoa_r+0x928>
 800ea90:	9b07      	ldr	r3, [sp, #28]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 8104 	beq.w	800eca4 <_dtoa_r+0xb54>
 800ea9c:	2e00      	cmp	r6, #0
 800ea9e:	dd05      	ble.n	800eaac <_dtoa_r+0x95c>
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	4632      	mov	r2, r6
 800eaa4:	4658      	mov	r0, fp
 800eaa6:	f000 ffbb 	bl	800fa20 <__lshift>
 800eaaa:	4605      	mov	r5, r0
 800eaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d05a      	beq.n	800eb68 <_dtoa_r+0xa18>
 800eab2:	6869      	ldr	r1, [r5, #4]
 800eab4:	4658      	mov	r0, fp
 800eab6:	f000 fd5b 	bl	800f570 <_Balloc>
 800eaba:	4606      	mov	r6, r0
 800eabc:	b928      	cbnz	r0, 800eaca <_dtoa_r+0x97a>
 800eabe:	4b84      	ldr	r3, [pc, #528]	@ (800ecd0 <_dtoa_r+0xb80>)
 800eac0:	4602      	mov	r2, r0
 800eac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eac6:	f7ff bb5a 	b.w	800e17e <_dtoa_r+0x2e>
 800eaca:	692a      	ldr	r2, [r5, #16]
 800eacc:	3202      	adds	r2, #2
 800eace:	0092      	lsls	r2, r2, #2
 800ead0:	f105 010c 	add.w	r1, r5, #12
 800ead4:	300c      	adds	r0, #12
 800ead6:	f7ff fa92 	bl	800dffe <memcpy>
 800eada:	2201      	movs	r2, #1
 800eadc:	4631      	mov	r1, r6
 800eade:	4658      	mov	r0, fp
 800eae0:	f000 ff9e 	bl	800fa20 <__lshift>
 800eae4:	f10a 0301 	add.w	r3, sl, #1
 800eae8:	9307      	str	r3, [sp, #28]
 800eaea:	9b00      	ldr	r3, [sp, #0]
 800eaec:	4453      	add	r3, sl
 800eaee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	462f      	mov	r7, r5
 800eaf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eafa:	4605      	mov	r5, r0
 800eafc:	9b07      	ldr	r3, [sp, #28]
 800eafe:	4621      	mov	r1, r4
 800eb00:	3b01      	subs	r3, #1
 800eb02:	4648      	mov	r0, r9
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	f7ff fa99 	bl	800e03c <quorem>
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	9002      	str	r0, [sp, #8]
 800eb0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb12:	4648      	mov	r0, r9
 800eb14:	f000 fff0 	bl	800faf8 <__mcmp>
 800eb18:	462a      	mov	r2, r5
 800eb1a:	9008      	str	r0, [sp, #32]
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	4658      	mov	r0, fp
 800eb20:	f001 f806 	bl	800fb30 <__mdiff>
 800eb24:	68c2      	ldr	r2, [r0, #12]
 800eb26:	4606      	mov	r6, r0
 800eb28:	bb02      	cbnz	r2, 800eb6c <_dtoa_r+0xa1c>
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4648      	mov	r0, r9
 800eb2e:	f000 ffe3 	bl	800faf8 <__mcmp>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4631      	mov	r1, r6
 800eb36:	4658      	mov	r0, fp
 800eb38:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb3a:	f000 fd59 	bl	800f5f0 <_Bfree>
 800eb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb42:	9e07      	ldr	r6, [sp, #28]
 800eb44:	ea43 0102 	orr.w	r1, r3, r2
 800eb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb4a:	4319      	orrs	r1, r3
 800eb4c:	d110      	bne.n	800eb70 <_dtoa_r+0xa20>
 800eb4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb52:	d029      	beq.n	800eba8 <_dtoa_r+0xa58>
 800eb54:	9b08      	ldr	r3, [sp, #32]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dd02      	ble.n	800eb60 <_dtoa_r+0xa10>
 800eb5a:	9b02      	ldr	r3, [sp, #8]
 800eb5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eb60:	9b00      	ldr	r3, [sp, #0]
 800eb62:	f883 8000 	strb.w	r8, [r3]
 800eb66:	e63f      	b.n	800e7e8 <_dtoa_r+0x698>
 800eb68:	4628      	mov	r0, r5
 800eb6a:	e7bb      	b.n	800eae4 <_dtoa_r+0x994>
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	e7e1      	b.n	800eb34 <_dtoa_r+0x9e4>
 800eb70:	9b08      	ldr	r3, [sp, #32]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	db04      	blt.n	800eb80 <_dtoa_r+0xa30>
 800eb76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb78:	430b      	orrs	r3, r1
 800eb7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb7c:	430b      	orrs	r3, r1
 800eb7e:	d120      	bne.n	800ebc2 <_dtoa_r+0xa72>
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	dded      	ble.n	800eb60 <_dtoa_r+0xa10>
 800eb84:	4649      	mov	r1, r9
 800eb86:	2201      	movs	r2, #1
 800eb88:	4658      	mov	r0, fp
 800eb8a:	f000 ff49 	bl	800fa20 <__lshift>
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4681      	mov	r9, r0
 800eb92:	f000 ffb1 	bl	800faf8 <__mcmp>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	dc03      	bgt.n	800eba2 <_dtoa_r+0xa52>
 800eb9a:	d1e1      	bne.n	800eb60 <_dtoa_r+0xa10>
 800eb9c:	f018 0f01 	tst.w	r8, #1
 800eba0:	d0de      	beq.n	800eb60 <_dtoa_r+0xa10>
 800eba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eba6:	d1d8      	bne.n	800eb5a <_dtoa_r+0xa0a>
 800eba8:	9a00      	ldr	r2, [sp, #0]
 800ebaa:	2339      	movs	r3, #57	@ 0x39
 800ebac:	7013      	strb	r3, [r2, #0]
 800ebae:	4633      	mov	r3, r6
 800ebb0:	461e      	mov	r6, r3
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ebb8:	2a39      	cmp	r2, #57	@ 0x39
 800ebba:	d052      	beq.n	800ec62 <_dtoa_r+0xb12>
 800ebbc:	3201      	adds	r2, #1
 800ebbe:	701a      	strb	r2, [r3, #0]
 800ebc0:	e612      	b.n	800e7e8 <_dtoa_r+0x698>
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	dd07      	ble.n	800ebd6 <_dtoa_r+0xa86>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d0ed      	beq.n	800eba8 <_dtoa_r+0xa58>
 800ebcc:	9a00      	ldr	r2, [sp, #0]
 800ebce:	f108 0301 	add.w	r3, r8, #1
 800ebd2:	7013      	strb	r3, [r2, #0]
 800ebd4:	e608      	b.n	800e7e8 <_dtoa_r+0x698>
 800ebd6:	9b07      	ldr	r3, [sp, #28]
 800ebd8:	9a07      	ldr	r2, [sp, #28]
 800ebda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ebde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d028      	beq.n	800ec36 <_dtoa_r+0xae6>
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	220a      	movs	r2, #10
 800ebea:	4658      	mov	r0, fp
 800ebec:	f000 fd22 	bl	800f634 <__multadd>
 800ebf0:	42af      	cmp	r7, r5
 800ebf2:	4681      	mov	r9, r0
 800ebf4:	f04f 0300 	mov.w	r3, #0
 800ebf8:	f04f 020a 	mov.w	r2, #10
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	4658      	mov	r0, fp
 800ec00:	d107      	bne.n	800ec12 <_dtoa_r+0xac2>
 800ec02:	f000 fd17 	bl	800f634 <__multadd>
 800ec06:	4607      	mov	r7, r0
 800ec08:	4605      	mov	r5, r0
 800ec0a:	9b07      	ldr	r3, [sp, #28]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	9307      	str	r3, [sp, #28]
 800ec10:	e774      	b.n	800eafc <_dtoa_r+0x9ac>
 800ec12:	f000 fd0f 	bl	800f634 <__multadd>
 800ec16:	4629      	mov	r1, r5
 800ec18:	4607      	mov	r7, r0
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	220a      	movs	r2, #10
 800ec1e:	4658      	mov	r0, fp
 800ec20:	f000 fd08 	bl	800f634 <__multadd>
 800ec24:	4605      	mov	r5, r0
 800ec26:	e7f0      	b.n	800ec0a <_dtoa_r+0xaba>
 800ec28:	9b00      	ldr	r3, [sp, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	bfcc      	ite	gt
 800ec2e:	461e      	movgt	r6, r3
 800ec30:	2601      	movle	r6, #1
 800ec32:	4456      	add	r6, sl
 800ec34:	2700      	movs	r7, #0
 800ec36:	4649      	mov	r1, r9
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4658      	mov	r0, fp
 800ec3c:	f000 fef0 	bl	800fa20 <__lshift>
 800ec40:	4621      	mov	r1, r4
 800ec42:	4681      	mov	r9, r0
 800ec44:	f000 ff58 	bl	800faf8 <__mcmp>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	dcb0      	bgt.n	800ebae <_dtoa_r+0xa5e>
 800ec4c:	d102      	bne.n	800ec54 <_dtoa_r+0xb04>
 800ec4e:	f018 0f01 	tst.w	r8, #1
 800ec52:	d1ac      	bne.n	800ebae <_dtoa_r+0xa5e>
 800ec54:	4633      	mov	r3, r6
 800ec56:	461e      	mov	r6, r3
 800ec58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec5c:	2a30      	cmp	r2, #48	@ 0x30
 800ec5e:	d0fa      	beq.n	800ec56 <_dtoa_r+0xb06>
 800ec60:	e5c2      	b.n	800e7e8 <_dtoa_r+0x698>
 800ec62:	459a      	cmp	sl, r3
 800ec64:	d1a4      	bne.n	800ebb0 <_dtoa_r+0xa60>
 800ec66:	9b04      	ldr	r3, [sp, #16]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	2331      	movs	r3, #49	@ 0x31
 800ec6e:	f88a 3000 	strb.w	r3, [sl]
 800ec72:	e5b9      	b.n	800e7e8 <_dtoa_r+0x698>
 800ec74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ec76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ecd4 <_dtoa_r+0xb84>
 800ec7a:	b11b      	cbz	r3, 800ec84 <_dtoa_r+0xb34>
 800ec7c:	f10a 0308 	add.w	r3, sl, #8
 800ec80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	4650      	mov	r0, sl
 800ec86:	b019      	add	sp, #100	@ 0x64
 800ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	f77f ae37 	ble.w	800e902 <_dtoa_r+0x7b2>
 800ec94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec98:	2001      	movs	r0, #1
 800ec9a:	e655      	b.n	800e948 <_dtoa_r+0x7f8>
 800ec9c:	9b00      	ldr	r3, [sp, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f77f aed6 	ble.w	800ea50 <_dtoa_r+0x900>
 800eca4:	4656      	mov	r6, sl
 800eca6:	4621      	mov	r1, r4
 800eca8:	4648      	mov	r0, r9
 800ecaa:	f7ff f9c7 	bl	800e03c <quorem>
 800ecae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ecb2:	f806 8b01 	strb.w	r8, [r6], #1
 800ecb6:	9b00      	ldr	r3, [sp, #0]
 800ecb8:	eba6 020a 	sub.w	r2, r6, sl
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	ddb3      	ble.n	800ec28 <_dtoa_r+0xad8>
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	220a      	movs	r2, #10
 800ecc6:	4658      	mov	r0, fp
 800ecc8:	f000 fcb4 	bl	800f634 <__multadd>
 800eccc:	4681      	mov	r9, r0
 800ecce:	e7ea      	b.n	800eca6 <_dtoa_r+0xb56>
 800ecd0:	08011c40 	.word	0x08011c40
 800ecd4:	08011bc4 	.word	0x08011bc4

0800ecd8 <_free_r>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	4605      	mov	r5, r0
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	d041      	beq.n	800ed64 <_free_r+0x8c>
 800ece0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece4:	1f0c      	subs	r4, r1, #4
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bfb8      	it	lt
 800ecea:	18e4      	addlt	r4, r4, r3
 800ecec:	f000 fc34 	bl	800f558 <__malloc_lock>
 800ecf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ed68 <_free_r+0x90>)
 800ecf2:	6813      	ldr	r3, [r2, #0]
 800ecf4:	b933      	cbnz	r3, 800ed04 <_free_r+0x2c>
 800ecf6:	6063      	str	r3, [r4, #4]
 800ecf8:	6014      	str	r4, [r2, #0]
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed00:	f000 bc30 	b.w	800f564 <__malloc_unlock>
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	d908      	bls.n	800ed1a <_free_r+0x42>
 800ed08:	6820      	ldr	r0, [r4, #0]
 800ed0a:	1821      	adds	r1, r4, r0
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	bf01      	itttt	eq
 800ed10:	6819      	ldreq	r1, [r3, #0]
 800ed12:	685b      	ldreq	r3, [r3, #4]
 800ed14:	1809      	addeq	r1, r1, r0
 800ed16:	6021      	streq	r1, [r4, #0]
 800ed18:	e7ed      	b.n	800ecf6 <_free_r+0x1e>
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	b10b      	cbz	r3, 800ed24 <_free_r+0x4c>
 800ed20:	42a3      	cmp	r3, r4
 800ed22:	d9fa      	bls.n	800ed1a <_free_r+0x42>
 800ed24:	6811      	ldr	r1, [r2, #0]
 800ed26:	1850      	adds	r0, r2, r1
 800ed28:	42a0      	cmp	r0, r4
 800ed2a:	d10b      	bne.n	800ed44 <_free_r+0x6c>
 800ed2c:	6820      	ldr	r0, [r4, #0]
 800ed2e:	4401      	add	r1, r0
 800ed30:	1850      	adds	r0, r2, r1
 800ed32:	4283      	cmp	r3, r0
 800ed34:	6011      	str	r1, [r2, #0]
 800ed36:	d1e0      	bne.n	800ecfa <_free_r+0x22>
 800ed38:	6818      	ldr	r0, [r3, #0]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	6053      	str	r3, [r2, #4]
 800ed3e:	4408      	add	r0, r1
 800ed40:	6010      	str	r0, [r2, #0]
 800ed42:	e7da      	b.n	800ecfa <_free_r+0x22>
 800ed44:	d902      	bls.n	800ed4c <_free_r+0x74>
 800ed46:	230c      	movs	r3, #12
 800ed48:	602b      	str	r3, [r5, #0]
 800ed4a:	e7d6      	b.n	800ecfa <_free_r+0x22>
 800ed4c:	6820      	ldr	r0, [r4, #0]
 800ed4e:	1821      	adds	r1, r4, r0
 800ed50:	428b      	cmp	r3, r1
 800ed52:	bf04      	itt	eq
 800ed54:	6819      	ldreq	r1, [r3, #0]
 800ed56:	685b      	ldreq	r3, [r3, #4]
 800ed58:	6063      	str	r3, [r4, #4]
 800ed5a:	bf04      	itt	eq
 800ed5c:	1809      	addeq	r1, r1, r0
 800ed5e:	6021      	streq	r1, [r4, #0]
 800ed60:	6054      	str	r4, [r2, #4]
 800ed62:	e7ca      	b.n	800ecfa <_free_r+0x22>
 800ed64:	bd38      	pop	{r3, r4, r5, pc}
 800ed66:	bf00      	nop
 800ed68:	20000860 	.word	0x20000860

0800ed6c <rshift>:
 800ed6c:	6903      	ldr	r3, [r0, #16]
 800ed6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed7a:	f100 0414 	add.w	r4, r0, #20
 800ed7e:	dd45      	ble.n	800ee0c <rshift+0xa0>
 800ed80:	f011 011f 	ands.w	r1, r1, #31
 800ed84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed8c:	d10c      	bne.n	800eda8 <rshift+0x3c>
 800ed8e:	f100 0710 	add.w	r7, r0, #16
 800ed92:	4629      	mov	r1, r5
 800ed94:	42b1      	cmp	r1, r6
 800ed96:	d334      	bcc.n	800ee02 <rshift+0x96>
 800ed98:	1a9b      	subs	r3, r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	1eea      	subs	r2, r5, #3
 800ed9e:	4296      	cmp	r6, r2
 800eda0:	bf38      	it	cc
 800eda2:	2300      	movcc	r3, #0
 800eda4:	4423      	add	r3, r4
 800eda6:	e015      	b.n	800edd4 <rshift+0x68>
 800eda8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edac:	f1c1 0820 	rsb	r8, r1, #32
 800edb0:	40cf      	lsrs	r7, r1
 800edb2:	f105 0e04 	add.w	lr, r5, #4
 800edb6:	46a1      	mov	r9, r4
 800edb8:	4576      	cmp	r6, lr
 800edba:	46f4      	mov	ip, lr
 800edbc:	d815      	bhi.n	800edea <rshift+0x7e>
 800edbe:	1a9a      	subs	r2, r3, r2
 800edc0:	0092      	lsls	r2, r2, #2
 800edc2:	3a04      	subs	r2, #4
 800edc4:	3501      	adds	r5, #1
 800edc6:	42ae      	cmp	r6, r5
 800edc8:	bf38      	it	cc
 800edca:	2200      	movcc	r2, #0
 800edcc:	18a3      	adds	r3, r4, r2
 800edce:	50a7      	str	r7, [r4, r2]
 800edd0:	b107      	cbz	r7, 800edd4 <rshift+0x68>
 800edd2:	3304      	adds	r3, #4
 800edd4:	1b1a      	subs	r2, r3, r4
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eddc:	bf08      	it	eq
 800edde:	2300      	moveq	r3, #0
 800ede0:	6102      	str	r2, [r0, #16]
 800ede2:	bf08      	it	eq
 800ede4:	6143      	streq	r3, [r0, #20]
 800ede6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edea:	f8dc c000 	ldr.w	ip, [ip]
 800edee:	fa0c fc08 	lsl.w	ip, ip, r8
 800edf2:	ea4c 0707 	orr.w	r7, ip, r7
 800edf6:	f849 7b04 	str.w	r7, [r9], #4
 800edfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edfe:	40cf      	lsrs	r7, r1
 800ee00:	e7da      	b.n	800edb8 <rshift+0x4c>
 800ee02:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee06:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee0a:	e7c3      	b.n	800ed94 <rshift+0x28>
 800ee0c:	4623      	mov	r3, r4
 800ee0e:	e7e1      	b.n	800edd4 <rshift+0x68>

0800ee10 <__hexdig_fun>:
 800ee10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ee14:	2b09      	cmp	r3, #9
 800ee16:	d802      	bhi.n	800ee1e <__hexdig_fun+0xe>
 800ee18:	3820      	subs	r0, #32
 800ee1a:	b2c0      	uxtb	r0, r0
 800ee1c:	4770      	bx	lr
 800ee1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee22:	2b05      	cmp	r3, #5
 800ee24:	d801      	bhi.n	800ee2a <__hexdig_fun+0x1a>
 800ee26:	3847      	subs	r0, #71	@ 0x47
 800ee28:	e7f7      	b.n	800ee1a <__hexdig_fun+0xa>
 800ee2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee2e:	2b05      	cmp	r3, #5
 800ee30:	d801      	bhi.n	800ee36 <__hexdig_fun+0x26>
 800ee32:	3827      	subs	r0, #39	@ 0x27
 800ee34:	e7f1      	b.n	800ee1a <__hexdig_fun+0xa>
 800ee36:	2000      	movs	r0, #0
 800ee38:	4770      	bx	lr
	...

0800ee3c <__gethex>:
 800ee3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee40:	b085      	sub	sp, #20
 800ee42:	468a      	mov	sl, r1
 800ee44:	9302      	str	r3, [sp, #8]
 800ee46:	680b      	ldr	r3, [r1, #0]
 800ee48:	9001      	str	r0, [sp, #4]
 800ee4a:	4690      	mov	r8, r2
 800ee4c:	1c9c      	adds	r4, r3, #2
 800ee4e:	46a1      	mov	r9, r4
 800ee50:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee54:	2830      	cmp	r0, #48	@ 0x30
 800ee56:	d0fa      	beq.n	800ee4e <__gethex+0x12>
 800ee58:	eba9 0303 	sub.w	r3, r9, r3
 800ee5c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee60:	f7ff ffd6 	bl	800ee10 <__hexdig_fun>
 800ee64:	4605      	mov	r5, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d168      	bne.n	800ef3c <__gethex+0x100>
 800ee6a:	49a0      	ldr	r1, [pc, #640]	@ (800f0ec <__gethex+0x2b0>)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	4648      	mov	r0, r9
 800ee70:	f7ff f83c 	bl	800deec <strncmp>
 800ee74:	4607      	mov	r7, r0
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d167      	bne.n	800ef4a <__gethex+0x10e>
 800ee7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee7e:	4626      	mov	r6, r4
 800ee80:	f7ff ffc6 	bl	800ee10 <__hexdig_fun>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d062      	beq.n	800ef4e <__gethex+0x112>
 800ee88:	4623      	mov	r3, r4
 800ee8a:	7818      	ldrb	r0, [r3, #0]
 800ee8c:	2830      	cmp	r0, #48	@ 0x30
 800ee8e:	4699      	mov	r9, r3
 800ee90:	f103 0301 	add.w	r3, r3, #1
 800ee94:	d0f9      	beq.n	800ee8a <__gethex+0x4e>
 800ee96:	f7ff ffbb 	bl	800ee10 <__hexdig_fun>
 800ee9a:	fab0 f580 	clz	r5, r0
 800ee9e:	096d      	lsrs	r5, r5, #5
 800eea0:	f04f 0b01 	mov.w	fp, #1
 800eea4:	464a      	mov	r2, r9
 800eea6:	4616      	mov	r6, r2
 800eea8:	3201      	adds	r2, #1
 800eeaa:	7830      	ldrb	r0, [r6, #0]
 800eeac:	f7ff ffb0 	bl	800ee10 <__hexdig_fun>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d1f8      	bne.n	800eea6 <__gethex+0x6a>
 800eeb4:	498d      	ldr	r1, [pc, #564]	@ (800f0ec <__gethex+0x2b0>)
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7ff f817 	bl	800deec <strncmp>
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d13f      	bne.n	800ef42 <__gethex+0x106>
 800eec2:	b944      	cbnz	r4, 800eed6 <__gethex+0x9a>
 800eec4:	1c74      	adds	r4, r6, #1
 800eec6:	4622      	mov	r2, r4
 800eec8:	4616      	mov	r6, r2
 800eeca:	3201      	adds	r2, #1
 800eecc:	7830      	ldrb	r0, [r6, #0]
 800eece:	f7ff ff9f 	bl	800ee10 <__hexdig_fun>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d1f8      	bne.n	800eec8 <__gethex+0x8c>
 800eed6:	1ba4      	subs	r4, r4, r6
 800eed8:	00a7      	lsls	r7, r4, #2
 800eeda:	7833      	ldrb	r3, [r6, #0]
 800eedc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eee0:	2b50      	cmp	r3, #80	@ 0x50
 800eee2:	d13e      	bne.n	800ef62 <__gethex+0x126>
 800eee4:	7873      	ldrb	r3, [r6, #1]
 800eee6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eee8:	d033      	beq.n	800ef52 <__gethex+0x116>
 800eeea:	2b2d      	cmp	r3, #45	@ 0x2d
 800eeec:	d034      	beq.n	800ef58 <__gethex+0x11c>
 800eeee:	1c71      	adds	r1, r6, #1
 800eef0:	2400      	movs	r4, #0
 800eef2:	7808      	ldrb	r0, [r1, #0]
 800eef4:	f7ff ff8c 	bl	800ee10 <__hexdig_fun>
 800eef8:	1e43      	subs	r3, r0, #1
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b18      	cmp	r3, #24
 800eefe:	d830      	bhi.n	800ef62 <__gethex+0x126>
 800ef00:	f1a0 0210 	sub.w	r2, r0, #16
 800ef04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef08:	f7ff ff82 	bl	800ee10 <__hexdig_fun>
 800ef0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ef10:	fa5f fc8c 	uxtb.w	ip, ip
 800ef14:	f1bc 0f18 	cmp.w	ip, #24
 800ef18:	f04f 030a 	mov.w	r3, #10
 800ef1c:	d91e      	bls.n	800ef5c <__gethex+0x120>
 800ef1e:	b104      	cbz	r4, 800ef22 <__gethex+0xe6>
 800ef20:	4252      	negs	r2, r2
 800ef22:	4417      	add	r7, r2
 800ef24:	f8ca 1000 	str.w	r1, [sl]
 800ef28:	b1ed      	cbz	r5, 800ef66 <__gethex+0x12a>
 800ef2a:	f1bb 0f00 	cmp.w	fp, #0
 800ef2e:	bf0c      	ite	eq
 800ef30:	2506      	moveq	r5, #6
 800ef32:	2500      	movne	r5, #0
 800ef34:	4628      	mov	r0, r5
 800ef36:	b005      	add	sp, #20
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	2500      	movs	r5, #0
 800ef3e:	462c      	mov	r4, r5
 800ef40:	e7b0      	b.n	800eea4 <__gethex+0x68>
 800ef42:	2c00      	cmp	r4, #0
 800ef44:	d1c7      	bne.n	800eed6 <__gethex+0x9a>
 800ef46:	4627      	mov	r7, r4
 800ef48:	e7c7      	b.n	800eeda <__gethex+0x9e>
 800ef4a:	464e      	mov	r6, r9
 800ef4c:	462f      	mov	r7, r5
 800ef4e:	2501      	movs	r5, #1
 800ef50:	e7c3      	b.n	800eeda <__gethex+0x9e>
 800ef52:	2400      	movs	r4, #0
 800ef54:	1cb1      	adds	r1, r6, #2
 800ef56:	e7cc      	b.n	800eef2 <__gethex+0xb6>
 800ef58:	2401      	movs	r4, #1
 800ef5a:	e7fb      	b.n	800ef54 <__gethex+0x118>
 800ef5c:	fb03 0002 	mla	r0, r3, r2, r0
 800ef60:	e7ce      	b.n	800ef00 <__gethex+0xc4>
 800ef62:	4631      	mov	r1, r6
 800ef64:	e7de      	b.n	800ef24 <__gethex+0xe8>
 800ef66:	eba6 0309 	sub.w	r3, r6, r9
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	2b07      	cmp	r3, #7
 800ef70:	dc0a      	bgt.n	800ef88 <__gethex+0x14c>
 800ef72:	9801      	ldr	r0, [sp, #4]
 800ef74:	f000 fafc 	bl	800f570 <_Balloc>
 800ef78:	4604      	mov	r4, r0
 800ef7a:	b940      	cbnz	r0, 800ef8e <__gethex+0x152>
 800ef7c:	4b5c      	ldr	r3, [pc, #368]	@ (800f0f0 <__gethex+0x2b4>)
 800ef7e:	4602      	mov	r2, r0
 800ef80:	21e4      	movs	r1, #228	@ 0xe4
 800ef82:	485c      	ldr	r0, [pc, #368]	@ (800f0f4 <__gethex+0x2b8>)
 800ef84:	f001 f870 	bl	8010068 <__assert_func>
 800ef88:	3101      	adds	r1, #1
 800ef8a:	105b      	asrs	r3, r3, #1
 800ef8c:	e7ef      	b.n	800ef6e <__gethex+0x132>
 800ef8e:	f100 0a14 	add.w	sl, r0, #20
 800ef92:	2300      	movs	r3, #0
 800ef94:	4655      	mov	r5, sl
 800ef96:	469b      	mov	fp, r3
 800ef98:	45b1      	cmp	r9, r6
 800ef9a:	d337      	bcc.n	800f00c <__gethex+0x1d0>
 800ef9c:	f845 bb04 	str.w	fp, [r5], #4
 800efa0:	eba5 050a 	sub.w	r5, r5, sl
 800efa4:	10ad      	asrs	r5, r5, #2
 800efa6:	6125      	str	r5, [r4, #16]
 800efa8:	4658      	mov	r0, fp
 800efaa:	f000 fbd3 	bl	800f754 <__hi0bits>
 800efae:	016d      	lsls	r5, r5, #5
 800efb0:	f8d8 6000 	ldr.w	r6, [r8]
 800efb4:	1a2d      	subs	r5, r5, r0
 800efb6:	42b5      	cmp	r5, r6
 800efb8:	dd54      	ble.n	800f064 <__gethex+0x228>
 800efba:	1bad      	subs	r5, r5, r6
 800efbc:	4629      	mov	r1, r5
 800efbe:	4620      	mov	r0, r4
 800efc0:	f000 ff67 	bl	800fe92 <__any_on>
 800efc4:	4681      	mov	r9, r0
 800efc6:	b178      	cbz	r0, 800efe8 <__gethex+0x1ac>
 800efc8:	1e6b      	subs	r3, r5, #1
 800efca:	1159      	asrs	r1, r3, #5
 800efcc:	f003 021f 	and.w	r2, r3, #31
 800efd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efd4:	f04f 0901 	mov.w	r9, #1
 800efd8:	fa09 f202 	lsl.w	r2, r9, r2
 800efdc:	420a      	tst	r2, r1
 800efde:	d003      	beq.n	800efe8 <__gethex+0x1ac>
 800efe0:	454b      	cmp	r3, r9
 800efe2:	dc36      	bgt.n	800f052 <__gethex+0x216>
 800efe4:	f04f 0902 	mov.w	r9, #2
 800efe8:	4629      	mov	r1, r5
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff febe 	bl	800ed6c <rshift>
 800eff0:	442f      	add	r7, r5
 800eff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eff6:	42bb      	cmp	r3, r7
 800eff8:	da42      	bge.n	800f080 <__gethex+0x244>
 800effa:	9801      	ldr	r0, [sp, #4]
 800effc:	4621      	mov	r1, r4
 800effe:	f000 faf7 	bl	800f5f0 <_Bfree>
 800f002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f004:	2300      	movs	r3, #0
 800f006:	6013      	str	r3, [r2, #0]
 800f008:	25a3      	movs	r5, #163	@ 0xa3
 800f00a:	e793      	b.n	800ef34 <__gethex+0xf8>
 800f00c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f010:	2a2e      	cmp	r2, #46	@ 0x2e
 800f012:	d012      	beq.n	800f03a <__gethex+0x1fe>
 800f014:	2b20      	cmp	r3, #32
 800f016:	d104      	bne.n	800f022 <__gethex+0x1e6>
 800f018:	f845 bb04 	str.w	fp, [r5], #4
 800f01c:	f04f 0b00 	mov.w	fp, #0
 800f020:	465b      	mov	r3, fp
 800f022:	7830      	ldrb	r0, [r6, #0]
 800f024:	9303      	str	r3, [sp, #12]
 800f026:	f7ff fef3 	bl	800ee10 <__hexdig_fun>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	f000 000f 	and.w	r0, r0, #15
 800f030:	4098      	lsls	r0, r3
 800f032:	ea4b 0b00 	orr.w	fp, fp, r0
 800f036:	3304      	adds	r3, #4
 800f038:	e7ae      	b.n	800ef98 <__gethex+0x15c>
 800f03a:	45b1      	cmp	r9, r6
 800f03c:	d8ea      	bhi.n	800f014 <__gethex+0x1d8>
 800f03e:	492b      	ldr	r1, [pc, #172]	@ (800f0ec <__gethex+0x2b0>)
 800f040:	9303      	str	r3, [sp, #12]
 800f042:	2201      	movs	r2, #1
 800f044:	4630      	mov	r0, r6
 800f046:	f7fe ff51 	bl	800deec <strncmp>
 800f04a:	9b03      	ldr	r3, [sp, #12]
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d1e1      	bne.n	800f014 <__gethex+0x1d8>
 800f050:	e7a2      	b.n	800ef98 <__gethex+0x15c>
 800f052:	1ea9      	subs	r1, r5, #2
 800f054:	4620      	mov	r0, r4
 800f056:	f000 ff1c 	bl	800fe92 <__any_on>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d0c2      	beq.n	800efe4 <__gethex+0x1a8>
 800f05e:	f04f 0903 	mov.w	r9, #3
 800f062:	e7c1      	b.n	800efe8 <__gethex+0x1ac>
 800f064:	da09      	bge.n	800f07a <__gethex+0x23e>
 800f066:	1b75      	subs	r5, r6, r5
 800f068:	4621      	mov	r1, r4
 800f06a:	9801      	ldr	r0, [sp, #4]
 800f06c:	462a      	mov	r2, r5
 800f06e:	f000 fcd7 	bl	800fa20 <__lshift>
 800f072:	1b7f      	subs	r7, r7, r5
 800f074:	4604      	mov	r4, r0
 800f076:	f100 0a14 	add.w	sl, r0, #20
 800f07a:	f04f 0900 	mov.w	r9, #0
 800f07e:	e7b8      	b.n	800eff2 <__gethex+0x1b6>
 800f080:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f084:	42bd      	cmp	r5, r7
 800f086:	dd6f      	ble.n	800f168 <__gethex+0x32c>
 800f088:	1bed      	subs	r5, r5, r7
 800f08a:	42ae      	cmp	r6, r5
 800f08c:	dc34      	bgt.n	800f0f8 <__gethex+0x2bc>
 800f08e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f092:	2b02      	cmp	r3, #2
 800f094:	d022      	beq.n	800f0dc <__gethex+0x2a0>
 800f096:	2b03      	cmp	r3, #3
 800f098:	d024      	beq.n	800f0e4 <__gethex+0x2a8>
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d115      	bne.n	800f0ca <__gethex+0x28e>
 800f09e:	42ae      	cmp	r6, r5
 800f0a0:	d113      	bne.n	800f0ca <__gethex+0x28e>
 800f0a2:	2e01      	cmp	r6, #1
 800f0a4:	d10b      	bne.n	800f0be <__gethex+0x282>
 800f0a6:	9a02      	ldr	r2, [sp, #8]
 800f0a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	6123      	str	r3, [r4, #16]
 800f0b2:	f8ca 3000 	str.w	r3, [sl]
 800f0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0b8:	2562      	movs	r5, #98	@ 0x62
 800f0ba:	601c      	str	r4, [r3, #0]
 800f0bc:	e73a      	b.n	800ef34 <__gethex+0xf8>
 800f0be:	1e71      	subs	r1, r6, #1
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f000 fee6 	bl	800fe92 <__any_on>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d1ed      	bne.n	800f0a6 <__gethex+0x26a>
 800f0ca:	9801      	ldr	r0, [sp, #4]
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f000 fa8f 	bl	800f5f0 <_Bfree>
 800f0d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	6013      	str	r3, [r2, #0]
 800f0d8:	2550      	movs	r5, #80	@ 0x50
 800f0da:	e72b      	b.n	800ef34 <__gethex+0xf8>
 800f0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1f3      	bne.n	800f0ca <__gethex+0x28e>
 800f0e2:	e7e0      	b.n	800f0a6 <__gethex+0x26a>
 800f0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1dd      	bne.n	800f0a6 <__gethex+0x26a>
 800f0ea:	e7ee      	b.n	800f0ca <__gethex+0x28e>
 800f0ec:	08011b30 	.word	0x08011b30
 800f0f0:	08011c40 	.word	0x08011c40
 800f0f4:	08011c51 	.word	0x08011c51
 800f0f8:	1e6f      	subs	r7, r5, #1
 800f0fa:	f1b9 0f00 	cmp.w	r9, #0
 800f0fe:	d130      	bne.n	800f162 <__gethex+0x326>
 800f100:	b127      	cbz	r7, 800f10c <__gethex+0x2d0>
 800f102:	4639      	mov	r1, r7
 800f104:	4620      	mov	r0, r4
 800f106:	f000 fec4 	bl	800fe92 <__any_on>
 800f10a:	4681      	mov	r9, r0
 800f10c:	117a      	asrs	r2, r7, #5
 800f10e:	2301      	movs	r3, #1
 800f110:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f114:	f007 071f 	and.w	r7, r7, #31
 800f118:	40bb      	lsls	r3, r7
 800f11a:	4213      	tst	r3, r2
 800f11c:	4629      	mov	r1, r5
 800f11e:	4620      	mov	r0, r4
 800f120:	bf18      	it	ne
 800f122:	f049 0902 	orrne.w	r9, r9, #2
 800f126:	f7ff fe21 	bl	800ed6c <rshift>
 800f12a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f12e:	1b76      	subs	r6, r6, r5
 800f130:	2502      	movs	r5, #2
 800f132:	f1b9 0f00 	cmp.w	r9, #0
 800f136:	d047      	beq.n	800f1c8 <__gethex+0x38c>
 800f138:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d015      	beq.n	800f16c <__gethex+0x330>
 800f140:	2b03      	cmp	r3, #3
 800f142:	d017      	beq.n	800f174 <__gethex+0x338>
 800f144:	2b01      	cmp	r3, #1
 800f146:	d109      	bne.n	800f15c <__gethex+0x320>
 800f148:	f019 0f02 	tst.w	r9, #2
 800f14c:	d006      	beq.n	800f15c <__gethex+0x320>
 800f14e:	f8da 3000 	ldr.w	r3, [sl]
 800f152:	ea49 0903 	orr.w	r9, r9, r3
 800f156:	f019 0f01 	tst.w	r9, #1
 800f15a:	d10e      	bne.n	800f17a <__gethex+0x33e>
 800f15c:	f045 0510 	orr.w	r5, r5, #16
 800f160:	e032      	b.n	800f1c8 <__gethex+0x38c>
 800f162:	f04f 0901 	mov.w	r9, #1
 800f166:	e7d1      	b.n	800f10c <__gethex+0x2d0>
 800f168:	2501      	movs	r5, #1
 800f16a:	e7e2      	b.n	800f132 <__gethex+0x2f6>
 800f16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f16e:	f1c3 0301 	rsb	r3, r3, #1
 800f172:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0f0      	beq.n	800f15c <__gethex+0x320>
 800f17a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f17e:	f104 0314 	add.w	r3, r4, #20
 800f182:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f186:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f18a:	f04f 0c00 	mov.w	ip, #0
 800f18e:	4618      	mov	r0, r3
 800f190:	f853 2b04 	ldr.w	r2, [r3], #4
 800f194:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f198:	d01b      	beq.n	800f1d2 <__gethex+0x396>
 800f19a:	3201      	adds	r2, #1
 800f19c:	6002      	str	r2, [r0, #0]
 800f19e:	2d02      	cmp	r5, #2
 800f1a0:	f104 0314 	add.w	r3, r4, #20
 800f1a4:	d13c      	bne.n	800f220 <__gethex+0x3e4>
 800f1a6:	f8d8 2000 	ldr.w	r2, [r8]
 800f1aa:	3a01      	subs	r2, #1
 800f1ac:	42b2      	cmp	r2, r6
 800f1ae:	d109      	bne.n	800f1c4 <__gethex+0x388>
 800f1b0:	1171      	asrs	r1, r6, #5
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1b8:	f006 061f 	and.w	r6, r6, #31
 800f1bc:	fa02 f606 	lsl.w	r6, r2, r6
 800f1c0:	421e      	tst	r6, r3
 800f1c2:	d13a      	bne.n	800f23a <__gethex+0x3fe>
 800f1c4:	f045 0520 	orr.w	r5, r5, #32
 800f1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ca:	601c      	str	r4, [r3, #0]
 800f1cc:	9b02      	ldr	r3, [sp, #8]
 800f1ce:	601f      	str	r7, [r3, #0]
 800f1d0:	e6b0      	b.n	800ef34 <__gethex+0xf8>
 800f1d2:	4299      	cmp	r1, r3
 800f1d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1d8:	d8d9      	bhi.n	800f18e <__gethex+0x352>
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	459b      	cmp	fp, r3
 800f1de:	db17      	blt.n	800f210 <__gethex+0x3d4>
 800f1e0:	6861      	ldr	r1, [r4, #4]
 800f1e2:	9801      	ldr	r0, [sp, #4]
 800f1e4:	3101      	adds	r1, #1
 800f1e6:	f000 f9c3 	bl	800f570 <_Balloc>
 800f1ea:	4681      	mov	r9, r0
 800f1ec:	b918      	cbnz	r0, 800f1f6 <__gethex+0x3ba>
 800f1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f258 <__gethex+0x41c>)
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	2184      	movs	r1, #132	@ 0x84
 800f1f4:	e6c5      	b.n	800ef82 <__gethex+0x146>
 800f1f6:	6922      	ldr	r2, [r4, #16]
 800f1f8:	3202      	adds	r2, #2
 800f1fa:	f104 010c 	add.w	r1, r4, #12
 800f1fe:	0092      	lsls	r2, r2, #2
 800f200:	300c      	adds	r0, #12
 800f202:	f7fe fefc 	bl	800dffe <memcpy>
 800f206:	4621      	mov	r1, r4
 800f208:	9801      	ldr	r0, [sp, #4]
 800f20a:	f000 f9f1 	bl	800f5f0 <_Bfree>
 800f20e:	464c      	mov	r4, r9
 800f210:	6923      	ldr	r3, [r4, #16]
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f218:	6122      	str	r2, [r4, #16]
 800f21a:	2201      	movs	r2, #1
 800f21c:	615a      	str	r2, [r3, #20]
 800f21e:	e7be      	b.n	800f19e <__gethex+0x362>
 800f220:	6922      	ldr	r2, [r4, #16]
 800f222:	455a      	cmp	r2, fp
 800f224:	dd0b      	ble.n	800f23e <__gethex+0x402>
 800f226:	2101      	movs	r1, #1
 800f228:	4620      	mov	r0, r4
 800f22a:	f7ff fd9f 	bl	800ed6c <rshift>
 800f22e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f232:	3701      	adds	r7, #1
 800f234:	42bb      	cmp	r3, r7
 800f236:	f6ff aee0 	blt.w	800effa <__gethex+0x1be>
 800f23a:	2501      	movs	r5, #1
 800f23c:	e7c2      	b.n	800f1c4 <__gethex+0x388>
 800f23e:	f016 061f 	ands.w	r6, r6, #31
 800f242:	d0fa      	beq.n	800f23a <__gethex+0x3fe>
 800f244:	4453      	add	r3, sl
 800f246:	f1c6 0620 	rsb	r6, r6, #32
 800f24a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f24e:	f000 fa81 	bl	800f754 <__hi0bits>
 800f252:	42b0      	cmp	r0, r6
 800f254:	dbe7      	blt.n	800f226 <__gethex+0x3ea>
 800f256:	e7f0      	b.n	800f23a <__gethex+0x3fe>
 800f258:	08011c40 	.word	0x08011c40

0800f25c <L_shift>:
 800f25c:	f1c2 0208 	rsb	r2, r2, #8
 800f260:	0092      	lsls	r2, r2, #2
 800f262:	b570      	push	{r4, r5, r6, lr}
 800f264:	f1c2 0620 	rsb	r6, r2, #32
 800f268:	6843      	ldr	r3, [r0, #4]
 800f26a:	6804      	ldr	r4, [r0, #0]
 800f26c:	fa03 f506 	lsl.w	r5, r3, r6
 800f270:	432c      	orrs	r4, r5
 800f272:	40d3      	lsrs	r3, r2
 800f274:	6004      	str	r4, [r0, #0]
 800f276:	f840 3f04 	str.w	r3, [r0, #4]!
 800f27a:	4288      	cmp	r0, r1
 800f27c:	d3f4      	bcc.n	800f268 <L_shift+0xc>
 800f27e:	bd70      	pop	{r4, r5, r6, pc}

0800f280 <__match>:
 800f280:	b530      	push	{r4, r5, lr}
 800f282:	6803      	ldr	r3, [r0, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f28a:	b914      	cbnz	r4, 800f292 <__match+0x12>
 800f28c:	6003      	str	r3, [r0, #0]
 800f28e:	2001      	movs	r0, #1
 800f290:	bd30      	pop	{r4, r5, pc}
 800f292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f296:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f29a:	2d19      	cmp	r5, #25
 800f29c:	bf98      	it	ls
 800f29e:	3220      	addls	r2, #32
 800f2a0:	42a2      	cmp	r2, r4
 800f2a2:	d0f0      	beq.n	800f286 <__match+0x6>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	e7f3      	b.n	800f290 <__match+0x10>

0800f2a8 <__hexnan>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	680b      	ldr	r3, [r1, #0]
 800f2ae:	6801      	ldr	r1, [r0, #0]
 800f2b0:	115e      	asrs	r6, r3, #5
 800f2b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2b6:	f013 031f 	ands.w	r3, r3, #31
 800f2ba:	b087      	sub	sp, #28
 800f2bc:	bf18      	it	ne
 800f2be:	3604      	addne	r6, #4
 800f2c0:	2500      	movs	r5, #0
 800f2c2:	1f37      	subs	r7, r6, #4
 800f2c4:	4682      	mov	sl, r0
 800f2c6:	4690      	mov	r8, r2
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2ce:	46b9      	mov	r9, r7
 800f2d0:	463c      	mov	r4, r7
 800f2d2:	9502      	str	r5, [sp, #8]
 800f2d4:	46ab      	mov	fp, r5
 800f2d6:	784a      	ldrb	r2, [r1, #1]
 800f2d8:	1c4b      	adds	r3, r1, #1
 800f2da:	9303      	str	r3, [sp, #12]
 800f2dc:	b342      	cbz	r2, 800f330 <__hexnan+0x88>
 800f2de:	4610      	mov	r0, r2
 800f2e0:	9105      	str	r1, [sp, #20]
 800f2e2:	9204      	str	r2, [sp, #16]
 800f2e4:	f7ff fd94 	bl	800ee10 <__hexdig_fun>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d151      	bne.n	800f390 <__hexnan+0xe8>
 800f2ec:	9a04      	ldr	r2, [sp, #16]
 800f2ee:	9905      	ldr	r1, [sp, #20]
 800f2f0:	2a20      	cmp	r2, #32
 800f2f2:	d818      	bhi.n	800f326 <__hexnan+0x7e>
 800f2f4:	9b02      	ldr	r3, [sp, #8]
 800f2f6:	459b      	cmp	fp, r3
 800f2f8:	dd13      	ble.n	800f322 <__hexnan+0x7a>
 800f2fa:	454c      	cmp	r4, r9
 800f2fc:	d206      	bcs.n	800f30c <__hexnan+0x64>
 800f2fe:	2d07      	cmp	r5, #7
 800f300:	dc04      	bgt.n	800f30c <__hexnan+0x64>
 800f302:	462a      	mov	r2, r5
 800f304:	4649      	mov	r1, r9
 800f306:	4620      	mov	r0, r4
 800f308:	f7ff ffa8 	bl	800f25c <L_shift>
 800f30c:	4544      	cmp	r4, r8
 800f30e:	d952      	bls.n	800f3b6 <__hexnan+0x10e>
 800f310:	2300      	movs	r3, #0
 800f312:	f1a4 0904 	sub.w	r9, r4, #4
 800f316:	f844 3c04 	str.w	r3, [r4, #-4]
 800f31a:	f8cd b008 	str.w	fp, [sp, #8]
 800f31e:	464c      	mov	r4, r9
 800f320:	461d      	mov	r5, r3
 800f322:	9903      	ldr	r1, [sp, #12]
 800f324:	e7d7      	b.n	800f2d6 <__hexnan+0x2e>
 800f326:	2a29      	cmp	r2, #41	@ 0x29
 800f328:	d157      	bne.n	800f3da <__hexnan+0x132>
 800f32a:	3102      	adds	r1, #2
 800f32c:	f8ca 1000 	str.w	r1, [sl]
 800f330:	f1bb 0f00 	cmp.w	fp, #0
 800f334:	d051      	beq.n	800f3da <__hexnan+0x132>
 800f336:	454c      	cmp	r4, r9
 800f338:	d206      	bcs.n	800f348 <__hexnan+0xa0>
 800f33a:	2d07      	cmp	r5, #7
 800f33c:	dc04      	bgt.n	800f348 <__hexnan+0xa0>
 800f33e:	462a      	mov	r2, r5
 800f340:	4649      	mov	r1, r9
 800f342:	4620      	mov	r0, r4
 800f344:	f7ff ff8a 	bl	800f25c <L_shift>
 800f348:	4544      	cmp	r4, r8
 800f34a:	d936      	bls.n	800f3ba <__hexnan+0x112>
 800f34c:	f1a8 0204 	sub.w	r2, r8, #4
 800f350:	4623      	mov	r3, r4
 800f352:	f853 1b04 	ldr.w	r1, [r3], #4
 800f356:	f842 1f04 	str.w	r1, [r2, #4]!
 800f35a:	429f      	cmp	r7, r3
 800f35c:	d2f9      	bcs.n	800f352 <__hexnan+0xaa>
 800f35e:	1b3b      	subs	r3, r7, r4
 800f360:	f023 0303 	bic.w	r3, r3, #3
 800f364:	3304      	adds	r3, #4
 800f366:	3401      	adds	r4, #1
 800f368:	3e03      	subs	r6, #3
 800f36a:	42b4      	cmp	r4, r6
 800f36c:	bf88      	it	hi
 800f36e:	2304      	movhi	r3, #4
 800f370:	4443      	add	r3, r8
 800f372:	2200      	movs	r2, #0
 800f374:	f843 2b04 	str.w	r2, [r3], #4
 800f378:	429f      	cmp	r7, r3
 800f37a:	d2fb      	bcs.n	800f374 <__hexnan+0xcc>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	b91b      	cbnz	r3, 800f388 <__hexnan+0xe0>
 800f380:	4547      	cmp	r7, r8
 800f382:	d128      	bne.n	800f3d6 <__hexnan+0x12e>
 800f384:	2301      	movs	r3, #1
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	2005      	movs	r0, #5
 800f38a:	b007      	add	sp, #28
 800f38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f390:	3501      	adds	r5, #1
 800f392:	2d08      	cmp	r5, #8
 800f394:	f10b 0b01 	add.w	fp, fp, #1
 800f398:	dd06      	ble.n	800f3a8 <__hexnan+0x100>
 800f39a:	4544      	cmp	r4, r8
 800f39c:	d9c1      	bls.n	800f322 <__hexnan+0x7a>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3a4:	2501      	movs	r5, #1
 800f3a6:	3c04      	subs	r4, #4
 800f3a8:	6822      	ldr	r2, [r4, #0]
 800f3aa:	f000 000f 	and.w	r0, r0, #15
 800f3ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f3b2:	6020      	str	r0, [r4, #0]
 800f3b4:	e7b5      	b.n	800f322 <__hexnan+0x7a>
 800f3b6:	2508      	movs	r5, #8
 800f3b8:	e7b3      	b.n	800f322 <__hexnan+0x7a>
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d0dd      	beq.n	800f37c <__hexnan+0xd4>
 800f3c0:	f1c3 0320 	rsb	r3, r3, #32
 800f3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c8:	40da      	lsrs	r2, r3
 800f3ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3d4:	e7d2      	b.n	800f37c <__hexnan+0xd4>
 800f3d6:	3f04      	subs	r7, #4
 800f3d8:	e7d0      	b.n	800f37c <__hexnan+0xd4>
 800f3da:	2004      	movs	r0, #4
 800f3dc:	e7d5      	b.n	800f38a <__hexnan+0xe2>
	...

0800f3e0 <malloc>:
 800f3e0:	4b02      	ldr	r3, [pc, #8]	@ (800f3ec <malloc+0xc>)
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	6818      	ldr	r0, [r3, #0]
 800f3e6:	f000 b825 	b.w	800f434 <_malloc_r>
 800f3ea:	bf00      	nop
 800f3ec:	20000188 	.word	0x20000188

0800f3f0 <sbrk_aligned>:
 800f3f0:	b570      	push	{r4, r5, r6, lr}
 800f3f2:	4e0f      	ldr	r6, [pc, #60]	@ (800f430 <sbrk_aligned+0x40>)
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	6831      	ldr	r1, [r6, #0]
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	b911      	cbnz	r1, 800f402 <sbrk_aligned+0x12>
 800f3fc:	f000 fe24 	bl	8010048 <_sbrk_r>
 800f400:	6030      	str	r0, [r6, #0]
 800f402:	4621      	mov	r1, r4
 800f404:	4628      	mov	r0, r5
 800f406:	f000 fe1f 	bl	8010048 <_sbrk_r>
 800f40a:	1c43      	adds	r3, r0, #1
 800f40c:	d103      	bne.n	800f416 <sbrk_aligned+0x26>
 800f40e:	f04f 34ff 	mov.w	r4, #4294967295
 800f412:	4620      	mov	r0, r4
 800f414:	bd70      	pop	{r4, r5, r6, pc}
 800f416:	1cc4      	adds	r4, r0, #3
 800f418:	f024 0403 	bic.w	r4, r4, #3
 800f41c:	42a0      	cmp	r0, r4
 800f41e:	d0f8      	beq.n	800f412 <sbrk_aligned+0x22>
 800f420:	1a21      	subs	r1, r4, r0
 800f422:	4628      	mov	r0, r5
 800f424:	f000 fe10 	bl	8010048 <_sbrk_r>
 800f428:	3001      	adds	r0, #1
 800f42a:	d1f2      	bne.n	800f412 <sbrk_aligned+0x22>
 800f42c:	e7ef      	b.n	800f40e <sbrk_aligned+0x1e>
 800f42e:	bf00      	nop
 800f430:	2000085c 	.word	0x2000085c

0800f434 <_malloc_r>:
 800f434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f438:	1ccd      	adds	r5, r1, #3
 800f43a:	f025 0503 	bic.w	r5, r5, #3
 800f43e:	3508      	adds	r5, #8
 800f440:	2d0c      	cmp	r5, #12
 800f442:	bf38      	it	cc
 800f444:	250c      	movcc	r5, #12
 800f446:	2d00      	cmp	r5, #0
 800f448:	4606      	mov	r6, r0
 800f44a:	db01      	blt.n	800f450 <_malloc_r+0x1c>
 800f44c:	42a9      	cmp	r1, r5
 800f44e:	d904      	bls.n	800f45a <_malloc_r+0x26>
 800f450:	230c      	movs	r3, #12
 800f452:	6033      	str	r3, [r6, #0]
 800f454:	2000      	movs	r0, #0
 800f456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f530 <_malloc_r+0xfc>
 800f45e:	f000 f87b 	bl	800f558 <__malloc_lock>
 800f462:	f8d8 3000 	ldr.w	r3, [r8]
 800f466:	461c      	mov	r4, r3
 800f468:	bb44      	cbnz	r4, 800f4bc <_malloc_r+0x88>
 800f46a:	4629      	mov	r1, r5
 800f46c:	4630      	mov	r0, r6
 800f46e:	f7ff ffbf 	bl	800f3f0 <sbrk_aligned>
 800f472:	1c43      	adds	r3, r0, #1
 800f474:	4604      	mov	r4, r0
 800f476:	d158      	bne.n	800f52a <_malloc_r+0xf6>
 800f478:	f8d8 4000 	ldr.w	r4, [r8]
 800f47c:	4627      	mov	r7, r4
 800f47e:	2f00      	cmp	r7, #0
 800f480:	d143      	bne.n	800f50a <_malloc_r+0xd6>
 800f482:	2c00      	cmp	r4, #0
 800f484:	d04b      	beq.n	800f51e <_malloc_r+0xea>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	4639      	mov	r1, r7
 800f48a:	4630      	mov	r0, r6
 800f48c:	eb04 0903 	add.w	r9, r4, r3
 800f490:	f000 fdda 	bl	8010048 <_sbrk_r>
 800f494:	4581      	cmp	r9, r0
 800f496:	d142      	bne.n	800f51e <_malloc_r+0xea>
 800f498:	6821      	ldr	r1, [r4, #0]
 800f49a:	1a6d      	subs	r5, r5, r1
 800f49c:	4629      	mov	r1, r5
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f7ff ffa6 	bl	800f3f0 <sbrk_aligned>
 800f4a4:	3001      	adds	r0, #1
 800f4a6:	d03a      	beq.n	800f51e <_malloc_r+0xea>
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	442b      	add	r3, r5
 800f4ac:	6023      	str	r3, [r4, #0]
 800f4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	bb62      	cbnz	r2, 800f510 <_malloc_r+0xdc>
 800f4b6:	f8c8 7000 	str.w	r7, [r8]
 800f4ba:	e00f      	b.n	800f4dc <_malloc_r+0xa8>
 800f4bc:	6822      	ldr	r2, [r4, #0]
 800f4be:	1b52      	subs	r2, r2, r5
 800f4c0:	d420      	bmi.n	800f504 <_malloc_r+0xd0>
 800f4c2:	2a0b      	cmp	r2, #11
 800f4c4:	d917      	bls.n	800f4f6 <_malloc_r+0xc2>
 800f4c6:	1961      	adds	r1, r4, r5
 800f4c8:	42a3      	cmp	r3, r4
 800f4ca:	6025      	str	r5, [r4, #0]
 800f4cc:	bf18      	it	ne
 800f4ce:	6059      	strne	r1, [r3, #4]
 800f4d0:	6863      	ldr	r3, [r4, #4]
 800f4d2:	bf08      	it	eq
 800f4d4:	f8c8 1000 	streq.w	r1, [r8]
 800f4d8:	5162      	str	r2, [r4, r5]
 800f4da:	604b      	str	r3, [r1, #4]
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 f841 	bl	800f564 <__malloc_unlock>
 800f4e2:	f104 000b 	add.w	r0, r4, #11
 800f4e6:	1d23      	adds	r3, r4, #4
 800f4e8:	f020 0007 	bic.w	r0, r0, #7
 800f4ec:	1ac2      	subs	r2, r0, r3
 800f4ee:	bf1c      	itt	ne
 800f4f0:	1a1b      	subne	r3, r3, r0
 800f4f2:	50a3      	strne	r3, [r4, r2]
 800f4f4:	e7af      	b.n	800f456 <_malloc_r+0x22>
 800f4f6:	6862      	ldr	r2, [r4, #4]
 800f4f8:	42a3      	cmp	r3, r4
 800f4fa:	bf0c      	ite	eq
 800f4fc:	f8c8 2000 	streq.w	r2, [r8]
 800f500:	605a      	strne	r2, [r3, #4]
 800f502:	e7eb      	b.n	800f4dc <_malloc_r+0xa8>
 800f504:	4623      	mov	r3, r4
 800f506:	6864      	ldr	r4, [r4, #4]
 800f508:	e7ae      	b.n	800f468 <_malloc_r+0x34>
 800f50a:	463c      	mov	r4, r7
 800f50c:	687f      	ldr	r7, [r7, #4]
 800f50e:	e7b6      	b.n	800f47e <_malloc_r+0x4a>
 800f510:	461a      	mov	r2, r3
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	42a3      	cmp	r3, r4
 800f516:	d1fb      	bne.n	800f510 <_malloc_r+0xdc>
 800f518:	2300      	movs	r3, #0
 800f51a:	6053      	str	r3, [r2, #4]
 800f51c:	e7de      	b.n	800f4dc <_malloc_r+0xa8>
 800f51e:	230c      	movs	r3, #12
 800f520:	6033      	str	r3, [r6, #0]
 800f522:	4630      	mov	r0, r6
 800f524:	f000 f81e 	bl	800f564 <__malloc_unlock>
 800f528:	e794      	b.n	800f454 <_malloc_r+0x20>
 800f52a:	6005      	str	r5, [r0, #0]
 800f52c:	e7d6      	b.n	800f4dc <_malloc_r+0xa8>
 800f52e:	bf00      	nop
 800f530:	20000860 	.word	0x20000860

0800f534 <__ascii_mbtowc>:
 800f534:	b082      	sub	sp, #8
 800f536:	b901      	cbnz	r1, 800f53a <__ascii_mbtowc+0x6>
 800f538:	a901      	add	r1, sp, #4
 800f53a:	b142      	cbz	r2, 800f54e <__ascii_mbtowc+0x1a>
 800f53c:	b14b      	cbz	r3, 800f552 <__ascii_mbtowc+0x1e>
 800f53e:	7813      	ldrb	r3, [r2, #0]
 800f540:	600b      	str	r3, [r1, #0]
 800f542:	7812      	ldrb	r2, [r2, #0]
 800f544:	1e10      	subs	r0, r2, #0
 800f546:	bf18      	it	ne
 800f548:	2001      	movne	r0, #1
 800f54a:	b002      	add	sp, #8
 800f54c:	4770      	bx	lr
 800f54e:	4610      	mov	r0, r2
 800f550:	e7fb      	b.n	800f54a <__ascii_mbtowc+0x16>
 800f552:	f06f 0001 	mvn.w	r0, #1
 800f556:	e7f8      	b.n	800f54a <__ascii_mbtowc+0x16>

0800f558 <__malloc_lock>:
 800f558:	4801      	ldr	r0, [pc, #4]	@ (800f560 <__malloc_lock+0x8>)
 800f55a:	f7fe bd4e 	b.w	800dffa <__retarget_lock_acquire_recursive>
 800f55e:	bf00      	nop
 800f560:	20000858 	.word	0x20000858

0800f564 <__malloc_unlock>:
 800f564:	4801      	ldr	r0, [pc, #4]	@ (800f56c <__malloc_unlock+0x8>)
 800f566:	f7fe bd49 	b.w	800dffc <__retarget_lock_release_recursive>
 800f56a:	bf00      	nop
 800f56c:	20000858 	.word	0x20000858

0800f570 <_Balloc>:
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	69c6      	ldr	r6, [r0, #28]
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	b976      	cbnz	r6, 800f598 <_Balloc+0x28>
 800f57a:	2010      	movs	r0, #16
 800f57c:	f7ff ff30 	bl	800f3e0 <malloc>
 800f580:	4602      	mov	r2, r0
 800f582:	61e0      	str	r0, [r4, #28]
 800f584:	b920      	cbnz	r0, 800f590 <_Balloc+0x20>
 800f586:	4b18      	ldr	r3, [pc, #96]	@ (800f5e8 <_Balloc+0x78>)
 800f588:	4818      	ldr	r0, [pc, #96]	@ (800f5ec <_Balloc+0x7c>)
 800f58a:	216b      	movs	r1, #107	@ 0x6b
 800f58c:	f000 fd6c 	bl	8010068 <__assert_func>
 800f590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f594:	6006      	str	r6, [r0, #0]
 800f596:	60c6      	str	r6, [r0, #12]
 800f598:	69e6      	ldr	r6, [r4, #28]
 800f59a:	68f3      	ldr	r3, [r6, #12]
 800f59c:	b183      	cbz	r3, 800f5c0 <_Balloc+0x50>
 800f59e:	69e3      	ldr	r3, [r4, #28]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5a6:	b9b8      	cbnz	r0, 800f5d8 <_Balloc+0x68>
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	fa01 f605 	lsl.w	r6, r1, r5
 800f5ae:	1d72      	adds	r2, r6, #5
 800f5b0:	0092      	lsls	r2, r2, #2
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 fd76 	bl	80100a4 <_calloc_r>
 800f5b8:	b160      	cbz	r0, 800f5d4 <_Balloc+0x64>
 800f5ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5be:	e00e      	b.n	800f5de <_Balloc+0x6e>
 800f5c0:	2221      	movs	r2, #33	@ 0x21
 800f5c2:	2104      	movs	r1, #4
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f000 fd6d 	bl	80100a4 <_calloc_r>
 800f5ca:	69e3      	ldr	r3, [r4, #28]
 800f5cc:	60f0      	str	r0, [r6, #12]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1e4      	bne.n	800f59e <_Balloc+0x2e>
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	6802      	ldr	r2, [r0, #0]
 800f5da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5e4:	e7f7      	b.n	800f5d6 <_Balloc+0x66>
 800f5e6:	bf00      	nop
 800f5e8:	08011bd1 	.word	0x08011bd1
 800f5ec:	08011cb1 	.word	0x08011cb1

0800f5f0 <_Bfree>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	69c6      	ldr	r6, [r0, #28]
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b976      	cbnz	r6, 800f618 <_Bfree+0x28>
 800f5fa:	2010      	movs	r0, #16
 800f5fc:	f7ff fef0 	bl	800f3e0 <malloc>
 800f600:	4602      	mov	r2, r0
 800f602:	61e8      	str	r0, [r5, #28]
 800f604:	b920      	cbnz	r0, 800f610 <_Bfree+0x20>
 800f606:	4b09      	ldr	r3, [pc, #36]	@ (800f62c <_Bfree+0x3c>)
 800f608:	4809      	ldr	r0, [pc, #36]	@ (800f630 <_Bfree+0x40>)
 800f60a:	218f      	movs	r1, #143	@ 0x8f
 800f60c:	f000 fd2c 	bl	8010068 <__assert_func>
 800f610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f614:	6006      	str	r6, [r0, #0]
 800f616:	60c6      	str	r6, [r0, #12]
 800f618:	b13c      	cbz	r4, 800f62a <_Bfree+0x3a>
 800f61a:	69eb      	ldr	r3, [r5, #28]
 800f61c:	6862      	ldr	r2, [r4, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f624:	6021      	str	r1, [r4, #0]
 800f626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f62a:	bd70      	pop	{r4, r5, r6, pc}
 800f62c:	08011bd1 	.word	0x08011bd1
 800f630:	08011cb1 	.word	0x08011cb1

0800f634 <__multadd>:
 800f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f638:	690d      	ldr	r5, [r1, #16]
 800f63a:	4607      	mov	r7, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	461e      	mov	r6, r3
 800f640:	f101 0c14 	add.w	ip, r1, #20
 800f644:	2000      	movs	r0, #0
 800f646:	f8dc 3000 	ldr.w	r3, [ip]
 800f64a:	b299      	uxth	r1, r3
 800f64c:	fb02 6101 	mla	r1, r2, r1, r6
 800f650:	0c1e      	lsrs	r6, r3, #16
 800f652:	0c0b      	lsrs	r3, r1, #16
 800f654:	fb02 3306 	mla	r3, r2, r6, r3
 800f658:	b289      	uxth	r1, r1
 800f65a:	3001      	adds	r0, #1
 800f65c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f660:	4285      	cmp	r5, r0
 800f662:	f84c 1b04 	str.w	r1, [ip], #4
 800f666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f66a:	dcec      	bgt.n	800f646 <__multadd+0x12>
 800f66c:	b30e      	cbz	r6, 800f6b2 <__multadd+0x7e>
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	42ab      	cmp	r3, r5
 800f672:	dc19      	bgt.n	800f6a8 <__multadd+0x74>
 800f674:	6861      	ldr	r1, [r4, #4]
 800f676:	4638      	mov	r0, r7
 800f678:	3101      	adds	r1, #1
 800f67a:	f7ff ff79 	bl	800f570 <_Balloc>
 800f67e:	4680      	mov	r8, r0
 800f680:	b928      	cbnz	r0, 800f68e <__multadd+0x5a>
 800f682:	4602      	mov	r2, r0
 800f684:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b8 <__multadd+0x84>)
 800f686:	480d      	ldr	r0, [pc, #52]	@ (800f6bc <__multadd+0x88>)
 800f688:	21ba      	movs	r1, #186	@ 0xba
 800f68a:	f000 fced 	bl	8010068 <__assert_func>
 800f68e:	6922      	ldr	r2, [r4, #16]
 800f690:	3202      	adds	r2, #2
 800f692:	f104 010c 	add.w	r1, r4, #12
 800f696:	0092      	lsls	r2, r2, #2
 800f698:	300c      	adds	r0, #12
 800f69a:	f7fe fcb0 	bl	800dffe <memcpy>
 800f69e:	4621      	mov	r1, r4
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	f7ff ffa5 	bl	800f5f0 <_Bfree>
 800f6a6:	4644      	mov	r4, r8
 800f6a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f6ac:	3501      	adds	r5, #1
 800f6ae:	615e      	str	r6, [r3, #20]
 800f6b0:	6125      	str	r5, [r4, #16]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	08011c40 	.word	0x08011c40
 800f6bc:	08011cb1 	.word	0x08011cb1

0800f6c0 <__s2b>:
 800f6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	461f      	mov	r7, r3
 800f6ca:	2209      	movs	r2, #9
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	db09      	blt.n	800f6f0 <__s2b+0x30>
 800f6dc:	4630      	mov	r0, r6
 800f6de:	f7ff ff47 	bl	800f570 <_Balloc>
 800f6e2:	b940      	cbnz	r0, 800f6f6 <__s2b+0x36>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	4b19      	ldr	r3, [pc, #100]	@ (800f74c <__s2b+0x8c>)
 800f6e8:	4819      	ldr	r0, [pc, #100]	@ (800f750 <__s2b+0x90>)
 800f6ea:	21d3      	movs	r1, #211	@ 0xd3
 800f6ec:	f000 fcbc 	bl	8010068 <__assert_func>
 800f6f0:	0052      	lsls	r2, r2, #1
 800f6f2:	3101      	adds	r1, #1
 800f6f4:	e7f0      	b.n	800f6d8 <__s2b+0x18>
 800f6f6:	9b08      	ldr	r3, [sp, #32]
 800f6f8:	6143      	str	r3, [r0, #20]
 800f6fa:	2d09      	cmp	r5, #9
 800f6fc:	f04f 0301 	mov.w	r3, #1
 800f700:	6103      	str	r3, [r0, #16]
 800f702:	dd16      	ble.n	800f732 <__s2b+0x72>
 800f704:	f104 0909 	add.w	r9, r4, #9
 800f708:	46c8      	mov	r8, r9
 800f70a:	442c      	add	r4, r5
 800f70c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f710:	4601      	mov	r1, r0
 800f712:	3b30      	subs	r3, #48	@ 0x30
 800f714:	220a      	movs	r2, #10
 800f716:	4630      	mov	r0, r6
 800f718:	f7ff ff8c 	bl	800f634 <__multadd>
 800f71c:	45a0      	cmp	r8, r4
 800f71e:	d1f5      	bne.n	800f70c <__s2b+0x4c>
 800f720:	f1a5 0408 	sub.w	r4, r5, #8
 800f724:	444c      	add	r4, r9
 800f726:	1b2d      	subs	r5, r5, r4
 800f728:	1963      	adds	r3, r4, r5
 800f72a:	42bb      	cmp	r3, r7
 800f72c:	db04      	blt.n	800f738 <__s2b+0x78>
 800f72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f732:	340a      	adds	r4, #10
 800f734:	2509      	movs	r5, #9
 800f736:	e7f6      	b.n	800f726 <__s2b+0x66>
 800f738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f73c:	4601      	mov	r1, r0
 800f73e:	3b30      	subs	r3, #48	@ 0x30
 800f740:	220a      	movs	r2, #10
 800f742:	4630      	mov	r0, r6
 800f744:	f7ff ff76 	bl	800f634 <__multadd>
 800f748:	e7ee      	b.n	800f728 <__s2b+0x68>
 800f74a:	bf00      	nop
 800f74c:	08011c40 	.word	0x08011c40
 800f750:	08011cb1 	.word	0x08011cb1

0800f754 <__hi0bits>:
 800f754:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f758:	4603      	mov	r3, r0
 800f75a:	bf36      	itet	cc
 800f75c:	0403      	lslcc	r3, r0, #16
 800f75e:	2000      	movcs	r0, #0
 800f760:	2010      	movcc	r0, #16
 800f762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f766:	bf3c      	itt	cc
 800f768:	021b      	lslcc	r3, r3, #8
 800f76a:	3008      	addcc	r0, #8
 800f76c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f770:	bf3c      	itt	cc
 800f772:	011b      	lslcc	r3, r3, #4
 800f774:	3004      	addcc	r0, #4
 800f776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f77a:	bf3c      	itt	cc
 800f77c:	009b      	lslcc	r3, r3, #2
 800f77e:	3002      	addcc	r0, #2
 800f780:	2b00      	cmp	r3, #0
 800f782:	db05      	blt.n	800f790 <__hi0bits+0x3c>
 800f784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f788:	f100 0001 	add.w	r0, r0, #1
 800f78c:	bf08      	it	eq
 800f78e:	2020      	moveq	r0, #32
 800f790:	4770      	bx	lr

0800f792 <__lo0bits>:
 800f792:	6803      	ldr	r3, [r0, #0]
 800f794:	4602      	mov	r2, r0
 800f796:	f013 0007 	ands.w	r0, r3, #7
 800f79a:	d00b      	beq.n	800f7b4 <__lo0bits+0x22>
 800f79c:	07d9      	lsls	r1, r3, #31
 800f79e:	d421      	bmi.n	800f7e4 <__lo0bits+0x52>
 800f7a0:	0798      	lsls	r0, r3, #30
 800f7a2:	bf49      	itett	mi
 800f7a4:	085b      	lsrmi	r3, r3, #1
 800f7a6:	089b      	lsrpl	r3, r3, #2
 800f7a8:	2001      	movmi	r0, #1
 800f7aa:	6013      	strmi	r3, [r2, #0]
 800f7ac:	bf5c      	itt	pl
 800f7ae:	6013      	strpl	r3, [r2, #0]
 800f7b0:	2002      	movpl	r0, #2
 800f7b2:	4770      	bx	lr
 800f7b4:	b299      	uxth	r1, r3
 800f7b6:	b909      	cbnz	r1, 800f7bc <__lo0bits+0x2a>
 800f7b8:	0c1b      	lsrs	r3, r3, #16
 800f7ba:	2010      	movs	r0, #16
 800f7bc:	b2d9      	uxtb	r1, r3
 800f7be:	b909      	cbnz	r1, 800f7c4 <__lo0bits+0x32>
 800f7c0:	3008      	adds	r0, #8
 800f7c2:	0a1b      	lsrs	r3, r3, #8
 800f7c4:	0719      	lsls	r1, r3, #28
 800f7c6:	bf04      	itt	eq
 800f7c8:	091b      	lsreq	r3, r3, #4
 800f7ca:	3004      	addeq	r0, #4
 800f7cc:	0799      	lsls	r1, r3, #30
 800f7ce:	bf04      	itt	eq
 800f7d0:	089b      	lsreq	r3, r3, #2
 800f7d2:	3002      	addeq	r0, #2
 800f7d4:	07d9      	lsls	r1, r3, #31
 800f7d6:	d403      	bmi.n	800f7e0 <__lo0bits+0x4e>
 800f7d8:	085b      	lsrs	r3, r3, #1
 800f7da:	f100 0001 	add.w	r0, r0, #1
 800f7de:	d003      	beq.n	800f7e8 <__lo0bits+0x56>
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	4770      	bx	lr
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	4770      	bx	lr
 800f7e8:	2020      	movs	r0, #32
 800f7ea:	4770      	bx	lr

0800f7ec <__i2b>:
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	f7ff febd 	bl	800f570 <_Balloc>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	b928      	cbnz	r0, 800f806 <__i2b+0x1a>
 800f7fa:	4b05      	ldr	r3, [pc, #20]	@ (800f810 <__i2b+0x24>)
 800f7fc:	4805      	ldr	r0, [pc, #20]	@ (800f814 <__i2b+0x28>)
 800f7fe:	f240 1145 	movw	r1, #325	@ 0x145
 800f802:	f000 fc31 	bl	8010068 <__assert_func>
 800f806:	2301      	movs	r3, #1
 800f808:	6144      	str	r4, [r0, #20]
 800f80a:	6103      	str	r3, [r0, #16]
 800f80c:	bd10      	pop	{r4, pc}
 800f80e:	bf00      	nop
 800f810:	08011c40 	.word	0x08011c40
 800f814:	08011cb1 	.word	0x08011cb1

0800f818 <__multiply>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	4614      	mov	r4, r2
 800f81e:	690a      	ldr	r2, [r1, #16]
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	429a      	cmp	r2, r3
 800f824:	bfa8      	it	ge
 800f826:	4623      	movge	r3, r4
 800f828:	460f      	mov	r7, r1
 800f82a:	bfa4      	itt	ge
 800f82c:	460c      	movge	r4, r1
 800f82e:	461f      	movge	r7, r3
 800f830:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f834:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	6861      	ldr	r1, [r4, #4]
 800f83c:	eb0a 0609 	add.w	r6, sl, r9
 800f840:	42b3      	cmp	r3, r6
 800f842:	b085      	sub	sp, #20
 800f844:	bfb8      	it	lt
 800f846:	3101      	addlt	r1, #1
 800f848:	f7ff fe92 	bl	800f570 <_Balloc>
 800f84c:	b930      	cbnz	r0, 800f85c <__multiply+0x44>
 800f84e:	4602      	mov	r2, r0
 800f850:	4b44      	ldr	r3, [pc, #272]	@ (800f964 <__multiply+0x14c>)
 800f852:	4845      	ldr	r0, [pc, #276]	@ (800f968 <__multiply+0x150>)
 800f854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f858:	f000 fc06 	bl	8010068 <__assert_func>
 800f85c:	f100 0514 	add.w	r5, r0, #20
 800f860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f864:	462b      	mov	r3, r5
 800f866:	2200      	movs	r2, #0
 800f868:	4543      	cmp	r3, r8
 800f86a:	d321      	bcc.n	800f8b0 <__multiply+0x98>
 800f86c:	f107 0114 	add.w	r1, r7, #20
 800f870:	f104 0214 	add.w	r2, r4, #20
 800f874:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f878:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f87c:	9302      	str	r3, [sp, #8]
 800f87e:	1b13      	subs	r3, r2, r4
 800f880:	3b15      	subs	r3, #21
 800f882:	f023 0303 	bic.w	r3, r3, #3
 800f886:	3304      	adds	r3, #4
 800f888:	f104 0715 	add.w	r7, r4, #21
 800f88c:	42ba      	cmp	r2, r7
 800f88e:	bf38      	it	cc
 800f890:	2304      	movcc	r3, #4
 800f892:	9301      	str	r3, [sp, #4]
 800f894:	9b02      	ldr	r3, [sp, #8]
 800f896:	9103      	str	r1, [sp, #12]
 800f898:	428b      	cmp	r3, r1
 800f89a:	d80c      	bhi.n	800f8b6 <__multiply+0x9e>
 800f89c:	2e00      	cmp	r6, #0
 800f89e:	dd03      	ble.n	800f8a8 <__multiply+0x90>
 800f8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d05b      	beq.n	800f960 <__multiply+0x148>
 800f8a8:	6106      	str	r6, [r0, #16]
 800f8aa:	b005      	add	sp, #20
 800f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b0:	f843 2b04 	str.w	r2, [r3], #4
 800f8b4:	e7d8      	b.n	800f868 <__multiply+0x50>
 800f8b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800f8ba:	f1ba 0f00 	cmp.w	sl, #0
 800f8be:	d024      	beq.n	800f90a <__multiply+0xf2>
 800f8c0:	f104 0e14 	add.w	lr, r4, #20
 800f8c4:	46a9      	mov	r9, r5
 800f8c6:	f04f 0c00 	mov.w	ip, #0
 800f8ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f8ce:	f8d9 3000 	ldr.w	r3, [r9]
 800f8d2:	fa1f fb87 	uxth.w	fp, r7
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f8dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f8e0:	f8d9 7000 	ldr.w	r7, [r9]
 800f8e4:	4463      	add	r3, ip
 800f8e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f8ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800f8ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f8f8:	4572      	cmp	r2, lr
 800f8fa:	f849 3b04 	str.w	r3, [r9], #4
 800f8fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f902:	d8e2      	bhi.n	800f8ca <__multiply+0xb2>
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	f845 c003 	str.w	ip, [r5, r3]
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f910:	3104      	adds	r1, #4
 800f912:	f1b9 0f00 	cmp.w	r9, #0
 800f916:	d021      	beq.n	800f95c <__multiply+0x144>
 800f918:	682b      	ldr	r3, [r5, #0]
 800f91a:	f104 0c14 	add.w	ip, r4, #20
 800f91e:	46ae      	mov	lr, r5
 800f920:	f04f 0a00 	mov.w	sl, #0
 800f924:	f8bc b000 	ldrh.w	fp, [ip]
 800f928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f92c:	fb09 770b 	mla	r7, r9, fp, r7
 800f930:	4457      	add	r7, sl
 800f932:	b29b      	uxth	r3, r3
 800f934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f938:	f84e 3b04 	str.w	r3, [lr], #4
 800f93c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f944:	f8be 3000 	ldrh.w	r3, [lr]
 800f948:	fb09 330a 	mla	r3, r9, sl, r3
 800f94c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f950:	4562      	cmp	r2, ip
 800f952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f956:	d8e5      	bhi.n	800f924 <__multiply+0x10c>
 800f958:	9f01      	ldr	r7, [sp, #4]
 800f95a:	51eb      	str	r3, [r5, r7]
 800f95c:	3504      	adds	r5, #4
 800f95e:	e799      	b.n	800f894 <__multiply+0x7c>
 800f960:	3e01      	subs	r6, #1
 800f962:	e79b      	b.n	800f89c <__multiply+0x84>
 800f964:	08011c40 	.word	0x08011c40
 800f968:	08011cb1 	.word	0x08011cb1

0800f96c <__pow5mult>:
 800f96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f970:	4615      	mov	r5, r2
 800f972:	f012 0203 	ands.w	r2, r2, #3
 800f976:	4607      	mov	r7, r0
 800f978:	460e      	mov	r6, r1
 800f97a:	d007      	beq.n	800f98c <__pow5mult+0x20>
 800f97c:	4c25      	ldr	r4, [pc, #148]	@ (800fa14 <__pow5mult+0xa8>)
 800f97e:	3a01      	subs	r2, #1
 800f980:	2300      	movs	r3, #0
 800f982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f986:	f7ff fe55 	bl	800f634 <__multadd>
 800f98a:	4606      	mov	r6, r0
 800f98c:	10ad      	asrs	r5, r5, #2
 800f98e:	d03d      	beq.n	800fa0c <__pow5mult+0xa0>
 800f990:	69fc      	ldr	r4, [r7, #28]
 800f992:	b97c      	cbnz	r4, 800f9b4 <__pow5mult+0x48>
 800f994:	2010      	movs	r0, #16
 800f996:	f7ff fd23 	bl	800f3e0 <malloc>
 800f99a:	4602      	mov	r2, r0
 800f99c:	61f8      	str	r0, [r7, #28]
 800f99e:	b928      	cbnz	r0, 800f9ac <__pow5mult+0x40>
 800f9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800fa18 <__pow5mult+0xac>)
 800f9a2:	481e      	ldr	r0, [pc, #120]	@ (800fa1c <__pow5mult+0xb0>)
 800f9a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f9a8:	f000 fb5e 	bl	8010068 <__assert_func>
 800f9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9b0:	6004      	str	r4, [r0, #0]
 800f9b2:	60c4      	str	r4, [r0, #12]
 800f9b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f9b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9bc:	b94c      	cbnz	r4, 800f9d2 <__pow5mult+0x66>
 800f9be:	f240 2171 	movw	r1, #625	@ 0x271
 800f9c2:	4638      	mov	r0, r7
 800f9c4:	f7ff ff12 	bl	800f7ec <__i2b>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	6003      	str	r3, [r0, #0]
 800f9d2:	f04f 0900 	mov.w	r9, #0
 800f9d6:	07eb      	lsls	r3, r5, #31
 800f9d8:	d50a      	bpl.n	800f9f0 <__pow5mult+0x84>
 800f9da:	4631      	mov	r1, r6
 800f9dc:	4622      	mov	r2, r4
 800f9de:	4638      	mov	r0, r7
 800f9e0:	f7ff ff1a 	bl	800f818 <__multiply>
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4680      	mov	r8, r0
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	f7ff fe01 	bl	800f5f0 <_Bfree>
 800f9ee:	4646      	mov	r6, r8
 800f9f0:	106d      	asrs	r5, r5, #1
 800f9f2:	d00b      	beq.n	800fa0c <__pow5mult+0xa0>
 800f9f4:	6820      	ldr	r0, [r4, #0]
 800f9f6:	b938      	cbnz	r0, 800fa08 <__pow5mult+0x9c>
 800f9f8:	4622      	mov	r2, r4
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	4638      	mov	r0, r7
 800f9fe:	f7ff ff0b 	bl	800f818 <__multiply>
 800fa02:	6020      	str	r0, [r4, #0]
 800fa04:	f8c0 9000 	str.w	r9, [r0]
 800fa08:	4604      	mov	r4, r0
 800fa0a:	e7e4      	b.n	800f9d6 <__pow5mult+0x6a>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa12:	bf00      	nop
 800fa14:	08011d0c 	.word	0x08011d0c
 800fa18:	08011bd1 	.word	0x08011bd1
 800fa1c:	08011cb1 	.word	0x08011cb1

0800fa20 <__lshift>:
 800fa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa24:	460c      	mov	r4, r1
 800fa26:	6849      	ldr	r1, [r1, #4]
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa2e:	68a3      	ldr	r3, [r4, #8]
 800fa30:	4607      	mov	r7, r0
 800fa32:	4691      	mov	r9, r2
 800fa34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa38:	f108 0601 	add.w	r6, r8, #1
 800fa3c:	42b3      	cmp	r3, r6
 800fa3e:	db0b      	blt.n	800fa58 <__lshift+0x38>
 800fa40:	4638      	mov	r0, r7
 800fa42:	f7ff fd95 	bl	800f570 <_Balloc>
 800fa46:	4605      	mov	r5, r0
 800fa48:	b948      	cbnz	r0, 800fa5e <__lshift+0x3e>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4b28      	ldr	r3, [pc, #160]	@ (800faf0 <__lshift+0xd0>)
 800fa4e:	4829      	ldr	r0, [pc, #164]	@ (800faf4 <__lshift+0xd4>)
 800fa50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fa54:	f000 fb08 	bl	8010068 <__assert_func>
 800fa58:	3101      	adds	r1, #1
 800fa5a:	005b      	lsls	r3, r3, #1
 800fa5c:	e7ee      	b.n	800fa3c <__lshift+0x1c>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	f100 0114 	add.w	r1, r0, #20
 800fa64:	f100 0210 	add.w	r2, r0, #16
 800fa68:	4618      	mov	r0, r3
 800fa6a:	4553      	cmp	r3, sl
 800fa6c:	db33      	blt.n	800fad6 <__lshift+0xb6>
 800fa6e:	6920      	ldr	r0, [r4, #16]
 800fa70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa74:	f104 0314 	add.w	r3, r4, #20
 800fa78:	f019 091f 	ands.w	r9, r9, #31
 800fa7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa84:	d02b      	beq.n	800fade <__lshift+0xbe>
 800fa86:	f1c9 0e20 	rsb	lr, r9, #32
 800fa8a:	468a      	mov	sl, r1
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	6818      	ldr	r0, [r3, #0]
 800fa90:	fa00 f009 	lsl.w	r0, r0, r9
 800fa94:	4310      	orrs	r0, r2
 800fa96:	f84a 0b04 	str.w	r0, [sl], #4
 800fa9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa9e:	459c      	cmp	ip, r3
 800faa0:	fa22 f20e 	lsr.w	r2, r2, lr
 800faa4:	d8f3      	bhi.n	800fa8e <__lshift+0x6e>
 800faa6:	ebac 0304 	sub.w	r3, ip, r4
 800faaa:	3b15      	subs	r3, #21
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	3304      	adds	r3, #4
 800fab2:	f104 0015 	add.w	r0, r4, #21
 800fab6:	4584      	cmp	ip, r0
 800fab8:	bf38      	it	cc
 800faba:	2304      	movcc	r3, #4
 800fabc:	50ca      	str	r2, [r1, r3]
 800fabe:	b10a      	cbz	r2, 800fac4 <__lshift+0xa4>
 800fac0:	f108 0602 	add.w	r6, r8, #2
 800fac4:	3e01      	subs	r6, #1
 800fac6:	4638      	mov	r0, r7
 800fac8:	612e      	str	r6, [r5, #16]
 800faca:	4621      	mov	r1, r4
 800facc:	f7ff fd90 	bl	800f5f0 <_Bfree>
 800fad0:	4628      	mov	r0, r5
 800fad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fada:	3301      	adds	r3, #1
 800fadc:	e7c5      	b.n	800fa6a <__lshift+0x4a>
 800fade:	3904      	subs	r1, #4
 800fae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fae8:	459c      	cmp	ip, r3
 800faea:	d8f9      	bhi.n	800fae0 <__lshift+0xc0>
 800faec:	e7ea      	b.n	800fac4 <__lshift+0xa4>
 800faee:	bf00      	nop
 800faf0:	08011c40 	.word	0x08011c40
 800faf4:	08011cb1 	.word	0x08011cb1

0800faf8 <__mcmp>:
 800faf8:	690a      	ldr	r2, [r1, #16]
 800fafa:	4603      	mov	r3, r0
 800fafc:	6900      	ldr	r0, [r0, #16]
 800fafe:	1a80      	subs	r0, r0, r2
 800fb00:	b530      	push	{r4, r5, lr}
 800fb02:	d10e      	bne.n	800fb22 <__mcmp+0x2a>
 800fb04:	3314      	adds	r3, #20
 800fb06:	3114      	adds	r1, #20
 800fb08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb18:	4295      	cmp	r5, r2
 800fb1a:	d003      	beq.n	800fb24 <__mcmp+0x2c>
 800fb1c:	d205      	bcs.n	800fb2a <__mcmp+0x32>
 800fb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb22:	bd30      	pop	{r4, r5, pc}
 800fb24:	42a3      	cmp	r3, r4
 800fb26:	d3f3      	bcc.n	800fb10 <__mcmp+0x18>
 800fb28:	e7fb      	b.n	800fb22 <__mcmp+0x2a>
 800fb2a:	2001      	movs	r0, #1
 800fb2c:	e7f9      	b.n	800fb22 <__mcmp+0x2a>
	...

0800fb30 <__mdiff>:
 800fb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	4689      	mov	r9, r1
 800fb36:	4606      	mov	r6, r0
 800fb38:	4611      	mov	r1, r2
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	f7ff ffdb 	bl	800faf8 <__mcmp>
 800fb42:	1e05      	subs	r5, r0, #0
 800fb44:	d112      	bne.n	800fb6c <__mdiff+0x3c>
 800fb46:	4629      	mov	r1, r5
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff fd11 	bl	800f570 <_Balloc>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	b928      	cbnz	r0, 800fb5e <__mdiff+0x2e>
 800fb52:	4b3f      	ldr	r3, [pc, #252]	@ (800fc50 <__mdiff+0x120>)
 800fb54:	f240 2137 	movw	r1, #567	@ 0x237
 800fb58:	483e      	ldr	r0, [pc, #248]	@ (800fc54 <__mdiff+0x124>)
 800fb5a:	f000 fa85 	bl	8010068 <__assert_func>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb64:	4610      	mov	r0, r2
 800fb66:	b003      	add	sp, #12
 800fb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6c:	bfbc      	itt	lt
 800fb6e:	464b      	movlt	r3, r9
 800fb70:	46a1      	movlt	r9, r4
 800fb72:	4630      	mov	r0, r6
 800fb74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fb78:	bfba      	itte	lt
 800fb7a:	461c      	movlt	r4, r3
 800fb7c:	2501      	movlt	r5, #1
 800fb7e:	2500      	movge	r5, #0
 800fb80:	f7ff fcf6 	bl	800f570 <_Balloc>
 800fb84:	4602      	mov	r2, r0
 800fb86:	b918      	cbnz	r0, 800fb90 <__mdiff+0x60>
 800fb88:	4b31      	ldr	r3, [pc, #196]	@ (800fc50 <__mdiff+0x120>)
 800fb8a:	f240 2145 	movw	r1, #581	@ 0x245
 800fb8e:	e7e3      	b.n	800fb58 <__mdiff+0x28>
 800fb90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fb94:	6926      	ldr	r6, [r4, #16]
 800fb96:	60c5      	str	r5, [r0, #12]
 800fb98:	f109 0310 	add.w	r3, r9, #16
 800fb9c:	f109 0514 	add.w	r5, r9, #20
 800fba0:	f104 0e14 	add.w	lr, r4, #20
 800fba4:	f100 0b14 	add.w	fp, r0, #20
 800fba8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fbac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	46d9      	mov	r9, fp
 800fbb4:	f04f 0c00 	mov.w	ip, #0
 800fbb8:	9b01      	ldr	r3, [sp, #4]
 800fbba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fbbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fbc2:	9301      	str	r3, [sp, #4]
 800fbc4:	fa1f f38a 	uxth.w	r3, sl
 800fbc8:	4619      	mov	r1, r3
 800fbca:	b283      	uxth	r3, r0
 800fbcc:	1acb      	subs	r3, r1, r3
 800fbce:	0c00      	lsrs	r0, r0, #16
 800fbd0:	4463      	add	r3, ip
 800fbd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fbd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fbe0:	4576      	cmp	r6, lr
 800fbe2:	f849 3b04 	str.w	r3, [r9], #4
 800fbe6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fbea:	d8e5      	bhi.n	800fbb8 <__mdiff+0x88>
 800fbec:	1b33      	subs	r3, r6, r4
 800fbee:	3b15      	subs	r3, #21
 800fbf0:	f023 0303 	bic.w	r3, r3, #3
 800fbf4:	3415      	adds	r4, #21
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	42a6      	cmp	r6, r4
 800fbfa:	bf38      	it	cc
 800fbfc:	2304      	movcc	r3, #4
 800fbfe:	441d      	add	r5, r3
 800fc00:	445b      	add	r3, fp
 800fc02:	461e      	mov	r6, r3
 800fc04:	462c      	mov	r4, r5
 800fc06:	4544      	cmp	r4, r8
 800fc08:	d30e      	bcc.n	800fc28 <__mdiff+0xf8>
 800fc0a:	f108 0103 	add.w	r1, r8, #3
 800fc0e:	1b49      	subs	r1, r1, r5
 800fc10:	f021 0103 	bic.w	r1, r1, #3
 800fc14:	3d03      	subs	r5, #3
 800fc16:	45a8      	cmp	r8, r5
 800fc18:	bf38      	it	cc
 800fc1a:	2100      	movcc	r1, #0
 800fc1c:	440b      	add	r3, r1
 800fc1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc22:	b191      	cbz	r1, 800fc4a <__mdiff+0x11a>
 800fc24:	6117      	str	r7, [r2, #16]
 800fc26:	e79d      	b.n	800fb64 <__mdiff+0x34>
 800fc28:	f854 1b04 	ldr.w	r1, [r4], #4
 800fc2c:	46e6      	mov	lr, ip
 800fc2e:	0c08      	lsrs	r0, r1, #16
 800fc30:	fa1c fc81 	uxtah	ip, ip, r1
 800fc34:	4471      	add	r1, lr
 800fc36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fc3a:	b289      	uxth	r1, r1
 800fc3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fc40:	f846 1b04 	str.w	r1, [r6], #4
 800fc44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc48:	e7dd      	b.n	800fc06 <__mdiff+0xd6>
 800fc4a:	3f01      	subs	r7, #1
 800fc4c:	e7e7      	b.n	800fc1e <__mdiff+0xee>
 800fc4e:	bf00      	nop
 800fc50:	08011c40 	.word	0x08011c40
 800fc54:	08011cb1 	.word	0x08011cb1

0800fc58 <__ulp>:
 800fc58:	b082      	sub	sp, #8
 800fc5a:	ed8d 0b00 	vstr	d0, [sp]
 800fc5e:	9a01      	ldr	r2, [sp, #4]
 800fc60:	4b0f      	ldr	r3, [pc, #60]	@ (800fca0 <__ulp+0x48>)
 800fc62:	4013      	ands	r3, r2
 800fc64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	dc08      	bgt.n	800fc7e <__ulp+0x26>
 800fc6c:	425b      	negs	r3, r3
 800fc6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fc72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fc76:	da04      	bge.n	800fc82 <__ulp+0x2a>
 800fc78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fc7c:	4113      	asrs	r3, r2
 800fc7e:	2200      	movs	r2, #0
 800fc80:	e008      	b.n	800fc94 <__ulp+0x3c>
 800fc82:	f1a2 0314 	sub.w	r3, r2, #20
 800fc86:	2b1e      	cmp	r3, #30
 800fc88:	bfda      	itte	le
 800fc8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fc8e:	40da      	lsrle	r2, r3
 800fc90:	2201      	movgt	r2, #1
 800fc92:	2300      	movs	r3, #0
 800fc94:	4619      	mov	r1, r3
 800fc96:	4610      	mov	r0, r2
 800fc98:	ec41 0b10 	vmov	d0, r0, r1
 800fc9c:	b002      	add	sp, #8
 800fc9e:	4770      	bx	lr
 800fca0:	7ff00000 	.word	0x7ff00000

0800fca4 <__b2d>:
 800fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca8:	6906      	ldr	r6, [r0, #16]
 800fcaa:	f100 0814 	add.w	r8, r0, #20
 800fcae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fcb2:	1f37      	subs	r7, r6, #4
 800fcb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fcb8:	4610      	mov	r0, r2
 800fcba:	f7ff fd4b 	bl	800f754 <__hi0bits>
 800fcbe:	f1c0 0320 	rsb	r3, r0, #32
 800fcc2:	280a      	cmp	r0, #10
 800fcc4:	600b      	str	r3, [r1, #0]
 800fcc6:	491b      	ldr	r1, [pc, #108]	@ (800fd34 <__b2d+0x90>)
 800fcc8:	dc15      	bgt.n	800fcf6 <__b2d+0x52>
 800fcca:	f1c0 0c0b 	rsb	ip, r0, #11
 800fcce:	fa22 f30c 	lsr.w	r3, r2, ip
 800fcd2:	45b8      	cmp	r8, r7
 800fcd4:	ea43 0501 	orr.w	r5, r3, r1
 800fcd8:	bf34      	ite	cc
 800fcda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcde:	2300      	movcs	r3, #0
 800fce0:	3015      	adds	r0, #21
 800fce2:	fa02 f000 	lsl.w	r0, r2, r0
 800fce6:	fa23 f30c 	lsr.w	r3, r3, ip
 800fcea:	4303      	orrs	r3, r0
 800fcec:	461c      	mov	r4, r3
 800fcee:	ec45 4b10 	vmov	d0, r4, r5
 800fcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf6:	45b8      	cmp	r8, r7
 800fcf8:	bf3a      	itte	cc
 800fcfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fcfe:	f1a6 0708 	subcc.w	r7, r6, #8
 800fd02:	2300      	movcs	r3, #0
 800fd04:	380b      	subs	r0, #11
 800fd06:	d012      	beq.n	800fd2e <__b2d+0x8a>
 800fd08:	f1c0 0120 	rsb	r1, r0, #32
 800fd0c:	fa23 f401 	lsr.w	r4, r3, r1
 800fd10:	4082      	lsls	r2, r0
 800fd12:	4322      	orrs	r2, r4
 800fd14:	4547      	cmp	r7, r8
 800fd16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fd1a:	bf8c      	ite	hi
 800fd1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fd20:	2200      	movls	r2, #0
 800fd22:	4083      	lsls	r3, r0
 800fd24:	40ca      	lsrs	r2, r1
 800fd26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	e7de      	b.n	800fcec <__b2d+0x48>
 800fd2e:	ea42 0501 	orr.w	r5, r2, r1
 800fd32:	e7db      	b.n	800fcec <__b2d+0x48>
 800fd34:	3ff00000 	.word	0x3ff00000

0800fd38 <__d2b>:
 800fd38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd3c:	460f      	mov	r7, r1
 800fd3e:	2101      	movs	r1, #1
 800fd40:	ec59 8b10 	vmov	r8, r9, d0
 800fd44:	4616      	mov	r6, r2
 800fd46:	f7ff fc13 	bl	800f570 <_Balloc>
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	b930      	cbnz	r0, 800fd5c <__d2b+0x24>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	4b23      	ldr	r3, [pc, #140]	@ (800fde0 <__d2b+0xa8>)
 800fd52:	4824      	ldr	r0, [pc, #144]	@ (800fde4 <__d2b+0xac>)
 800fd54:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd58:	f000 f986 	bl	8010068 <__assert_func>
 800fd5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd64:	b10d      	cbz	r5, 800fd6a <__d2b+0x32>
 800fd66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	f1b8 0300 	subs.w	r3, r8, #0
 800fd70:	d023      	beq.n	800fdba <__d2b+0x82>
 800fd72:	4668      	mov	r0, sp
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	f7ff fd0c 	bl	800f792 <__lo0bits>
 800fd7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd7e:	b1d0      	cbz	r0, 800fdb6 <__d2b+0x7e>
 800fd80:	f1c0 0320 	rsb	r3, r0, #32
 800fd84:	fa02 f303 	lsl.w	r3, r2, r3
 800fd88:	430b      	orrs	r3, r1
 800fd8a:	40c2      	lsrs	r2, r0
 800fd8c:	6163      	str	r3, [r4, #20]
 800fd8e:	9201      	str	r2, [sp, #4]
 800fd90:	9b01      	ldr	r3, [sp, #4]
 800fd92:	61a3      	str	r3, [r4, #24]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	bf0c      	ite	eq
 800fd98:	2201      	moveq	r2, #1
 800fd9a:	2202      	movne	r2, #2
 800fd9c:	6122      	str	r2, [r4, #16]
 800fd9e:	b1a5      	cbz	r5, 800fdca <__d2b+0x92>
 800fda0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fda4:	4405      	add	r5, r0
 800fda6:	603d      	str	r5, [r7, #0]
 800fda8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fdac:	6030      	str	r0, [r6, #0]
 800fdae:	4620      	mov	r0, r4
 800fdb0:	b003      	add	sp, #12
 800fdb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdb6:	6161      	str	r1, [r4, #20]
 800fdb8:	e7ea      	b.n	800fd90 <__d2b+0x58>
 800fdba:	a801      	add	r0, sp, #4
 800fdbc:	f7ff fce9 	bl	800f792 <__lo0bits>
 800fdc0:	9b01      	ldr	r3, [sp, #4]
 800fdc2:	6163      	str	r3, [r4, #20]
 800fdc4:	3020      	adds	r0, #32
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	e7e8      	b.n	800fd9c <__d2b+0x64>
 800fdca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fdd2:	6038      	str	r0, [r7, #0]
 800fdd4:	6918      	ldr	r0, [r3, #16]
 800fdd6:	f7ff fcbd 	bl	800f754 <__hi0bits>
 800fdda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdde:	e7e5      	b.n	800fdac <__d2b+0x74>
 800fde0:	08011c40 	.word	0x08011c40
 800fde4:	08011cb1 	.word	0x08011cb1

0800fde8 <__ratio>:
 800fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdec:	b085      	sub	sp, #20
 800fdee:	e9cd 1000 	strd	r1, r0, [sp]
 800fdf2:	a902      	add	r1, sp, #8
 800fdf4:	f7ff ff56 	bl	800fca4 <__b2d>
 800fdf8:	9800      	ldr	r0, [sp, #0]
 800fdfa:	a903      	add	r1, sp, #12
 800fdfc:	ec55 4b10 	vmov	r4, r5, d0
 800fe00:	f7ff ff50 	bl	800fca4 <__b2d>
 800fe04:	9b01      	ldr	r3, [sp, #4]
 800fe06:	6919      	ldr	r1, [r3, #16]
 800fe08:	9b00      	ldr	r3, [sp, #0]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	1ac9      	subs	r1, r1, r3
 800fe0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fe12:	1a9b      	subs	r3, r3, r2
 800fe14:	ec5b ab10 	vmov	sl, fp, d0
 800fe18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bfce      	itee	gt
 800fe20:	462a      	movgt	r2, r5
 800fe22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fe26:	465a      	movle	r2, fp
 800fe28:	462f      	mov	r7, r5
 800fe2a:	46d9      	mov	r9, fp
 800fe2c:	bfcc      	ite	gt
 800fe2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fe32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fe36:	464b      	mov	r3, r9
 800fe38:	4652      	mov	r2, sl
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	4639      	mov	r1, r7
 800fe3e:	f7f0 fd2d 	bl	800089c <__aeabi_ddiv>
 800fe42:	ec41 0b10 	vmov	d0, r0, r1
 800fe46:	b005      	add	sp, #20
 800fe48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe4c <__copybits>:
 800fe4c:	3901      	subs	r1, #1
 800fe4e:	b570      	push	{r4, r5, r6, lr}
 800fe50:	1149      	asrs	r1, r1, #5
 800fe52:	6914      	ldr	r4, [r2, #16]
 800fe54:	3101      	adds	r1, #1
 800fe56:	f102 0314 	add.w	r3, r2, #20
 800fe5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fe5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fe62:	1f05      	subs	r5, r0, #4
 800fe64:	42a3      	cmp	r3, r4
 800fe66:	d30c      	bcc.n	800fe82 <__copybits+0x36>
 800fe68:	1aa3      	subs	r3, r4, r2
 800fe6a:	3b11      	subs	r3, #17
 800fe6c:	f023 0303 	bic.w	r3, r3, #3
 800fe70:	3211      	adds	r2, #17
 800fe72:	42a2      	cmp	r2, r4
 800fe74:	bf88      	it	hi
 800fe76:	2300      	movhi	r3, #0
 800fe78:	4418      	add	r0, r3
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	4288      	cmp	r0, r1
 800fe7e:	d305      	bcc.n	800fe8c <__copybits+0x40>
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe86:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe8a:	e7eb      	b.n	800fe64 <__copybits+0x18>
 800fe8c:	f840 3b04 	str.w	r3, [r0], #4
 800fe90:	e7f4      	b.n	800fe7c <__copybits+0x30>

0800fe92 <__any_on>:
 800fe92:	f100 0214 	add.w	r2, r0, #20
 800fe96:	6900      	ldr	r0, [r0, #16]
 800fe98:	114b      	asrs	r3, r1, #5
 800fe9a:	4298      	cmp	r0, r3
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	db11      	blt.n	800fec4 <__any_on+0x32>
 800fea0:	dd0a      	ble.n	800feb8 <__any_on+0x26>
 800fea2:	f011 011f 	ands.w	r1, r1, #31
 800fea6:	d007      	beq.n	800feb8 <__any_on+0x26>
 800fea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800feac:	fa24 f001 	lsr.w	r0, r4, r1
 800feb0:	fa00 f101 	lsl.w	r1, r0, r1
 800feb4:	428c      	cmp	r4, r1
 800feb6:	d10b      	bne.n	800fed0 <__any_on+0x3e>
 800feb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800febc:	4293      	cmp	r3, r2
 800febe:	d803      	bhi.n	800fec8 <__any_on+0x36>
 800fec0:	2000      	movs	r0, #0
 800fec2:	bd10      	pop	{r4, pc}
 800fec4:	4603      	mov	r3, r0
 800fec6:	e7f7      	b.n	800feb8 <__any_on+0x26>
 800fec8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fecc:	2900      	cmp	r1, #0
 800fece:	d0f5      	beq.n	800febc <__any_on+0x2a>
 800fed0:	2001      	movs	r0, #1
 800fed2:	e7f6      	b.n	800fec2 <__any_on+0x30>

0800fed4 <__ascii_wctomb>:
 800fed4:	4603      	mov	r3, r0
 800fed6:	4608      	mov	r0, r1
 800fed8:	b141      	cbz	r1, 800feec <__ascii_wctomb+0x18>
 800feda:	2aff      	cmp	r2, #255	@ 0xff
 800fedc:	d904      	bls.n	800fee8 <__ascii_wctomb+0x14>
 800fede:	228a      	movs	r2, #138	@ 0x8a
 800fee0:	601a      	str	r2, [r3, #0]
 800fee2:	f04f 30ff 	mov.w	r0, #4294967295
 800fee6:	4770      	bx	lr
 800fee8:	700a      	strb	r2, [r1, #0]
 800feea:	2001      	movs	r0, #1
 800feec:	4770      	bx	lr
	...

0800fef0 <__sflush_r>:
 800fef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	0716      	lsls	r6, r2, #28
 800fefa:	4605      	mov	r5, r0
 800fefc:	460c      	mov	r4, r1
 800fefe:	d454      	bmi.n	800ffaa <__sflush_r+0xba>
 800ff00:	684b      	ldr	r3, [r1, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	dc02      	bgt.n	800ff0c <__sflush_r+0x1c>
 800ff06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dd48      	ble.n	800ff9e <__sflush_r+0xae>
 800ff0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff0e:	2e00      	cmp	r6, #0
 800ff10:	d045      	beq.n	800ff9e <__sflush_r+0xae>
 800ff12:	2300      	movs	r3, #0
 800ff14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff18:	682f      	ldr	r7, [r5, #0]
 800ff1a:	6a21      	ldr	r1, [r4, #32]
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	d030      	beq.n	800ff82 <__sflush_r+0x92>
 800ff20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ff22:	89a3      	ldrh	r3, [r4, #12]
 800ff24:	0759      	lsls	r1, r3, #29
 800ff26:	d505      	bpl.n	800ff34 <__sflush_r+0x44>
 800ff28:	6863      	ldr	r3, [r4, #4]
 800ff2a:	1ad2      	subs	r2, r2, r3
 800ff2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff2e:	b10b      	cbz	r3, 800ff34 <__sflush_r+0x44>
 800ff30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff32:	1ad2      	subs	r2, r2, r3
 800ff34:	2300      	movs	r3, #0
 800ff36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff38:	6a21      	ldr	r1, [r4, #32]
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b0      	blx	r6
 800ff3e:	1c43      	adds	r3, r0, #1
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	d106      	bne.n	800ff52 <__sflush_r+0x62>
 800ff44:	6829      	ldr	r1, [r5, #0]
 800ff46:	291d      	cmp	r1, #29
 800ff48:	d82b      	bhi.n	800ffa2 <__sflush_r+0xb2>
 800ff4a:	4a2a      	ldr	r2, [pc, #168]	@ (800fff4 <__sflush_r+0x104>)
 800ff4c:	410a      	asrs	r2, r1
 800ff4e:	07d6      	lsls	r6, r2, #31
 800ff50:	d427      	bmi.n	800ffa2 <__sflush_r+0xb2>
 800ff52:	2200      	movs	r2, #0
 800ff54:	6062      	str	r2, [r4, #4]
 800ff56:	04d9      	lsls	r1, r3, #19
 800ff58:	6922      	ldr	r2, [r4, #16]
 800ff5a:	6022      	str	r2, [r4, #0]
 800ff5c:	d504      	bpl.n	800ff68 <__sflush_r+0x78>
 800ff5e:	1c42      	adds	r2, r0, #1
 800ff60:	d101      	bne.n	800ff66 <__sflush_r+0x76>
 800ff62:	682b      	ldr	r3, [r5, #0]
 800ff64:	b903      	cbnz	r3, 800ff68 <__sflush_r+0x78>
 800ff66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff6a:	602f      	str	r7, [r5, #0]
 800ff6c:	b1b9      	cbz	r1, 800ff9e <__sflush_r+0xae>
 800ff6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff72:	4299      	cmp	r1, r3
 800ff74:	d002      	beq.n	800ff7c <__sflush_r+0x8c>
 800ff76:	4628      	mov	r0, r5
 800ff78:	f7fe feae 	bl	800ecd8 <_free_r>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff80:	e00d      	b.n	800ff9e <__sflush_r+0xae>
 800ff82:	2301      	movs	r3, #1
 800ff84:	4628      	mov	r0, r5
 800ff86:	47b0      	blx	r6
 800ff88:	4602      	mov	r2, r0
 800ff8a:	1c50      	adds	r0, r2, #1
 800ff8c:	d1c9      	bne.n	800ff22 <__sflush_r+0x32>
 800ff8e:	682b      	ldr	r3, [r5, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d0c6      	beq.n	800ff22 <__sflush_r+0x32>
 800ff94:	2b1d      	cmp	r3, #29
 800ff96:	d001      	beq.n	800ff9c <__sflush_r+0xac>
 800ff98:	2b16      	cmp	r3, #22
 800ff9a:	d11e      	bne.n	800ffda <__sflush_r+0xea>
 800ff9c:	602f      	str	r7, [r5, #0]
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	e022      	b.n	800ffe8 <__sflush_r+0xf8>
 800ffa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffa6:	b21b      	sxth	r3, r3
 800ffa8:	e01b      	b.n	800ffe2 <__sflush_r+0xf2>
 800ffaa:	690f      	ldr	r7, [r1, #16]
 800ffac:	2f00      	cmp	r7, #0
 800ffae:	d0f6      	beq.n	800ff9e <__sflush_r+0xae>
 800ffb0:	0793      	lsls	r3, r2, #30
 800ffb2:	680e      	ldr	r6, [r1, #0]
 800ffb4:	bf08      	it	eq
 800ffb6:	694b      	ldreq	r3, [r1, #20]
 800ffb8:	600f      	str	r7, [r1, #0]
 800ffba:	bf18      	it	ne
 800ffbc:	2300      	movne	r3, #0
 800ffbe:	eba6 0807 	sub.w	r8, r6, r7
 800ffc2:	608b      	str	r3, [r1, #8]
 800ffc4:	f1b8 0f00 	cmp.w	r8, #0
 800ffc8:	dde9      	ble.n	800ff9e <__sflush_r+0xae>
 800ffca:	6a21      	ldr	r1, [r4, #32]
 800ffcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ffce:	4643      	mov	r3, r8
 800ffd0:	463a      	mov	r2, r7
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b0      	blx	r6
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	dc08      	bgt.n	800ffec <__sflush_r+0xfc>
 800ffda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffe2:	81a3      	strh	r3, [r4, #12]
 800ffe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffec:	4407      	add	r7, r0
 800ffee:	eba8 0800 	sub.w	r8, r8, r0
 800fff2:	e7e7      	b.n	800ffc4 <__sflush_r+0xd4>
 800fff4:	dfbffffe 	.word	0xdfbffffe

0800fff8 <_fflush_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	690b      	ldr	r3, [r1, #16]
 800fffc:	4605      	mov	r5, r0
 800fffe:	460c      	mov	r4, r1
 8010000:	b913      	cbnz	r3, 8010008 <_fflush_r+0x10>
 8010002:	2500      	movs	r5, #0
 8010004:	4628      	mov	r0, r5
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	b118      	cbz	r0, 8010012 <_fflush_r+0x1a>
 801000a:	6a03      	ldr	r3, [r0, #32]
 801000c:	b90b      	cbnz	r3, 8010012 <_fflush_r+0x1a>
 801000e:	f7fd fedf 	bl	800ddd0 <__sinit>
 8010012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0f3      	beq.n	8010002 <_fflush_r+0xa>
 801001a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801001c:	07d0      	lsls	r0, r2, #31
 801001e:	d404      	bmi.n	801002a <_fflush_r+0x32>
 8010020:	0599      	lsls	r1, r3, #22
 8010022:	d402      	bmi.n	801002a <_fflush_r+0x32>
 8010024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010026:	f7fd ffe8 	bl	800dffa <__retarget_lock_acquire_recursive>
 801002a:	4628      	mov	r0, r5
 801002c:	4621      	mov	r1, r4
 801002e:	f7ff ff5f 	bl	800fef0 <__sflush_r>
 8010032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010034:	07da      	lsls	r2, r3, #31
 8010036:	4605      	mov	r5, r0
 8010038:	d4e4      	bmi.n	8010004 <_fflush_r+0xc>
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	059b      	lsls	r3, r3, #22
 801003e:	d4e1      	bmi.n	8010004 <_fflush_r+0xc>
 8010040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010042:	f7fd ffdb 	bl	800dffc <__retarget_lock_release_recursive>
 8010046:	e7dd      	b.n	8010004 <_fflush_r+0xc>

08010048 <_sbrk_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4d06      	ldr	r5, [pc, #24]	@ (8010064 <_sbrk_r+0x1c>)
 801004c:	2300      	movs	r3, #0
 801004e:	4604      	mov	r4, r0
 8010050:	4608      	mov	r0, r1
 8010052:	602b      	str	r3, [r5, #0]
 8010054:	f7f3 f8d6 	bl	8003204 <_sbrk>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	d102      	bne.n	8010062 <_sbrk_r+0x1a>
 801005c:	682b      	ldr	r3, [r5, #0]
 801005e:	b103      	cbz	r3, 8010062 <_sbrk_r+0x1a>
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	bd38      	pop	{r3, r4, r5, pc}
 8010064:	20000854 	.word	0x20000854

08010068 <__assert_func>:
 8010068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801006a:	4614      	mov	r4, r2
 801006c:	461a      	mov	r2, r3
 801006e:	4b09      	ldr	r3, [pc, #36]	@ (8010094 <__assert_func+0x2c>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4605      	mov	r5, r0
 8010074:	68d8      	ldr	r0, [r3, #12]
 8010076:	b954      	cbnz	r4, 801008e <__assert_func+0x26>
 8010078:	4b07      	ldr	r3, [pc, #28]	@ (8010098 <__assert_func+0x30>)
 801007a:	461c      	mov	r4, r3
 801007c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010080:	9100      	str	r1, [sp, #0]
 8010082:	462b      	mov	r3, r5
 8010084:	4905      	ldr	r1, [pc, #20]	@ (801009c <__assert_func+0x34>)
 8010086:	f000 f821 	bl	80100cc <fiprintf>
 801008a:	f000 f831 	bl	80100f0 <abort>
 801008e:	4b04      	ldr	r3, [pc, #16]	@ (80100a0 <__assert_func+0x38>)
 8010090:	e7f4      	b.n	801007c <__assert_func+0x14>
 8010092:	bf00      	nop
 8010094:	20000188 	.word	0x20000188
 8010098:	08011f44 	.word	0x08011f44
 801009c:	08011f16 	.word	0x08011f16
 80100a0:	08011f09 	.word	0x08011f09

080100a4 <_calloc_r>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	fba1 5402 	umull	r5, r4, r1, r2
 80100aa:	b93c      	cbnz	r4, 80100bc <_calloc_r+0x18>
 80100ac:	4629      	mov	r1, r5
 80100ae:	f7ff f9c1 	bl	800f434 <_malloc_r>
 80100b2:	4606      	mov	r6, r0
 80100b4:	b928      	cbnz	r0, 80100c2 <_calloc_r+0x1e>
 80100b6:	2600      	movs	r6, #0
 80100b8:	4630      	mov	r0, r6
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	220c      	movs	r2, #12
 80100be:	6002      	str	r2, [r0, #0]
 80100c0:	e7f9      	b.n	80100b6 <_calloc_r+0x12>
 80100c2:	462a      	mov	r2, r5
 80100c4:	4621      	mov	r1, r4
 80100c6:	f7fd fefc 	bl	800dec2 <memset>
 80100ca:	e7f5      	b.n	80100b8 <_calloc_r+0x14>

080100cc <fiprintf>:
 80100cc:	b40e      	push	{r1, r2, r3}
 80100ce:	b503      	push	{r0, r1, lr}
 80100d0:	4601      	mov	r1, r0
 80100d2:	ab03      	add	r3, sp, #12
 80100d4:	4805      	ldr	r0, [pc, #20]	@ (80100ec <fiprintf+0x20>)
 80100d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100da:	6800      	ldr	r0, [r0, #0]
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	f000 f837 	bl	8010150 <_vfiprintf_r>
 80100e2:	b002      	add	sp, #8
 80100e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80100e8:	b003      	add	sp, #12
 80100ea:	4770      	bx	lr
 80100ec:	20000188 	.word	0x20000188

080100f0 <abort>:
 80100f0:	b508      	push	{r3, lr}
 80100f2:	2006      	movs	r0, #6
 80100f4:	f000 fa00 	bl	80104f8 <raise>
 80100f8:	2001      	movs	r0, #1
 80100fa:	f7f3 f80b 	bl	8003114 <_exit>

080100fe <__sfputc_r>:
 80100fe:	6893      	ldr	r3, [r2, #8]
 8010100:	3b01      	subs	r3, #1
 8010102:	2b00      	cmp	r3, #0
 8010104:	b410      	push	{r4}
 8010106:	6093      	str	r3, [r2, #8]
 8010108:	da08      	bge.n	801011c <__sfputc_r+0x1e>
 801010a:	6994      	ldr	r4, [r2, #24]
 801010c:	42a3      	cmp	r3, r4
 801010e:	db01      	blt.n	8010114 <__sfputc_r+0x16>
 8010110:	290a      	cmp	r1, #10
 8010112:	d103      	bne.n	801011c <__sfputc_r+0x1e>
 8010114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010118:	f000 b932 	b.w	8010380 <__swbuf_r>
 801011c:	6813      	ldr	r3, [r2, #0]
 801011e:	1c58      	adds	r0, r3, #1
 8010120:	6010      	str	r0, [r2, #0]
 8010122:	7019      	strb	r1, [r3, #0]
 8010124:	4608      	mov	r0, r1
 8010126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801012a:	4770      	bx	lr

0801012c <__sfputs_r>:
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	4606      	mov	r6, r0
 8010130:	460f      	mov	r7, r1
 8010132:	4614      	mov	r4, r2
 8010134:	18d5      	adds	r5, r2, r3
 8010136:	42ac      	cmp	r4, r5
 8010138:	d101      	bne.n	801013e <__sfputs_r+0x12>
 801013a:	2000      	movs	r0, #0
 801013c:	e007      	b.n	801014e <__sfputs_r+0x22>
 801013e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010142:	463a      	mov	r2, r7
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff ffda 	bl	80100fe <__sfputc_r>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	d1f3      	bne.n	8010136 <__sfputs_r+0xa>
 801014e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010150 <_vfiprintf_r>:
 8010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	460d      	mov	r5, r1
 8010156:	b09d      	sub	sp, #116	@ 0x74
 8010158:	4614      	mov	r4, r2
 801015a:	4698      	mov	r8, r3
 801015c:	4606      	mov	r6, r0
 801015e:	b118      	cbz	r0, 8010168 <_vfiprintf_r+0x18>
 8010160:	6a03      	ldr	r3, [r0, #32]
 8010162:	b90b      	cbnz	r3, 8010168 <_vfiprintf_r+0x18>
 8010164:	f7fd fe34 	bl	800ddd0 <__sinit>
 8010168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801016a:	07d9      	lsls	r1, r3, #31
 801016c:	d405      	bmi.n	801017a <_vfiprintf_r+0x2a>
 801016e:	89ab      	ldrh	r3, [r5, #12]
 8010170:	059a      	lsls	r2, r3, #22
 8010172:	d402      	bmi.n	801017a <_vfiprintf_r+0x2a>
 8010174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010176:	f7fd ff40 	bl	800dffa <__retarget_lock_acquire_recursive>
 801017a:	89ab      	ldrh	r3, [r5, #12]
 801017c:	071b      	lsls	r3, r3, #28
 801017e:	d501      	bpl.n	8010184 <_vfiprintf_r+0x34>
 8010180:	692b      	ldr	r3, [r5, #16]
 8010182:	b99b      	cbnz	r3, 80101ac <_vfiprintf_r+0x5c>
 8010184:	4629      	mov	r1, r5
 8010186:	4630      	mov	r0, r6
 8010188:	f000 f938 	bl	80103fc <__swsetup_r>
 801018c:	b170      	cbz	r0, 80101ac <_vfiprintf_r+0x5c>
 801018e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010190:	07dc      	lsls	r4, r3, #31
 8010192:	d504      	bpl.n	801019e <_vfiprintf_r+0x4e>
 8010194:	f04f 30ff 	mov.w	r0, #4294967295
 8010198:	b01d      	add	sp, #116	@ 0x74
 801019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019e:	89ab      	ldrh	r3, [r5, #12]
 80101a0:	0598      	lsls	r0, r3, #22
 80101a2:	d4f7      	bmi.n	8010194 <_vfiprintf_r+0x44>
 80101a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101a6:	f7fd ff29 	bl	800dffc <__retarget_lock_release_recursive>
 80101aa:	e7f3      	b.n	8010194 <_vfiprintf_r+0x44>
 80101ac:	2300      	movs	r3, #0
 80101ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80101b0:	2320      	movs	r3, #32
 80101b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ba:	2330      	movs	r3, #48	@ 0x30
 80101bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801036c <_vfiprintf_r+0x21c>
 80101c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101c4:	f04f 0901 	mov.w	r9, #1
 80101c8:	4623      	mov	r3, r4
 80101ca:	469a      	mov	sl, r3
 80101cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d0:	b10a      	cbz	r2, 80101d6 <_vfiprintf_r+0x86>
 80101d2:	2a25      	cmp	r2, #37	@ 0x25
 80101d4:	d1f9      	bne.n	80101ca <_vfiprintf_r+0x7a>
 80101d6:	ebba 0b04 	subs.w	fp, sl, r4
 80101da:	d00b      	beq.n	80101f4 <_vfiprintf_r+0xa4>
 80101dc:	465b      	mov	r3, fp
 80101de:	4622      	mov	r2, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7ff ffa2 	bl	801012c <__sfputs_r>
 80101e8:	3001      	adds	r0, #1
 80101ea:	f000 80a7 	beq.w	801033c <_vfiprintf_r+0x1ec>
 80101ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101f0:	445a      	add	r2, fp
 80101f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80101f4:	f89a 3000 	ldrb.w	r3, [sl]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 809f 	beq.w	801033c <_vfiprintf_r+0x1ec>
 80101fe:	2300      	movs	r3, #0
 8010200:	f04f 32ff 	mov.w	r2, #4294967295
 8010204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010208:	f10a 0a01 	add.w	sl, sl, #1
 801020c:	9304      	str	r3, [sp, #16]
 801020e:	9307      	str	r3, [sp, #28]
 8010210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010214:	931a      	str	r3, [sp, #104]	@ 0x68
 8010216:	4654      	mov	r4, sl
 8010218:	2205      	movs	r2, #5
 801021a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021e:	4853      	ldr	r0, [pc, #332]	@ (801036c <_vfiprintf_r+0x21c>)
 8010220:	f7ef fffe 	bl	8000220 <memchr>
 8010224:	9a04      	ldr	r2, [sp, #16]
 8010226:	b9d8      	cbnz	r0, 8010260 <_vfiprintf_r+0x110>
 8010228:	06d1      	lsls	r1, r2, #27
 801022a:	bf44      	itt	mi
 801022c:	2320      	movmi	r3, #32
 801022e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010232:	0713      	lsls	r3, r2, #28
 8010234:	bf44      	itt	mi
 8010236:	232b      	movmi	r3, #43	@ 0x2b
 8010238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b2a      	cmp	r3, #42	@ 0x2a
 8010242:	d015      	beq.n	8010270 <_vfiprintf_r+0x120>
 8010244:	9a07      	ldr	r2, [sp, #28]
 8010246:	4654      	mov	r4, sl
 8010248:	2000      	movs	r0, #0
 801024a:	f04f 0c0a 	mov.w	ip, #10
 801024e:	4621      	mov	r1, r4
 8010250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010254:	3b30      	subs	r3, #48	@ 0x30
 8010256:	2b09      	cmp	r3, #9
 8010258:	d94b      	bls.n	80102f2 <_vfiprintf_r+0x1a2>
 801025a:	b1b0      	cbz	r0, 801028a <_vfiprintf_r+0x13a>
 801025c:	9207      	str	r2, [sp, #28]
 801025e:	e014      	b.n	801028a <_vfiprintf_r+0x13a>
 8010260:	eba0 0308 	sub.w	r3, r0, r8
 8010264:	fa09 f303 	lsl.w	r3, r9, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	46a2      	mov	sl, r4
 801026e:	e7d2      	b.n	8010216 <_vfiprintf_r+0xc6>
 8010270:	9b03      	ldr	r3, [sp, #12]
 8010272:	1d19      	adds	r1, r3, #4
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	9103      	str	r1, [sp, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	bfbb      	ittet	lt
 801027c:	425b      	neglt	r3, r3
 801027e:	f042 0202 	orrlt.w	r2, r2, #2
 8010282:	9307      	strge	r3, [sp, #28]
 8010284:	9307      	strlt	r3, [sp, #28]
 8010286:	bfb8      	it	lt
 8010288:	9204      	strlt	r2, [sp, #16]
 801028a:	7823      	ldrb	r3, [r4, #0]
 801028c:	2b2e      	cmp	r3, #46	@ 0x2e
 801028e:	d10a      	bne.n	80102a6 <_vfiprintf_r+0x156>
 8010290:	7863      	ldrb	r3, [r4, #1]
 8010292:	2b2a      	cmp	r3, #42	@ 0x2a
 8010294:	d132      	bne.n	80102fc <_vfiprintf_r+0x1ac>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	1d1a      	adds	r2, r3, #4
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	9203      	str	r2, [sp, #12]
 801029e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102a2:	3402      	adds	r4, #2
 80102a4:	9305      	str	r3, [sp, #20]
 80102a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801037c <_vfiprintf_r+0x22c>
 80102aa:	7821      	ldrb	r1, [r4, #0]
 80102ac:	2203      	movs	r2, #3
 80102ae:	4650      	mov	r0, sl
 80102b0:	f7ef ffb6 	bl	8000220 <memchr>
 80102b4:	b138      	cbz	r0, 80102c6 <_vfiprintf_r+0x176>
 80102b6:	9b04      	ldr	r3, [sp, #16]
 80102b8:	eba0 000a 	sub.w	r0, r0, sl
 80102bc:	2240      	movs	r2, #64	@ 0x40
 80102be:	4082      	lsls	r2, r0
 80102c0:	4313      	orrs	r3, r2
 80102c2:	3401      	adds	r4, #1
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ca:	4829      	ldr	r0, [pc, #164]	@ (8010370 <_vfiprintf_r+0x220>)
 80102cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102d0:	2206      	movs	r2, #6
 80102d2:	f7ef ffa5 	bl	8000220 <memchr>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d03f      	beq.n	801035a <_vfiprintf_r+0x20a>
 80102da:	4b26      	ldr	r3, [pc, #152]	@ (8010374 <_vfiprintf_r+0x224>)
 80102dc:	bb1b      	cbnz	r3, 8010326 <_vfiprintf_r+0x1d6>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	3307      	adds	r3, #7
 80102e2:	f023 0307 	bic.w	r3, r3, #7
 80102e6:	3308      	adds	r3, #8
 80102e8:	9303      	str	r3, [sp, #12]
 80102ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ec:	443b      	add	r3, r7
 80102ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80102f0:	e76a      	b.n	80101c8 <_vfiprintf_r+0x78>
 80102f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102f6:	460c      	mov	r4, r1
 80102f8:	2001      	movs	r0, #1
 80102fa:	e7a8      	b.n	801024e <_vfiprintf_r+0xfe>
 80102fc:	2300      	movs	r3, #0
 80102fe:	3401      	adds	r4, #1
 8010300:	9305      	str	r3, [sp, #20]
 8010302:	4619      	mov	r1, r3
 8010304:	f04f 0c0a 	mov.w	ip, #10
 8010308:	4620      	mov	r0, r4
 801030a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801030e:	3a30      	subs	r2, #48	@ 0x30
 8010310:	2a09      	cmp	r2, #9
 8010312:	d903      	bls.n	801031c <_vfiprintf_r+0x1cc>
 8010314:	2b00      	cmp	r3, #0
 8010316:	d0c6      	beq.n	80102a6 <_vfiprintf_r+0x156>
 8010318:	9105      	str	r1, [sp, #20]
 801031a:	e7c4      	b.n	80102a6 <_vfiprintf_r+0x156>
 801031c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010320:	4604      	mov	r4, r0
 8010322:	2301      	movs	r3, #1
 8010324:	e7f0      	b.n	8010308 <_vfiprintf_r+0x1b8>
 8010326:	ab03      	add	r3, sp, #12
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	462a      	mov	r2, r5
 801032c:	4b12      	ldr	r3, [pc, #72]	@ (8010378 <_vfiprintf_r+0x228>)
 801032e:	a904      	add	r1, sp, #16
 8010330:	4630      	mov	r0, r6
 8010332:	f7fd f909 	bl	800d548 <_printf_float>
 8010336:	4607      	mov	r7, r0
 8010338:	1c78      	adds	r0, r7, #1
 801033a:	d1d6      	bne.n	80102ea <_vfiprintf_r+0x19a>
 801033c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801033e:	07d9      	lsls	r1, r3, #31
 8010340:	d405      	bmi.n	801034e <_vfiprintf_r+0x1fe>
 8010342:	89ab      	ldrh	r3, [r5, #12]
 8010344:	059a      	lsls	r2, r3, #22
 8010346:	d402      	bmi.n	801034e <_vfiprintf_r+0x1fe>
 8010348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801034a:	f7fd fe57 	bl	800dffc <__retarget_lock_release_recursive>
 801034e:	89ab      	ldrh	r3, [r5, #12]
 8010350:	065b      	lsls	r3, r3, #25
 8010352:	f53f af1f 	bmi.w	8010194 <_vfiprintf_r+0x44>
 8010356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010358:	e71e      	b.n	8010198 <_vfiprintf_r+0x48>
 801035a:	ab03      	add	r3, sp, #12
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	462a      	mov	r2, r5
 8010360:	4b05      	ldr	r3, [pc, #20]	@ (8010378 <_vfiprintf_r+0x228>)
 8010362:	a904      	add	r1, sp, #16
 8010364:	4630      	mov	r0, r6
 8010366:	f7fd fb87 	bl	800da78 <_printf_i>
 801036a:	e7e4      	b.n	8010336 <_vfiprintf_r+0x1e6>
 801036c:	08011f45 	.word	0x08011f45
 8010370:	08011f4f 	.word	0x08011f4f
 8010374:	0800d549 	.word	0x0800d549
 8010378:	0801012d 	.word	0x0801012d
 801037c:	08011f4b 	.word	0x08011f4b

08010380 <__swbuf_r>:
 8010380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010382:	460e      	mov	r6, r1
 8010384:	4614      	mov	r4, r2
 8010386:	4605      	mov	r5, r0
 8010388:	b118      	cbz	r0, 8010392 <__swbuf_r+0x12>
 801038a:	6a03      	ldr	r3, [r0, #32]
 801038c:	b90b      	cbnz	r3, 8010392 <__swbuf_r+0x12>
 801038e:	f7fd fd1f 	bl	800ddd0 <__sinit>
 8010392:	69a3      	ldr	r3, [r4, #24]
 8010394:	60a3      	str	r3, [r4, #8]
 8010396:	89a3      	ldrh	r3, [r4, #12]
 8010398:	071a      	lsls	r2, r3, #28
 801039a:	d501      	bpl.n	80103a0 <__swbuf_r+0x20>
 801039c:	6923      	ldr	r3, [r4, #16]
 801039e:	b943      	cbnz	r3, 80103b2 <__swbuf_r+0x32>
 80103a0:	4621      	mov	r1, r4
 80103a2:	4628      	mov	r0, r5
 80103a4:	f000 f82a 	bl	80103fc <__swsetup_r>
 80103a8:	b118      	cbz	r0, 80103b2 <__swbuf_r+0x32>
 80103aa:	f04f 37ff 	mov.w	r7, #4294967295
 80103ae:	4638      	mov	r0, r7
 80103b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	6922      	ldr	r2, [r4, #16]
 80103b6:	1a98      	subs	r0, r3, r2
 80103b8:	6963      	ldr	r3, [r4, #20]
 80103ba:	b2f6      	uxtb	r6, r6
 80103bc:	4283      	cmp	r3, r0
 80103be:	4637      	mov	r7, r6
 80103c0:	dc05      	bgt.n	80103ce <__swbuf_r+0x4e>
 80103c2:	4621      	mov	r1, r4
 80103c4:	4628      	mov	r0, r5
 80103c6:	f7ff fe17 	bl	800fff8 <_fflush_r>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d1ed      	bne.n	80103aa <__swbuf_r+0x2a>
 80103ce:	68a3      	ldr	r3, [r4, #8]
 80103d0:	3b01      	subs	r3, #1
 80103d2:	60a3      	str	r3, [r4, #8]
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	6022      	str	r2, [r4, #0]
 80103da:	701e      	strb	r6, [r3, #0]
 80103dc:	6962      	ldr	r2, [r4, #20]
 80103de:	1c43      	adds	r3, r0, #1
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d004      	beq.n	80103ee <__swbuf_r+0x6e>
 80103e4:	89a3      	ldrh	r3, [r4, #12]
 80103e6:	07db      	lsls	r3, r3, #31
 80103e8:	d5e1      	bpl.n	80103ae <__swbuf_r+0x2e>
 80103ea:	2e0a      	cmp	r6, #10
 80103ec:	d1df      	bne.n	80103ae <__swbuf_r+0x2e>
 80103ee:	4621      	mov	r1, r4
 80103f0:	4628      	mov	r0, r5
 80103f2:	f7ff fe01 	bl	800fff8 <_fflush_r>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0d9      	beq.n	80103ae <__swbuf_r+0x2e>
 80103fa:	e7d6      	b.n	80103aa <__swbuf_r+0x2a>

080103fc <__swsetup_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4b29      	ldr	r3, [pc, #164]	@ (80104a4 <__swsetup_r+0xa8>)
 8010400:	4605      	mov	r5, r0
 8010402:	6818      	ldr	r0, [r3, #0]
 8010404:	460c      	mov	r4, r1
 8010406:	b118      	cbz	r0, 8010410 <__swsetup_r+0x14>
 8010408:	6a03      	ldr	r3, [r0, #32]
 801040a:	b90b      	cbnz	r3, 8010410 <__swsetup_r+0x14>
 801040c:	f7fd fce0 	bl	800ddd0 <__sinit>
 8010410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010414:	0719      	lsls	r1, r3, #28
 8010416:	d422      	bmi.n	801045e <__swsetup_r+0x62>
 8010418:	06da      	lsls	r2, r3, #27
 801041a:	d407      	bmi.n	801042c <__swsetup_r+0x30>
 801041c:	2209      	movs	r2, #9
 801041e:	602a      	str	r2, [r5, #0]
 8010420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010424:	81a3      	strh	r3, [r4, #12]
 8010426:	f04f 30ff 	mov.w	r0, #4294967295
 801042a:	e033      	b.n	8010494 <__swsetup_r+0x98>
 801042c:	0758      	lsls	r0, r3, #29
 801042e:	d512      	bpl.n	8010456 <__swsetup_r+0x5a>
 8010430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010432:	b141      	cbz	r1, 8010446 <__swsetup_r+0x4a>
 8010434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010438:	4299      	cmp	r1, r3
 801043a:	d002      	beq.n	8010442 <__swsetup_r+0x46>
 801043c:	4628      	mov	r0, r5
 801043e:	f7fe fc4b 	bl	800ecd8 <_free_r>
 8010442:	2300      	movs	r3, #0
 8010444:	6363      	str	r3, [r4, #52]	@ 0x34
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801044c:	81a3      	strh	r3, [r4, #12]
 801044e:	2300      	movs	r3, #0
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	6923      	ldr	r3, [r4, #16]
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	89a3      	ldrh	r3, [r4, #12]
 8010458:	f043 0308 	orr.w	r3, r3, #8
 801045c:	81a3      	strh	r3, [r4, #12]
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	b94b      	cbnz	r3, 8010476 <__swsetup_r+0x7a>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801046c:	d003      	beq.n	8010476 <__swsetup_r+0x7a>
 801046e:	4621      	mov	r1, r4
 8010470:	4628      	mov	r0, r5
 8010472:	f000 f883 	bl	801057c <__smakebuf_r>
 8010476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801047a:	f013 0201 	ands.w	r2, r3, #1
 801047e:	d00a      	beq.n	8010496 <__swsetup_r+0x9a>
 8010480:	2200      	movs	r2, #0
 8010482:	60a2      	str	r2, [r4, #8]
 8010484:	6962      	ldr	r2, [r4, #20]
 8010486:	4252      	negs	r2, r2
 8010488:	61a2      	str	r2, [r4, #24]
 801048a:	6922      	ldr	r2, [r4, #16]
 801048c:	b942      	cbnz	r2, 80104a0 <__swsetup_r+0xa4>
 801048e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010492:	d1c5      	bne.n	8010420 <__swsetup_r+0x24>
 8010494:	bd38      	pop	{r3, r4, r5, pc}
 8010496:	0799      	lsls	r1, r3, #30
 8010498:	bf58      	it	pl
 801049a:	6962      	ldrpl	r2, [r4, #20]
 801049c:	60a2      	str	r2, [r4, #8]
 801049e:	e7f4      	b.n	801048a <__swsetup_r+0x8e>
 80104a0:	2000      	movs	r0, #0
 80104a2:	e7f7      	b.n	8010494 <__swsetup_r+0x98>
 80104a4:	20000188 	.word	0x20000188

080104a8 <_raise_r>:
 80104a8:	291f      	cmp	r1, #31
 80104aa:	b538      	push	{r3, r4, r5, lr}
 80104ac:	4605      	mov	r5, r0
 80104ae:	460c      	mov	r4, r1
 80104b0:	d904      	bls.n	80104bc <_raise_r+0x14>
 80104b2:	2316      	movs	r3, #22
 80104b4:	6003      	str	r3, [r0, #0]
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80104be:	b112      	cbz	r2, 80104c6 <_raise_r+0x1e>
 80104c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104c4:	b94b      	cbnz	r3, 80104da <_raise_r+0x32>
 80104c6:	4628      	mov	r0, r5
 80104c8:	f000 f830 	bl	801052c <_getpid_r>
 80104cc:	4622      	mov	r2, r4
 80104ce:	4601      	mov	r1, r0
 80104d0:	4628      	mov	r0, r5
 80104d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104d6:	f000 b817 	b.w	8010508 <_kill_r>
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d00a      	beq.n	80104f4 <_raise_r+0x4c>
 80104de:	1c59      	adds	r1, r3, #1
 80104e0:	d103      	bne.n	80104ea <_raise_r+0x42>
 80104e2:	2316      	movs	r3, #22
 80104e4:	6003      	str	r3, [r0, #0]
 80104e6:	2001      	movs	r0, #1
 80104e8:	e7e7      	b.n	80104ba <_raise_r+0x12>
 80104ea:	2100      	movs	r1, #0
 80104ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80104f0:	4620      	mov	r0, r4
 80104f2:	4798      	blx	r3
 80104f4:	2000      	movs	r0, #0
 80104f6:	e7e0      	b.n	80104ba <_raise_r+0x12>

080104f8 <raise>:
 80104f8:	4b02      	ldr	r3, [pc, #8]	@ (8010504 <raise+0xc>)
 80104fa:	4601      	mov	r1, r0
 80104fc:	6818      	ldr	r0, [r3, #0]
 80104fe:	f7ff bfd3 	b.w	80104a8 <_raise_r>
 8010502:	bf00      	nop
 8010504:	20000188 	.word	0x20000188

08010508 <_kill_r>:
 8010508:	b538      	push	{r3, r4, r5, lr}
 801050a:	4d07      	ldr	r5, [pc, #28]	@ (8010528 <_kill_r+0x20>)
 801050c:	2300      	movs	r3, #0
 801050e:	4604      	mov	r4, r0
 8010510:	4608      	mov	r0, r1
 8010512:	4611      	mov	r1, r2
 8010514:	602b      	str	r3, [r5, #0]
 8010516:	f7f2 fded 	bl	80030f4 <_kill>
 801051a:	1c43      	adds	r3, r0, #1
 801051c:	d102      	bne.n	8010524 <_kill_r+0x1c>
 801051e:	682b      	ldr	r3, [r5, #0]
 8010520:	b103      	cbz	r3, 8010524 <_kill_r+0x1c>
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	bd38      	pop	{r3, r4, r5, pc}
 8010526:	bf00      	nop
 8010528:	20000854 	.word	0x20000854

0801052c <_getpid_r>:
 801052c:	f7f2 bdda 	b.w	80030e4 <_getpid>

08010530 <__swhatbuf_r>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	460c      	mov	r4, r1
 8010534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010538:	2900      	cmp	r1, #0
 801053a:	b096      	sub	sp, #88	@ 0x58
 801053c:	4615      	mov	r5, r2
 801053e:	461e      	mov	r6, r3
 8010540:	da0d      	bge.n	801055e <__swhatbuf_r+0x2e>
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010548:	f04f 0100 	mov.w	r1, #0
 801054c:	bf14      	ite	ne
 801054e:	2340      	movne	r3, #64	@ 0x40
 8010550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010554:	2000      	movs	r0, #0
 8010556:	6031      	str	r1, [r6, #0]
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	b016      	add	sp, #88	@ 0x58
 801055c:	bd70      	pop	{r4, r5, r6, pc}
 801055e:	466a      	mov	r2, sp
 8010560:	f000 f848 	bl	80105f4 <_fstat_r>
 8010564:	2800      	cmp	r0, #0
 8010566:	dbec      	blt.n	8010542 <__swhatbuf_r+0x12>
 8010568:	9901      	ldr	r1, [sp, #4]
 801056a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801056e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010572:	4259      	negs	r1, r3
 8010574:	4159      	adcs	r1, r3
 8010576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801057a:	e7eb      	b.n	8010554 <__swhatbuf_r+0x24>

0801057c <__smakebuf_r>:
 801057c:	898b      	ldrh	r3, [r1, #12]
 801057e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010580:	079d      	lsls	r5, r3, #30
 8010582:	4606      	mov	r6, r0
 8010584:	460c      	mov	r4, r1
 8010586:	d507      	bpl.n	8010598 <__smakebuf_r+0x1c>
 8010588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801058c:	6023      	str	r3, [r4, #0]
 801058e:	6123      	str	r3, [r4, #16]
 8010590:	2301      	movs	r3, #1
 8010592:	6163      	str	r3, [r4, #20]
 8010594:	b003      	add	sp, #12
 8010596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010598:	ab01      	add	r3, sp, #4
 801059a:	466a      	mov	r2, sp
 801059c:	f7ff ffc8 	bl	8010530 <__swhatbuf_r>
 80105a0:	9f00      	ldr	r7, [sp, #0]
 80105a2:	4605      	mov	r5, r0
 80105a4:	4639      	mov	r1, r7
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7fe ff44 	bl	800f434 <_malloc_r>
 80105ac:	b948      	cbnz	r0, 80105c2 <__smakebuf_r+0x46>
 80105ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b2:	059a      	lsls	r2, r3, #22
 80105b4:	d4ee      	bmi.n	8010594 <__smakebuf_r+0x18>
 80105b6:	f023 0303 	bic.w	r3, r3, #3
 80105ba:	f043 0302 	orr.w	r3, r3, #2
 80105be:	81a3      	strh	r3, [r4, #12]
 80105c0:	e7e2      	b.n	8010588 <__smakebuf_r+0xc>
 80105c2:	89a3      	ldrh	r3, [r4, #12]
 80105c4:	6020      	str	r0, [r4, #0]
 80105c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105ca:	81a3      	strh	r3, [r4, #12]
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105d2:	b15b      	cbz	r3, 80105ec <__smakebuf_r+0x70>
 80105d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105d8:	4630      	mov	r0, r6
 80105da:	f000 f81d 	bl	8010618 <_isatty_r>
 80105de:	b128      	cbz	r0, 80105ec <__smakebuf_r+0x70>
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	f023 0303 	bic.w	r3, r3, #3
 80105e6:	f043 0301 	orr.w	r3, r3, #1
 80105ea:	81a3      	strh	r3, [r4, #12]
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	431d      	orrs	r5, r3
 80105f0:	81a5      	strh	r5, [r4, #12]
 80105f2:	e7cf      	b.n	8010594 <__smakebuf_r+0x18>

080105f4 <_fstat_r>:
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	4d07      	ldr	r5, [pc, #28]	@ (8010614 <_fstat_r+0x20>)
 80105f8:	2300      	movs	r3, #0
 80105fa:	4604      	mov	r4, r0
 80105fc:	4608      	mov	r0, r1
 80105fe:	4611      	mov	r1, r2
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	f7f2 fdd7 	bl	80031b4 <_fstat>
 8010606:	1c43      	adds	r3, r0, #1
 8010608:	d102      	bne.n	8010610 <_fstat_r+0x1c>
 801060a:	682b      	ldr	r3, [r5, #0]
 801060c:	b103      	cbz	r3, 8010610 <_fstat_r+0x1c>
 801060e:	6023      	str	r3, [r4, #0]
 8010610:	bd38      	pop	{r3, r4, r5, pc}
 8010612:	bf00      	nop
 8010614:	20000854 	.word	0x20000854

08010618 <_isatty_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	@ (8010634 <_isatty_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f2 fdd6 	bl	80031d4 <_isatty>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_isatty_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_isatty_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	20000854 	.word	0x20000854

08010638 <atan2>:
 8010638:	f000 ba12 	b.w	8010a60 <__ieee754_atan2>

0801063c <sqrt>:
 801063c:	b538      	push	{r3, r4, r5, lr}
 801063e:	ed2d 8b02 	vpush	{d8}
 8010642:	ec55 4b10 	vmov	r4, r5, d0
 8010646:	f000 f931 	bl	80108ac <__ieee754_sqrt>
 801064a:	4622      	mov	r2, r4
 801064c:	462b      	mov	r3, r5
 801064e:	4620      	mov	r0, r4
 8010650:	4629      	mov	r1, r5
 8010652:	eeb0 8a40 	vmov.f32	s16, s0
 8010656:	eef0 8a60 	vmov.f32	s17, s1
 801065a:	f7f0 fa8f 	bl	8000b7c <__aeabi_dcmpun>
 801065e:	b990      	cbnz	r0, 8010686 <sqrt+0x4a>
 8010660:	2200      	movs	r2, #0
 8010662:	2300      	movs	r3, #0
 8010664:	4620      	mov	r0, r4
 8010666:	4629      	mov	r1, r5
 8010668:	f7f0 fa60 	bl	8000b2c <__aeabi_dcmplt>
 801066c:	b158      	cbz	r0, 8010686 <sqrt+0x4a>
 801066e:	f7fd fc99 	bl	800dfa4 <__errno>
 8010672:	2321      	movs	r3, #33	@ 0x21
 8010674:	6003      	str	r3, [r0, #0]
 8010676:	2200      	movs	r2, #0
 8010678:	2300      	movs	r3, #0
 801067a:	4610      	mov	r0, r2
 801067c:	4619      	mov	r1, r3
 801067e:	f7f0 f90d 	bl	800089c <__aeabi_ddiv>
 8010682:	ec41 0b18 	vmov	d8, r0, r1
 8010686:	eeb0 0a48 	vmov.f32	s0, s16
 801068a:	eef0 0a68 	vmov.f32	s1, s17
 801068e:	ecbd 8b02 	vpop	{d8}
 8010692:	bd38      	pop	{r3, r4, r5, pc}

08010694 <cosf>:
 8010694:	ee10 3a10 	vmov	r3, s0
 8010698:	b507      	push	{r0, r1, r2, lr}
 801069a:	4a1e      	ldr	r2, [pc, #120]	@ (8010714 <cosf+0x80>)
 801069c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d806      	bhi.n	80106b2 <cosf+0x1e>
 80106a4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010718 <cosf+0x84>
 80106a8:	b003      	add	sp, #12
 80106aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80106ae:	f000 bc3f 	b.w	8010f30 <__kernel_cosf>
 80106b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80106b6:	d304      	bcc.n	80106c2 <cosf+0x2e>
 80106b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80106bc:	b003      	add	sp, #12
 80106be:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c2:	4668      	mov	r0, sp
 80106c4:	f000 fdb4 	bl	8011230 <__ieee754_rem_pio2f>
 80106c8:	f000 0003 	and.w	r0, r0, #3
 80106cc:	2801      	cmp	r0, #1
 80106ce:	d009      	beq.n	80106e4 <cosf+0x50>
 80106d0:	2802      	cmp	r0, #2
 80106d2:	d010      	beq.n	80106f6 <cosf+0x62>
 80106d4:	b9b0      	cbnz	r0, 8010704 <cosf+0x70>
 80106d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80106da:	ed9d 0a00 	vldr	s0, [sp]
 80106de:	f000 fc27 	bl	8010f30 <__kernel_cosf>
 80106e2:	e7eb      	b.n	80106bc <cosf+0x28>
 80106e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80106e8:	ed9d 0a00 	vldr	s0, [sp]
 80106ec:	f000 fc78 	bl	8010fe0 <__kernel_sinf>
 80106f0:	eeb1 0a40 	vneg.f32	s0, s0
 80106f4:	e7e2      	b.n	80106bc <cosf+0x28>
 80106f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80106fa:	ed9d 0a00 	vldr	s0, [sp]
 80106fe:	f000 fc17 	bl	8010f30 <__kernel_cosf>
 8010702:	e7f5      	b.n	80106f0 <cosf+0x5c>
 8010704:	eddd 0a01 	vldr	s1, [sp, #4]
 8010708:	ed9d 0a00 	vldr	s0, [sp]
 801070c:	2001      	movs	r0, #1
 801070e:	f000 fc67 	bl	8010fe0 <__kernel_sinf>
 8010712:	e7d3      	b.n	80106bc <cosf+0x28>
 8010714:	3f490fd8 	.word	0x3f490fd8
 8010718:	00000000 	.word	0x00000000

0801071c <sinf>:
 801071c:	ee10 3a10 	vmov	r3, s0
 8010720:	b507      	push	{r0, r1, r2, lr}
 8010722:	4a1f      	ldr	r2, [pc, #124]	@ (80107a0 <sinf+0x84>)
 8010724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010728:	4293      	cmp	r3, r2
 801072a:	d807      	bhi.n	801073c <sinf+0x20>
 801072c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80107a4 <sinf+0x88>
 8010730:	2000      	movs	r0, #0
 8010732:	b003      	add	sp, #12
 8010734:	f85d eb04 	ldr.w	lr, [sp], #4
 8010738:	f000 bc52 	b.w	8010fe0 <__kernel_sinf>
 801073c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010740:	d304      	bcc.n	801074c <sinf+0x30>
 8010742:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010746:	b003      	add	sp, #12
 8010748:	f85d fb04 	ldr.w	pc, [sp], #4
 801074c:	4668      	mov	r0, sp
 801074e:	f000 fd6f 	bl	8011230 <__ieee754_rem_pio2f>
 8010752:	f000 0003 	and.w	r0, r0, #3
 8010756:	2801      	cmp	r0, #1
 8010758:	d00a      	beq.n	8010770 <sinf+0x54>
 801075a:	2802      	cmp	r0, #2
 801075c:	d00f      	beq.n	801077e <sinf+0x62>
 801075e:	b9c0      	cbnz	r0, 8010792 <sinf+0x76>
 8010760:	eddd 0a01 	vldr	s1, [sp, #4]
 8010764:	ed9d 0a00 	vldr	s0, [sp]
 8010768:	2001      	movs	r0, #1
 801076a:	f000 fc39 	bl	8010fe0 <__kernel_sinf>
 801076e:	e7ea      	b.n	8010746 <sinf+0x2a>
 8010770:	eddd 0a01 	vldr	s1, [sp, #4]
 8010774:	ed9d 0a00 	vldr	s0, [sp]
 8010778:	f000 fbda 	bl	8010f30 <__kernel_cosf>
 801077c:	e7e3      	b.n	8010746 <sinf+0x2a>
 801077e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010782:	ed9d 0a00 	vldr	s0, [sp]
 8010786:	2001      	movs	r0, #1
 8010788:	f000 fc2a 	bl	8010fe0 <__kernel_sinf>
 801078c:	eeb1 0a40 	vneg.f32	s0, s0
 8010790:	e7d9      	b.n	8010746 <sinf+0x2a>
 8010792:	eddd 0a01 	vldr	s1, [sp, #4]
 8010796:	ed9d 0a00 	vldr	s0, [sp]
 801079a:	f000 fbc9 	bl	8010f30 <__kernel_cosf>
 801079e:	e7f5      	b.n	801078c <sinf+0x70>
 80107a0:	3f490fd8 	.word	0x3f490fd8
 80107a4:	00000000 	.word	0x00000000

080107a8 <tanf>:
 80107a8:	ee10 3a10 	vmov	r3, s0
 80107ac:	b507      	push	{r0, r1, r2, lr}
 80107ae:	4a12      	ldr	r2, [pc, #72]	@ (80107f8 <tanf+0x50>)
 80107b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d807      	bhi.n	80107c8 <tanf+0x20>
 80107b8:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80107fc <tanf+0x54>
 80107bc:	2001      	movs	r0, #1
 80107be:	b003      	add	sp, #12
 80107c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80107c4:	f000 bc54 	b.w	8011070 <__kernel_tanf>
 80107c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80107cc:	d304      	bcc.n	80107d8 <tanf+0x30>
 80107ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80107d2:	b003      	add	sp, #12
 80107d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80107d8:	4668      	mov	r0, sp
 80107da:	f000 fd29 	bl	8011230 <__ieee754_rem_pio2f>
 80107de:	0040      	lsls	r0, r0, #1
 80107e0:	f000 0002 	and.w	r0, r0, #2
 80107e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80107e8:	ed9d 0a00 	vldr	s0, [sp]
 80107ec:	f1c0 0001 	rsb	r0, r0, #1
 80107f0:	f000 fc3e 	bl	8011070 <__kernel_tanf>
 80107f4:	e7ed      	b.n	80107d2 <tanf+0x2a>
 80107f6:	bf00      	nop
 80107f8:	3f490fda 	.word	0x3f490fda
 80107fc:	00000000 	.word	0x00000000

08010800 <fmaxf>:
 8010800:	b508      	push	{r3, lr}
 8010802:	ed2d 8b02 	vpush	{d8}
 8010806:	eeb0 8a40 	vmov.f32	s16, s0
 801080a:	eef0 8a60 	vmov.f32	s17, s1
 801080e:	f000 f831 	bl	8010874 <__fpclassifyf>
 8010812:	b930      	cbnz	r0, 8010822 <fmaxf+0x22>
 8010814:	eeb0 8a68 	vmov.f32	s16, s17
 8010818:	eeb0 0a48 	vmov.f32	s0, s16
 801081c:	ecbd 8b02 	vpop	{d8}
 8010820:	bd08      	pop	{r3, pc}
 8010822:	eeb0 0a68 	vmov.f32	s0, s17
 8010826:	f000 f825 	bl	8010874 <__fpclassifyf>
 801082a:	2800      	cmp	r0, #0
 801082c:	d0f4      	beq.n	8010818 <fmaxf+0x18>
 801082e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010836:	dded      	ble.n	8010814 <fmaxf+0x14>
 8010838:	e7ee      	b.n	8010818 <fmaxf+0x18>

0801083a <fminf>:
 801083a:	b508      	push	{r3, lr}
 801083c:	ed2d 8b02 	vpush	{d8}
 8010840:	eeb0 8a40 	vmov.f32	s16, s0
 8010844:	eef0 8a60 	vmov.f32	s17, s1
 8010848:	f000 f814 	bl	8010874 <__fpclassifyf>
 801084c:	b930      	cbnz	r0, 801085c <fminf+0x22>
 801084e:	eeb0 8a68 	vmov.f32	s16, s17
 8010852:	eeb0 0a48 	vmov.f32	s0, s16
 8010856:	ecbd 8b02 	vpop	{d8}
 801085a:	bd08      	pop	{r3, pc}
 801085c:	eeb0 0a68 	vmov.f32	s0, s17
 8010860:	f000 f808 	bl	8010874 <__fpclassifyf>
 8010864:	2800      	cmp	r0, #0
 8010866:	d0f4      	beq.n	8010852 <fminf+0x18>
 8010868:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801086c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010870:	d5ed      	bpl.n	801084e <fminf+0x14>
 8010872:	e7ee      	b.n	8010852 <fminf+0x18>

08010874 <__fpclassifyf>:
 8010874:	ee10 3a10 	vmov	r3, s0
 8010878:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801087c:	d00d      	beq.n	801089a <__fpclassifyf+0x26>
 801087e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010882:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010886:	d30a      	bcc.n	801089e <__fpclassifyf+0x2a>
 8010888:	4b07      	ldr	r3, [pc, #28]	@ (80108a8 <__fpclassifyf+0x34>)
 801088a:	1e42      	subs	r2, r0, #1
 801088c:	429a      	cmp	r2, r3
 801088e:	d908      	bls.n	80108a2 <__fpclassifyf+0x2e>
 8010890:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010894:	4258      	negs	r0, r3
 8010896:	4158      	adcs	r0, r3
 8010898:	4770      	bx	lr
 801089a:	2002      	movs	r0, #2
 801089c:	4770      	bx	lr
 801089e:	2004      	movs	r0, #4
 80108a0:	4770      	bx	lr
 80108a2:	2003      	movs	r0, #3
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	007ffffe 	.word	0x007ffffe

080108ac <__ieee754_sqrt>:
 80108ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b0:	4a68      	ldr	r2, [pc, #416]	@ (8010a54 <__ieee754_sqrt+0x1a8>)
 80108b2:	ec55 4b10 	vmov	r4, r5, d0
 80108b6:	43aa      	bics	r2, r5
 80108b8:	462b      	mov	r3, r5
 80108ba:	4621      	mov	r1, r4
 80108bc:	d110      	bne.n	80108e0 <__ieee754_sqrt+0x34>
 80108be:	4622      	mov	r2, r4
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef fec0 	bl	8000648 <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4620      	mov	r0, r4
 80108ce:	4629      	mov	r1, r5
 80108d0:	f7ef fd04 	bl	80002dc <__adddf3>
 80108d4:	4604      	mov	r4, r0
 80108d6:	460d      	mov	r5, r1
 80108d8:	ec45 4b10 	vmov	d0, r4, r5
 80108dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e0:	2d00      	cmp	r5, #0
 80108e2:	dc0e      	bgt.n	8010902 <__ieee754_sqrt+0x56>
 80108e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80108e8:	4322      	orrs	r2, r4
 80108ea:	d0f5      	beq.n	80108d8 <__ieee754_sqrt+0x2c>
 80108ec:	b19d      	cbz	r5, 8010916 <__ieee754_sqrt+0x6a>
 80108ee:	4622      	mov	r2, r4
 80108f0:	4620      	mov	r0, r4
 80108f2:	4629      	mov	r1, r5
 80108f4:	f7ef fcf0 	bl	80002d8 <__aeabi_dsub>
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	f7ef ffce 	bl	800089c <__aeabi_ddiv>
 8010900:	e7e8      	b.n	80108d4 <__ieee754_sqrt+0x28>
 8010902:	152a      	asrs	r2, r5, #20
 8010904:	d115      	bne.n	8010932 <__ieee754_sqrt+0x86>
 8010906:	2000      	movs	r0, #0
 8010908:	e009      	b.n	801091e <__ieee754_sqrt+0x72>
 801090a:	0acb      	lsrs	r3, r1, #11
 801090c:	3a15      	subs	r2, #21
 801090e:	0549      	lsls	r1, r1, #21
 8010910:	2b00      	cmp	r3, #0
 8010912:	d0fa      	beq.n	801090a <__ieee754_sqrt+0x5e>
 8010914:	e7f7      	b.n	8010906 <__ieee754_sqrt+0x5a>
 8010916:	462a      	mov	r2, r5
 8010918:	e7fa      	b.n	8010910 <__ieee754_sqrt+0x64>
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	3001      	adds	r0, #1
 801091e:	02dc      	lsls	r4, r3, #11
 8010920:	d5fb      	bpl.n	801091a <__ieee754_sqrt+0x6e>
 8010922:	1e44      	subs	r4, r0, #1
 8010924:	1b12      	subs	r2, r2, r4
 8010926:	f1c0 0420 	rsb	r4, r0, #32
 801092a:	fa21 f404 	lsr.w	r4, r1, r4
 801092e:	4323      	orrs	r3, r4
 8010930:	4081      	lsls	r1, r0
 8010932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010936:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801093a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801093e:	07d2      	lsls	r2, r2, #31
 8010940:	bf5c      	itt	pl
 8010942:	005b      	lslpl	r3, r3, #1
 8010944:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010948:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801094c:	bf58      	it	pl
 801094e:	0049      	lslpl	r1, r1, #1
 8010950:	2600      	movs	r6, #0
 8010952:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010956:	106d      	asrs	r5, r5, #1
 8010958:	0049      	lsls	r1, r1, #1
 801095a:	2016      	movs	r0, #22
 801095c:	4632      	mov	r2, r6
 801095e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010962:	1917      	adds	r7, r2, r4
 8010964:	429f      	cmp	r7, r3
 8010966:	bfde      	ittt	le
 8010968:	193a      	addle	r2, r7, r4
 801096a:	1bdb      	suble	r3, r3, r7
 801096c:	1936      	addle	r6, r6, r4
 801096e:	0fcf      	lsrs	r7, r1, #31
 8010970:	3801      	subs	r0, #1
 8010972:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010976:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801097a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801097e:	d1f0      	bne.n	8010962 <__ieee754_sqrt+0xb6>
 8010980:	4604      	mov	r4, r0
 8010982:	2720      	movs	r7, #32
 8010984:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010988:	429a      	cmp	r2, r3
 801098a:	eb00 0e0c 	add.w	lr, r0, ip
 801098e:	db02      	blt.n	8010996 <__ieee754_sqrt+0xea>
 8010990:	d113      	bne.n	80109ba <__ieee754_sqrt+0x10e>
 8010992:	458e      	cmp	lr, r1
 8010994:	d811      	bhi.n	80109ba <__ieee754_sqrt+0x10e>
 8010996:	f1be 0f00 	cmp.w	lr, #0
 801099a:	eb0e 000c 	add.w	r0, lr, ip
 801099e:	da42      	bge.n	8010a26 <__ieee754_sqrt+0x17a>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	db40      	blt.n	8010a26 <__ieee754_sqrt+0x17a>
 80109a4:	f102 0801 	add.w	r8, r2, #1
 80109a8:	1a9b      	subs	r3, r3, r2
 80109aa:	458e      	cmp	lr, r1
 80109ac:	bf88      	it	hi
 80109ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80109b2:	eba1 010e 	sub.w	r1, r1, lr
 80109b6:	4464      	add	r4, ip
 80109b8:	4642      	mov	r2, r8
 80109ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80109be:	3f01      	subs	r7, #1
 80109c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80109c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80109c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80109cc:	d1dc      	bne.n	8010988 <__ieee754_sqrt+0xdc>
 80109ce:	4319      	orrs	r1, r3
 80109d0:	d01b      	beq.n	8010a0a <__ieee754_sqrt+0x15e>
 80109d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010a58 <__ieee754_sqrt+0x1ac>
 80109d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010a5c <__ieee754_sqrt+0x1b0>
 80109da:	e9da 0100 	ldrd	r0, r1, [sl]
 80109de:	e9db 2300 	ldrd	r2, r3, [fp]
 80109e2:	f7ef fc79 	bl	80002d8 <__aeabi_dsub>
 80109e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4640      	mov	r0, r8
 80109f0:	4649      	mov	r1, r9
 80109f2:	f7f0 f8a5 	bl	8000b40 <__aeabi_dcmple>
 80109f6:	b140      	cbz	r0, 8010a0a <__ieee754_sqrt+0x15e>
 80109f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80109fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a00:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a04:	d111      	bne.n	8010a2a <__ieee754_sqrt+0x17e>
 8010a06:	3601      	adds	r6, #1
 8010a08:	463c      	mov	r4, r7
 8010a0a:	1072      	asrs	r2, r6, #1
 8010a0c:	0863      	lsrs	r3, r4, #1
 8010a0e:	07f1      	lsls	r1, r6, #31
 8010a10:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010a14:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010a18:	bf48      	it	mi
 8010a1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010a1e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010a22:	4618      	mov	r0, r3
 8010a24:	e756      	b.n	80108d4 <__ieee754_sqrt+0x28>
 8010a26:	4690      	mov	r8, r2
 8010a28:	e7be      	b.n	80109a8 <__ieee754_sqrt+0xfc>
 8010a2a:	f7ef fc57 	bl	80002dc <__adddf3>
 8010a2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a32:	4602      	mov	r2, r0
 8010a34:	460b      	mov	r3, r1
 8010a36:	4640      	mov	r0, r8
 8010a38:	4649      	mov	r1, r9
 8010a3a:	f7f0 f877 	bl	8000b2c <__aeabi_dcmplt>
 8010a3e:	b120      	cbz	r0, 8010a4a <__ieee754_sqrt+0x19e>
 8010a40:	1ca0      	adds	r0, r4, #2
 8010a42:	bf08      	it	eq
 8010a44:	3601      	addeq	r6, #1
 8010a46:	3402      	adds	r4, #2
 8010a48:	e7df      	b.n	8010a0a <__ieee754_sqrt+0x15e>
 8010a4a:	1c63      	adds	r3, r4, #1
 8010a4c:	f023 0401 	bic.w	r4, r3, #1
 8010a50:	e7db      	b.n	8010a0a <__ieee754_sqrt+0x15e>
 8010a52:	bf00      	nop
 8010a54:	7ff00000 	.word	0x7ff00000
 8010a58:	200001e0 	.word	0x200001e0
 8010a5c:	200001d8 	.word	0x200001d8

08010a60 <__ieee754_atan2>:
 8010a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a64:	ec57 6b11 	vmov	r6, r7, d1
 8010a68:	4273      	negs	r3, r6
 8010a6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010be8 <__ieee754_atan2+0x188>
 8010a6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010a72:	4333      	orrs	r3, r6
 8010a74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010a78:	4543      	cmp	r3, r8
 8010a7a:	ec51 0b10 	vmov	r0, r1, d0
 8010a7e:	4635      	mov	r5, r6
 8010a80:	d809      	bhi.n	8010a96 <__ieee754_atan2+0x36>
 8010a82:	4244      	negs	r4, r0
 8010a84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010a88:	4304      	orrs	r4, r0
 8010a8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010a8e:	4544      	cmp	r4, r8
 8010a90:	468e      	mov	lr, r1
 8010a92:	4681      	mov	r9, r0
 8010a94:	d907      	bls.n	8010aa6 <__ieee754_atan2+0x46>
 8010a96:	4632      	mov	r2, r6
 8010a98:	463b      	mov	r3, r7
 8010a9a:	f7ef fc1f 	bl	80002dc <__adddf3>
 8010a9e:	ec41 0b10 	vmov	d0, r0, r1
 8010aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010aaa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010aae:	4334      	orrs	r4, r6
 8010ab0:	d103      	bne.n	8010aba <__ieee754_atan2+0x5a>
 8010ab2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab6:	f000 b89b 	b.w	8010bf0 <atan>
 8010aba:	17bc      	asrs	r4, r7, #30
 8010abc:	f004 0402 	and.w	r4, r4, #2
 8010ac0:	ea53 0909 	orrs.w	r9, r3, r9
 8010ac4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010ac8:	d107      	bne.n	8010ada <__ieee754_atan2+0x7a>
 8010aca:	2c02      	cmp	r4, #2
 8010acc:	d05f      	beq.n	8010b8e <__ieee754_atan2+0x12e>
 8010ace:	2c03      	cmp	r4, #3
 8010ad0:	d1e5      	bne.n	8010a9e <__ieee754_atan2+0x3e>
 8010ad2:	a141      	add	r1, pc, #260	@ (adr r1, 8010bd8 <__ieee754_atan2+0x178>)
 8010ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ad8:	e7e1      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010ada:	4315      	orrs	r5, r2
 8010adc:	d106      	bne.n	8010aec <__ieee754_atan2+0x8c>
 8010ade:	f1be 0f00 	cmp.w	lr, #0
 8010ae2:	da5f      	bge.n	8010ba4 <__ieee754_atan2+0x144>
 8010ae4:	a13e      	add	r1, pc, #248	@ (adr r1, 8010be0 <__ieee754_atan2+0x180>)
 8010ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aea:	e7d8      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010aec:	4542      	cmp	r2, r8
 8010aee:	d10f      	bne.n	8010b10 <__ieee754_atan2+0xb0>
 8010af0:	4293      	cmp	r3, r2
 8010af2:	f104 34ff 	add.w	r4, r4, #4294967295
 8010af6:	d107      	bne.n	8010b08 <__ieee754_atan2+0xa8>
 8010af8:	2c02      	cmp	r4, #2
 8010afa:	d84c      	bhi.n	8010b96 <__ieee754_atan2+0x136>
 8010afc:	4b34      	ldr	r3, [pc, #208]	@ (8010bd0 <__ieee754_atan2+0x170>)
 8010afe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b06:	e7ca      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010b08:	2c02      	cmp	r4, #2
 8010b0a:	d848      	bhi.n	8010b9e <__ieee754_atan2+0x13e>
 8010b0c:	4b31      	ldr	r3, [pc, #196]	@ (8010bd4 <__ieee754_atan2+0x174>)
 8010b0e:	e7f6      	b.n	8010afe <__ieee754_atan2+0x9e>
 8010b10:	4543      	cmp	r3, r8
 8010b12:	d0e4      	beq.n	8010ade <__ieee754_atan2+0x7e>
 8010b14:	1a9b      	subs	r3, r3, r2
 8010b16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010b1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b1e:	da1e      	bge.n	8010b5e <__ieee754_atan2+0xfe>
 8010b20:	2f00      	cmp	r7, #0
 8010b22:	da01      	bge.n	8010b28 <__ieee754_atan2+0xc8>
 8010b24:	323c      	adds	r2, #60	@ 0x3c
 8010b26:	db1e      	blt.n	8010b66 <__ieee754_atan2+0x106>
 8010b28:	4632      	mov	r2, r6
 8010b2a:	463b      	mov	r3, r7
 8010b2c:	f7ef feb6 	bl	800089c <__aeabi_ddiv>
 8010b30:	ec41 0b10 	vmov	d0, r0, r1
 8010b34:	f000 f9f4 	bl	8010f20 <fabs>
 8010b38:	f000 f85a 	bl	8010bf0 <atan>
 8010b3c:	ec51 0b10 	vmov	r0, r1, d0
 8010b40:	2c01      	cmp	r4, #1
 8010b42:	d013      	beq.n	8010b6c <__ieee754_atan2+0x10c>
 8010b44:	2c02      	cmp	r4, #2
 8010b46:	d015      	beq.n	8010b74 <__ieee754_atan2+0x114>
 8010b48:	2c00      	cmp	r4, #0
 8010b4a:	d0a8      	beq.n	8010a9e <__ieee754_atan2+0x3e>
 8010b4c:	a318      	add	r3, pc, #96	@ (adr r3, 8010bb0 <__ieee754_atan2+0x150>)
 8010b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b52:	f7ef fbc1 	bl	80002d8 <__aeabi_dsub>
 8010b56:	a318      	add	r3, pc, #96	@ (adr r3, 8010bb8 <__ieee754_atan2+0x158>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	e014      	b.n	8010b88 <__ieee754_atan2+0x128>
 8010b5e:	a118      	add	r1, pc, #96	@ (adr r1, 8010bc0 <__ieee754_atan2+0x160>)
 8010b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b64:	e7ec      	b.n	8010b40 <__ieee754_atan2+0xe0>
 8010b66:	2000      	movs	r0, #0
 8010b68:	2100      	movs	r1, #0
 8010b6a:	e7e9      	b.n	8010b40 <__ieee754_atan2+0xe0>
 8010b6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b70:	4619      	mov	r1, r3
 8010b72:	e794      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010b74:	a30e      	add	r3, pc, #56	@ (adr r3, 8010bb0 <__ieee754_atan2+0x150>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fbad 	bl	80002d8 <__aeabi_dsub>
 8010b7e:	4602      	mov	r2, r0
 8010b80:	460b      	mov	r3, r1
 8010b82:	a10d      	add	r1, pc, #52	@ (adr r1, 8010bb8 <__ieee754_atan2+0x158>)
 8010b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b88:	f7ef fba6 	bl	80002d8 <__aeabi_dsub>
 8010b8c:	e787      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010b8e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010bb8 <__ieee754_atan2+0x158>)
 8010b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b94:	e783      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010b96:	a10c      	add	r1, pc, #48	@ (adr r1, 8010bc8 <__ieee754_atan2+0x168>)
 8010b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b9c:	e77f      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	e77c      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010ba4:	a106      	add	r1, pc, #24	@ (adr r1, 8010bc0 <__ieee754_atan2+0x160>)
 8010ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010baa:	e778      	b.n	8010a9e <__ieee754_atan2+0x3e>
 8010bac:	f3af 8000 	nop.w
 8010bb0:	33145c07 	.word	0x33145c07
 8010bb4:	3ca1a626 	.word	0x3ca1a626
 8010bb8:	54442d18 	.word	0x54442d18
 8010bbc:	400921fb 	.word	0x400921fb
 8010bc0:	54442d18 	.word	0x54442d18
 8010bc4:	3ff921fb 	.word	0x3ff921fb
 8010bc8:	54442d18 	.word	0x54442d18
 8010bcc:	3fe921fb 	.word	0x3fe921fb
 8010bd0:	08011f70 	.word	0x08011f70
 8010bd4:	08011f58 	.word	0x08011f58
 8010bd8:	54442d18 	.word	0x54442d18
 8010bdc:	c00921fb 	.word	0xc00921fb
 8010be0:	54442d18 	.word	0x54442d18
 8010be4:	bff921fb 	.word	0xbff921fb
 8010be8:	7ff00000 	.word	0x7ff00000
 8010bec:	00000000 	.word	0x00000000

08010bf0 <atan>:
 8010bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	ec55 4b10 	vmov	r4, r5, d0
 8010bf8:	4bbf      	ldr	r3, [pc, #764]	@ (8010ef8 <atan+0x308>)
 8010bfa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010bfe:	429e      	cmp	r6, r3
 8010c00:	46ab      	mov	fp, r5
 8010c02:	d918      	bls.n	8010c36 <atan+0x46>
 8010c04:	4bbd      	ldr	r3, [pc, #756]	@ (8010efc <atan+0x30c>)
 8010c06:	429e      	cmp	r6, r3
 8010c08:	d801      	bhi.n	8010c0e <atan+0x1e>
 8010c0a:	d109      	bne.n	8010c20 <atan+0x30>
 8010c0c:	b144      	cbz	r4, 8010c20 <atan+0x30>
 8010c0e:	4622      	mov	r2, r4
 8010c10:	462b      	mov	r3, r5
 8010c12:	4620      	mov	r0, r4
 8010c14:	4629      	mov	r1, r5
 8010c16:	f7ef fb61 	bl	80002dc <__adddf3>
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	460d      	mov	r5, r1
 8010c1e:	e006      	b.n	8010c2e <atan+0x3e>
 8010c20:	f1bb 0f00 	cmp.w	fp, #0
 8010c24:	f340 812b 	ble.w	8010e7e <atan+0x28e>
 8010c28:	a597      	add	r5, pc, #604	@ (adr r5, 8010e88 <atan+0x298>)
 8010c2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c2e:	ec45 4b10 	vmov	d0, r4, r5
 8010c32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	4bb2      	ldr	r3, [pc, #712]	@ (8010f00 <atan+0x310>)
 8010c38:	429e      	cmp	r6, r3
 8010c3a:	d813      	bhi.n	8010c64 <atan+0x74>
 8010c3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010c40:	429e      	cmp	r6, r3
 8010c42:	d80c      	bhi.n	8010c5e <atan+0x6e>
 8010c44:	a392      	add	r3, pc, #584	@ (adr r3, 8010e90 <atan+0x2a0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	f7ef fb45 	bl	80002dc <__adddf3>
 8010c52:	4bac      	ldr	r3, [pc, #688]	@ (8010f04 <atan+0x314>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	f7ef ff87 	bl	8000b68 <__aeabi_dcmpgt>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d1e7      	bne.n	8010c2e <atan+0x3e>
 8010c5e:	f04f 3aff 	mov.w	sl, #4294967295
 8010c62:	e029      	b.n	8010cb8 <atan+0xc8>
 8010c64:	f000 f95c 	bl	8010f20 <fabs>
 8010c68:	4ba7      	ldr	r3, [pc, #668]	@ (8010f08 <atan+0x318>)
 8010c6a:	429e      	cmp	r6, r3
 8010c6c:	ec55 4b10 	vmov	r4, r5, d0
 8010c70:	f200 80bc 	bhi.w	8010dec <atan+0x1fc>
 8010c74:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010c78:	429e      	cmp	r6, r3
 8010c7a:	f200 809e 	bhi.w	8010dba <atan+0x1ca>
 8010c7e:	4622      	mov	r2, r4
 8010c80:	462b      	mov	r3, r5
 8010c82:	4620      	mov	r0, r4
 8010c84:	4629      	mov	r1, r5
 8010c86:	f7ef fb29 	bl	80002dc <__adddf3>
 8010c8a:	4b9e      	ldr	r3, [pc, #632]	@ (8010f04 <atan+0x314>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f7ef fb23 	bl	80002d8 <__aeabi_dsub>
 8010c92:	2200      	movs	r2, #0
 8010c94:	4606      	mov	r6, r0
 8010c96:	460f      	mov	r7, r1
 8010c98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ef fb1c 	bl	80002dc <__adddf3>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef fdf6 	bl	800089c <__aeabi_ddiv>
 8010cb0:	f04f 0a00 	mov.w	sl, #0
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	460d      	mov	r5, r1
 8010cb8:	4622      	mov	r2, r4
 8010cba:	462b      	mov	r3, r5
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fcc2 	bl	8000648 <__aeabi_dmul>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4680      	mov	r8, r0
 8010cca:	4689      	mov	r9, r1
 8010ccc:	f7ef fcbc 	bl	8000648 <__aeabi_dmul>
 8010cd0:	a371      	add	r3, pc, #452	@ (adr r3, 8010e98 <atan+0x2a8>)
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	4606      	mov	r6, r0
 8010cd8:	460f      	mov	r7, r1
 8010cda:	f7ef fcb5 	bl	8000648 <__aeabi_dmul>
 8010cde:	a370      	add	r3, pc, #448	@ (adr r3, 8010ea0 <atan+0x2b0>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fafa 	bl	80002dc <__adddf3>
 8010ce8:	4632      	mov	r2, r6
 8010cea:	463b      	mov	r3, r7
 8010cec:	f7ef fcac 	bl	8000648 <__aeabi_dmul>
 8010cf0:	a36d      	add	r3, pc, #436	@ (adr r3, 8010ea8 <atan+0x2b8>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	f7ef faf1 	bl	80002dc <__adddf3>
 8010cfa:	4632      	mov	r2, r6
 8010cfc:	463b      	mov	r3, r7
 8010cfe:	f7ef fca3 	bl	8000648 <__aeabi_dmul>
 8010d02:	a36b      	add	r3, pc, #428	@ (adr r3, 8010eb0 <atan+0x2c0>)
 8010d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d08:	f7ef fae8 	bl	80002dc <__adddf3>
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	463b      	mov	r3, r7
 8010d10:	f7ef fc9a 	bl	8000648 <__aeabi_dmul>
 8010d14:	a368      	add	r3, pc, #416	@ (adr r3, 8010eb8 <atan+0x2c8>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f7ef fadf 	bl	80002dc <__adddf3>
 8010d1e:	4632      	mov	r2, r6
 8010d20:	463b      	mov	r3, r7
 8010d22:	f7ef fc91 	bl	8000648 <__aeabi_dmul>
 8010d26:	a366      	add	r3, pc, #408	@ (adr r3, 8010ec0 <atan+0x2d0>)
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	f7ef fad6 	bl	80002dc <__adddf3>
 8010d30:	4642      	mov	r2, r8
 8010d32:	464b      	mov	r3, r9
 8010d34:	f7ef fc88 	bl	8000648 <__aeabi_dmul>
 8010d38:	a363      	add	r3, pc, #396	@ (adr r3, 8010ec8 <atan+0x2d8>)
 8010d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4689      	mov	r9, r1
 8010d42:	4630      	mov	r0, r6
 8010d44:	4639      	mov	r1, r7
 8010d46:	f7ef fc7f 	bl	8000648 <__aeabi_dmul>
 8010d4a:	a361      	add	r3, pc, #388	@ (adr r3, 8010ed0 <atan+0x2e0>)
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	f7ef fac2 	bl	80002d8 <__aeabi_dsub>
 8010d54:	4632      	mov	r2, r6
 8010d56:	463b      	mov	r3, r7
 8010d58:	f7ef fc76 	bl	8000648 <__aeabi_dmul>
 8010d5c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010ed8 <atan+0x2e8>)
 8010d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d62:	f7ef fab9 	bl	80002d8 <__aeabi_dsub>
 8010d66:	4632      	mov	r2, r6
 8010d68:	463b      	mov	r3, r7
 8010d6a:	f7ef fc6d 	bl	8000648 <__aeabi_dmul>
 8010d6e:	a35c      	add	r3, pc, #368	@ (adr r3, 8010ee0 <atan+0x2f0>)
 8010d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d74:	f7ef fab0 	bl	80002d8 <__aeabi_dsub>
 8010d78:	4632      	mov	r2, r6
 8010d7a:	463b      	mov	r3, r7
 8010d7c:	f7ef fc64 	bl	8000648 <__aeabi_dmul>
 8010d80:	a359      	add	r3, pc, #356	@ (adr r3, 8010ee8 <atan+0x2f8>)
 8010d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d86:	f7ef faa7 	bl	80002d8 <__aeabi_dsub>
 8010d8a:	4632      	mov	r2, r6
 8010d8c:	463b      	mov	r3, r7
 8010d8e:	f7ef fc5b 	bl	8000648 <__aeabi_dmul>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4640      	mov	r0, r8
 8010d98:	4649      	mov	r1, r9
 8010d9a:	f7ef fa9f 	bl	80002dc <__adddf3>
 8010d9e:	4622      	mov	r2, r4
 8010da0:	462b      	mov	r3, r5
 8010da2:	f7ef fc51 	bl	8000648 <__aeabi_dmul>
 8010da6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010daa:	4602      	mov	r2, r0
 8010dac:	460b      	mov	r3, r1
 8010dae:	d148      	bne.n	8010e42 <atan+0x252>
 8010db0:	4620      	mov	r0, r4
 8010db2:	4629      	mov	r1, r5
 8010db4:	f7ef fa90 	bl	80002d8 <__aeabi_dsub>
 8010db8:	e72f      	b.n	8010c1a <atan+0x2a>
 8010dba:	4b52      	ldr	r3, [pc, #328]	@ (8010f04 <atan+0x314>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	f7ef fa89 	bl	80002d8 <__aeabi_dsub>
 8010dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8010f04 <atan+0x314>)
 8010dc8:	4606      	mov	r6, r0
 8010dca:	460f      	mov	r7, r1
 8010dcc:	2200      	movs	r2, #0
 8010dce:	4620      	mov	r0, r4
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	f7ef fa83 	bl	80002dc <__adddf3>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4630      	mov	r0, r6
 8010ddc:	4639      	mov	r1, r7
 8010dde:	f7ef fd5d 	bl	800089c <__aeabi_ddiv>
 8010de2:	f04f 0a01 	mov.w	sl, #1
 8010de6:	4604      	mov	r4, r0
 8010de8:	460d      	mov	r5, r1
 8010dea:	e765      	b.n	8010cb8 <atan+0xc8>
 8010dec:	4b47      	ldr	r3, [pc, #284]	@ (8010f0c <atan+0x31c>)
 8010dee:	429e      	cmp	r6, r3
 8010df0:	d21c      	bcs.n	8010e2c <atan+0x23c>
 8010df2:	4b47      	ldr	r3, [pc, #284]	@ (8010f10 <atan+0x320>)
 8010df4:	2200      	movs	r2, #0
 8010df6:	4620      	mov	r0, r4
 8010df8:	4629      	mov	r1, r5
 8010dfa:	f7ef fa6d 	bl	80002d8 <__aeabi_dsub>
 8010dfe:	4b44      	ldr	r3, [pc, #272]	@ (8010f10 <atan+0x320>)
 8010e00:	4606      	mov	r6, r0
 8010e02:	460f      	mov	r7, r1
 8010e04:	2200      	movs	r2, #0
 8010e06:	4620      	mov	r0, r4
 8010e08:	4629      	mov	r1, r5
 8010e0a:	f7ef fc1d 	bl	8000648 <__aeabi_dmul>
 8010e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8010f04 <atan+0x314>)
 8010e10:	2200      	movs	r2, #0
 8010e12:	f7ef fa63 	bl	80002dc <__adddf3>
 8010e16:	4602      	mov	r2, r0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	4639      	mov	r1, r7
 8010e1e:	f7ef fd3d 	bl	800089c <__aeabi_ddiv>
 8010e22:	f04f 0a02 	mov.w	sl, #2
 8010e26:	4604      	mov	r4, r0
 8010e28:	460d      	mov	r5, r1
 8010e2a:	e745      	b.n	8010cb8 <atan+0xc8>
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	462b      	mov	r3, r5
 8010e30:	4938      	ldr	r1, [pc, #224]	@ (8010f14 <atan+0x324>)
 8010e32:	2000      	movs	r0, #0
 8010e34:	f7ef fd32 	bl	800089c <__aeabi_ddiv>
 8010e38:	f04f 0a03 	mov.w	sl, #3
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460d      	mov	r5, r1
 8010e40:	e73a      	b.n	8010cb8 <atan+0xc8>
 8010e42:	4b35      	ldr	r3, [pc, #212]	@ (8010f18 <atan+0x328>)
 8010e44:	4e35      	ldr	r6, [pc, #212]	@ (8010f1c <atan+0x32c>)
 8010e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4e:	f7ef fa43 	bl	80002d8 <__aeabi_dsub>
 8010e52:	4622      	mov	r2, r4
 8010e54:	462b      	mov	r3, r5
 8010e56:	f7ef fa3f 	bl	80002d8 <__aeabi_dsub>
 8010e5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010e66:	f7ef fa37 	bl	80002d8 <__aeabi_dsub>
 8010e6a:	f1bb 0f00 	cmp.w	fp, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	460d      	mov	r5, r1
 8010e72:	f6bf aedc 	bge.w	8010c2e <atan+0x3e>
 8010e76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e7a:	461d      	mov	r5, r3
 8010e7c:	e6d7      	b.n	8010c2e <atan+0x3e>
 8010e7e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010ef0 <atan+0x300>)
 8010e80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e84:	e6d3      	b.n	8010c2e <atan+0x3e>
 8010e86:	bf00      	nop
 8010e88:	54442d18 	.word	0x54442d18
 8010e8c:	3ff921fb 	.word	0x3ff921fb
 8010e90:	8800759c 	.word	0x8800759c
 8010e94:	7e37e43c 	.word	0x7e37e43c
 8010e98:	e322da11 	.word	0xe322da11
 8010e9c:	3f90ad3a 	.word	0x3f90ad3a
 8010ea0:	24760deb 	.word	0x24760deb
 8010ea4:	3fa97b4b 	.word	0x3fa97b4b
 8010ea8:	a0d03d51 	.word	0xa0d03d51
 8010eac:	3fb10d66 	.word	0x3fb10d66
 8010eb0:	c54c206e 	.word	0xc54c206e
 8010eb4:	3fb745cd 	.word	0x3fb745cd
 8010eb8:	920083ff 	.word	0x920083ff
 8010ebc:	3fc24924 	.word	0x3fc24924
 8010ec0:	5555550d 	.word	0x5555550d
 8010ec4:	3fd55555 	.word	0x3fd55555
 8010ec8:	2c6a6c2f 	.word	0x2c6a6c2f
 8010ecc:	bfa2b444 	.word	0xbfa2b444
 8010ed0:	52defd9a 	.word	0x52defd9a
 8010ed4:	3fadde2d 	.word	0x3fadde2d
 8010ed8:	af749a6d 	.word	0xaf749a6d
 8010edc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010ee0:	fe231671 	.word	0xfe231671
 8010ee4:	3fbc71c6 	.word	0x3fbc71c6
 8010ee8:	9998ebc4 	.word	0x9998ebc4
 8010eec:	3fc99999 	.word	0x3fc99999
 8010ef0:	54442d18 	.word	0x54442d18
 8010ef4:	bff921fb 	.word	0xbff921fb
 8010ef8:	440fffff 	.word	0x440fffff
 8010efc:	7ff00000 	.word	0x7ff00000
 8010f00:	3fdbffff 	.word	0x3fdbffff
 8010f04:	3ff00000 	.word	0x3ff00000
 8010f08:	3ff2ffff 	.word	0x3ff2ffff
 8010f0c:	40038000 	.word	0x40038000
 8010f10:	3ff80000 	.word	0x3ff80000
 8010f14:	bff00000 	.word	0xbff00000
 8010f18:	08011f88 	.word	0x08011f88
 8010f1c:	08011fa8 	.word	0x08011fa8

08010f20 <fabs>:
 8010f20:	ec51 0b10 	vmov	r0, r1, d0
 8010f24:	4602      	mov	r2, r0
 8010f26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010f2a:	ec43 2b10 	vmov	d0, r2, r3
 8010f2e:	4770      	bx	lr

08010f30 <__kernel_cosf>:
 8010f30:	ee10 3a10 	vmov	r3, s0
 8010f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010f38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010f3c:	eef0 6a40 	vmov.f32	s13, s0
 8010f40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f44:	d204      	bcs.n	8010f50 <__kernel_cosf+0x20>
 8010f46:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010f4a:	ee17 2a90 	vmov	r2, s15
 8010f4e:	b342      	cbz	r2, 8010fa2 <__kernel_cosf+0x72>
 8010f50:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010f54:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010fc0 <__kernel_cosf+0x90>
 8010f58:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010fc4 <__kernel_cosf+0x94>
 8010f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8010fc8 <__kernel_cosf+0x98>)
 8010f5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010f62:	4293      	cmp	r3, r2
 8010f64:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010fcc <__kernel_cosf+0x9c>
 8010f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010f6c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010fd0 <__kernel_cosf+0xa0>
 8010f70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010f74:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010fd4 <__kernel_cosf+0xa4>
 8010f78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010f7c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010fd8 <__kernel_cosf+0xa8>
 8010f80:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010f84:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010f88:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010f8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f90:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f98:	d804      	bhi.n	8010fa4 <__kernel_cosf+0x74>
 8010f9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010f9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fa2:	4770      	bx	lr
 8010fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8010fdc <__kernel_cosf+0xac>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	bf9a      	itte	ls
 8010faa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010fae:	ee07 3a10 	vmovls	s14, r3
 8010fb2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010fb6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fbe:	e7ec      	b.n	8010f9a <__kernel_cosf+0x6a>
 8010fc0:	ad47d74e 	.word	0xad47d74e
 8010fc4:	310f74f6 	.word	0x310f74f6
 8010fc8:	3e999999 	.word	0x3e999999
 8010fcc:	b493f27c 	.word	0xb493f27c
 8010fd0:	37d00d01 	.word	0x37d00d01
 8010fd4:	bab60b61 	.word	0xbab60b61
 8010fd8:	3d2aaaab 	.word	0x3d2aaaab
 8010fdc:	3f480000 	.word	0x3f480000

08010fe0 <__kernel_sinf>:
 8010fe0:	ee10 3a10 	vmov	r3, s0
 8010fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010fe8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010fec:	d204      	bcs.n	8010ff8 <__kernel_sinf+0x18>
 8010fee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010ff2:	ee17 3a90 	vmov	r3, s15
 8010ff6:	b35b      	cbz	r3, 8011050 <__kernel_sinf+0x70>
 8010ff8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010ffc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011054 <__kernel_sinf+0x74>
 8011000:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8011058 <__kernel_sinf+0x78>
 8011004:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011008:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801105c <__kernel_sinf+0x7c>
 801100c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011010:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011060 <__kernel_sinf+0x80>
 8011014:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011018:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011064 <__kernel_sinf+0x84>
 801101c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011020:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011024:	b930      	cbnz	r0, 8011034 <__kernel_sinf+0x54>
 8011026:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8011068 <__kernel_sinf+0x88>
 801102a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801102e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011032:	4770      	bx	lr
 8011034:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011038:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801103c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011040:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011044:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801106c <__kernel_sinf+0x8c>
 8011048:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801104c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011050:	4770      	bx	lr
 8011052:	bf00      	nop
 8011054:	2f2ec9d3 	.word	0x2f2ec9d3
 8011058:	b2d72f34 	.word	0xb2d72f34
 801105c:	3638ef1b 	.word	0x3638ef1b
 8011060:	b9500d01 	.word	0xb9500d01
 8011064:	3c088889 	.word	0x3c088889
 8011068:	be2aaaab 	.word	0xbe2aaaab
 801106c:	3e2aaaab 	.word	0x3e2aaaab

08011070 <__kernel_tanf>:
 8011070:	b508      	push	{r3, lr}
 8011072:	ee10 3a10 	vmov	r3, s0
 8011076:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801107a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801107e:	eef0 7a40 	vmov.f32	s15, s0
 8011082:	d217      	bcs.n	80110b4 <__kernel_tanf+0x44>
 8011084:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8011088:	ee17 1a10 	vmov	r1, s14
 801108c:	bb41      	cbnz	r1, 80110e0 <__kernel_tanf+0x70>
 801108e:	1c43      	adds	r3, r0, #1
 8011090:	4313      	orrs	r3, r2
 8011092:	d108      	bne.n	80110a6 <__kernel_tanf+0x36>
 8011094:	f000 f9fc 	bl	8011490 <fabsf>
 8011098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801109c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80110a0:	eeb0 0a67 	vmov.f32	s0, s15
 80110a4:	bd08      	pop	{r3, pc}
 80110a6:	2801      	cmp	r0, #1
 80110a8:	d0fa      	beq.n	80110a0 <__kernel_tanf+0x30>
 80110aa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80110ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80110b2:	e7f5      	b.n	80110a0 <__kernel_tanf+0x30>
 80110b4:	494c      	ldr	r1, [pc, #304]	@ (80111e8 <__kernel_tanf+0x178>)
 80110b6:	428a      	cmp	r2, r1
 80110b8:	d312      	bcc.n	80110e0 <__kernel_tanf+0x70>
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80111ec <__kernel_tanf+0x17c>
 80110c0:	bfb8      	it	lt
 80110c2:	eef1 7a40 	vneglt.f32	s15, s0
 80110c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110ca:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80111f0 <__kernel_tanf+0x180>
 80110ce:	bfb8      	it	lt
 80110d0:	eef1 0a60 	vneglt.f32	s1, s1
 80110d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80110d8:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80111f4 <__kernel_tanf+0x184>
 80110dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110e0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80110e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80111f8 <__kernel_tanf+0x188>
 80110e8:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80111fc <__kernel_tanf+0x18c>
 80110ec:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8011200 <__kernel_tanf+0x190>
 80110f0:	493d      	ldr	r1, [pc, #244]	@ (80111e8 <__kernel_tanf+0x178>)
 80110f2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80110f6:	428a      	cmp	r2, r1
 80110f8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80110fc:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8011204 <__kernel_tanf+0x194>
 8011100:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011104:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8011208 <__kernel_tanf+0x198>
 8011108:	eea5 6a87 	vfma.f32	s12, s11, s14
 801110c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801120c <__kernel_tanf+0x19c>
 8011110:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011114:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8011210 <__kernel_tanf+0x1a0>
 8011118:	eea5 6a87 	vfma.f32	s12, s11, s14
 801111c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8011214 <__kernel_tanf+0x1a4>
 8011120:	eee7 5a05 	vfma.f32	s11, s14, s10
 8011124:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011218 <__kernel_tanf+0x1a8>
 8011128:	eea5 5a87 	vfma.f32	s10, s11, s14
 801112c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801121c <__kernel_tanf+0x1ac>
 8011130:	eee5 5a07 	vfma.f32	s11, s10, s14
 8011134:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011220 <__kernel_tanf+0x1b0>
 8011138:	eea5 5a87 	vfma.f32	s10, s11, s14
 801113c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8011224 <__kernel_tanf+0x1b4>
 8011140:	eee5 5a07 	vfma.f32	s11, s10, s14
 8011144:	eeb0 7a46 	vmov.f32	s14, s12
 8011148:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801114c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8011150:	eeb0 6a60 	vmov.f32	s12, s1
 8011154:	eea7 6a05 	vfma.f32	s12, s14, s10
 8011158:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011228 <__kernel_tanf+0x1b8>
 801115c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8011160:	eee5 0a07 	vfma.f32	s1, s10, s14
 8011164:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8011168:	d31d      	bcc.n	80111a6 <__kernel_tanf+0x136>
 801116a:	ee07 0a10 	vmov	s14, r0
 801116e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011172:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011176:	ee36 6a07 	vadd.f32	s12, s12, s14
 801117a:	179b      	asrs	r3, r3, #30
 801117c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8011180:	f003 0302 	and.w	r3, r3, #2
 8011184:	f1c3 0301 	rsb	r3, r3, #1
 8011188:	ee06 3a90 	vmov	s13, r3
 801118c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8011190:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011194:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011198:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801119c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80111a0:	ee66 7a87 	vmul.f32	s15, s13, s14
 80111a4:	e77c      	b.n	80110a0 <__kernel_tanf+0x30>
 80111a6:	2801      	cmp	r0, #1
 80111a8:	d01b      	beq.n	80111e2 <__kernel_tanf+0x172>
 80111aa:	4b20      	ldr	r3, [pc, #128]	@ (801122c <__kernel_tanf+0x1bc>)
 80111ac:	ee16 2a10 	vmov	r2, s12
 80111b0:	401a      	ands	r2, r3
 80111b2:	ee05 2a90 	vmov	s11, r2
 80111b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80111ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80111be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80111c2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80111c6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80111ca:	ee16 2a90 	vmov	r2, s13
 80111ce:	4013      	ands	r3, r2
 80111d0:	ee07 3a90 	vmov	s15, r3
 80111d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80111d8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80111dc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80111e0:	e75e      	b.n	80110a0 <__kernel_tanf+0x30>
 80111e2:	eef0 7a46 	vmov.f32	s15, s12
 80111e6:	e75b      	b.n	80110a0 <__kernel_tanf+0x30>
 80111e8:	3f2ca140 	.word	0x3f2ca140
 80111ec:	3f490fda 	.word	0x3f490fda
 80111f0:	33222168 	.word	0x33222168
 80111f4:	00000000 	.word	0x00000000
 80111f8:	b79bae5f 	.word	0xb79bae5f
 80111fc:	38a3f445 	.word	0x38a3f445
 8011200:	37d95384 	.word	0x37d95384
 8011204:	3a1a26c8 	.word	0x3a1a26c8
 8011208:	3b6b6916 	.word	0x3b6b6916
 801120c:	3cb327a4 	.word	0x3cb327a4
 8011210:	3e088889 	.word	0x3e088889
 8011214:	3895c07a 	.word	0x3895c07a
 8011218:	398137b9 	.word	0x398137b9
 801121c:	3abede48 	.word	0x3abede48
 8011220:	3c11371f 	.word	0x3c11371f
 8011224:	3d5d0dd1 	.word	0x3d5d0dd1
 8011228:	3eaaaaab 	.word	0x3eaaaaab
 801122c:	fffff000 	.word	0xfffff000

08011230 <__ieee754_rem_pio2f>:
 8011230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011232:	ee10 6a10 	vmov	r6, s0
 8011236:	4b88      	ldr	r3, [pc, #544]	@ (8011458 <__ieee754_rem_pio2f+0x228>)
 8011238:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801123c:	429d      	cmp	r5, r3
 801123e:	b087      	sub	sp, #28
 8011240:	4604      	mov	r4, r0
 8011242:	d805      	bhi.n	8011250 <__ieee754_rem_pio2f+0x20>
 8011244:	2300      	movs	r3, #0
 8011246:	ed80 0a00 	vstr	s0, [r0]
 801124a:	6043      	str	r3, [r0, #4]
 801124c:	2000      	movs	r0, #0
 801124e:	e022      	b.n	8011296 <__ieee754_rem_pio2f+0x66>
 8011250:	4b82      	ldr	r3, [pc, #520]	@ (801145c <__ieee754_rem_pio2f+0x22c>)
 8011252:	429d      	cmp	r5, r3
 8011254:	d83a      	bhi.n	80112cc <__ieee754_rem_pio2f+0x9c>
 8011256:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801125a:	2e00      	cmp	r6, #0
 801125c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011460 <__ieee754_rem_pio2f+0x230>
 8011260:	4a80      	ldr	r2, [pc, #512]	@ (8011464 <__ieee754_rem_pio2f+0x234>)
 8011262:	f023 030f 	bic.w	r3, r3, #15
 8011266:	dd18      	ble.n	801129a <__ieee754_rem_pio2f+0x6a>
 8011268:	4293      	cmp	r3, r2
 801126a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801126e:	bf09      	itett	eq
 8011270:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011468 <__ieee754_rem_pio2f+0x238>
 8011274:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801146c <__ieee754_rem_pio2f+0x23c>
 8011278:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011470 <__ieee754_rem_pio2f+0x240>
 801127c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011280:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011288:	ed80 7a00 	vstr	s14, [r0]
 801128c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011290:	edc0 7a01 	vstr	s15, [r0, #4]
 8011294:	2001      	movs	r0, #1
 8011296:	b007      	add	sp, #28
 8011298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801129a:	4293      	cmp	r3, r2
 801129c:	ee70 7a07 	vadd.f32	s15, s0, s14
 80112a0:	bf09      	itett	eq
 80112a2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011468 <__ieee754_rem_pio2f+0x238>
 80112a6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801146c <__ieee754_rem_pio2f+0x23c>
 80112aa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011470 <__ieee754_rem_pio2f+0x240>
 80112ae:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80112b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80112b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112ba:	ed80 7a00 	vstr	s14, [r0]
 80112be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80112c6:	f04f 30ff 	mov.w	r0, #4294967295
 80112ca:	e7e4      	b.n	8011296 <__ieee754_rem_pio2f+0x66>
 80112cc:	4b69      	ldr	r3, [pc, #420]	@ (8011474 <__ieee754_rem_pio2f+0x244>)
 80112ce:	429d      	cmp	r5, r3
 80112d0:	d873      	bhi.n	80113ba <__ieee754_rem_pio2f+0x18a>
 80112d2:	f000 f8dd 	bl	8011490 <fabsf>
 80112d6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011478 <__ieee754_rem_pio2f+0x248>
 80112da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80112de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80112e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80112ea:	ee17 0a90 	vmov	r0, s15
 80112ee:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011460 <__ieee754_rem_pio2f+0x230>
 80112f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80112f6:	281f      	cmp	r0, #31
 80112f8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801146c <__ieee754_rem_pio2f+0x23c>
 80112fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011300:	eeb1 6a47 	vneg.f32	s12, s14
 8011304:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011308:	ee16 1a90 	vmov	r1, s13
 801130c:	dc09      	bgt.n	8011322 <__ieee754_rem_pio2f+0xf2>
 801130e:	4a5b      	ldr	r2, [pc, #364]	@ (801147c <__ieee754_rem_pio2f+0x24c>)
 8011310:	1e47      	subs	r7, r0, #1
 8011312:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011316:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801131a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801131e:	4293      	cmp	r3, r2
 8011320:	d107      	bne.n	8011332 <__ieee754_rem_pio2f+0x102>
 8011322:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011326:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801132a:	2a08      	cmp	r2, #8
 801132c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011330:	dc14      	bgt.n	801135c <__ieee754_rem_pio2f+0x12c>
 8011332:	6021      	str	r1, [r4, #0]
 8011334:	ed94 7a00 	vldr	s14, [r4]
 8011338:	ee30 0a47 	vsub.f32	s0, s0, s14
 801133c:	2e00      	cmp	r6, #0
 801133e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011342:	ed84 0a01 	vstr	s0, [r4, #4]
 8011346:	daa6      	bge.n	8011296 <__ieee754_rem_pio2f+0x66>
 8011348:	eeb1 7a47 	vneg.f32	s14, s14
 801134c:	eeb1 0a40 	vneg.f32	s0, s0
 8011350:	ed84 7a00 	vstr	s14, [r4]
 8011354:	ed84 0a01 	vstr	s0, [r4, #4]
 8011358:	4240      	negs	r0, r0
 801135a:	e79c      	b.n	8011296 <__ieee754_rem_pio2f+0x66>
 801135c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011468 <__ieee754_rem_pio2f+0x238>
 8011360:	eef0 6a40 	vmov.f32	s13, s0
 8011364:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011368:	ee70 7a66 	vsub.f32	s15, s0, s13
 801136c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011370:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011470 <__ieee754_rem_pio2f+0x240>
 8011374:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011378:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801137c:	ee15 2a90 	vmov	r2, s11
 8011380:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011384:	1a5b      	subs	r3, r3, r1
 8011386:	2b19      	cmp	r3, #25
 8011388:	dc04      	bgt.n	8011394 <__ieee754_rem_pio2f+0x164>
 801138a:	edc4 5a00 	vstr	s11, [r4]
 801138e:	eeb0 0a66 	vmov.f32	s0, s13
 8011392:	e7cf      	b.n	8011334 <__ieee754_rem_pio2f+0x104>
 8011394:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011480 <__ieee754_rem_pio2f+0x250>
 8011398:	eeb0 0a66 	vmov.f32	s0, s13
 801139c:	eea6 0a25 	vfma.f32	s0, s12, s11
 80113a0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80113a4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011484 <__ieee754_rem_pio2f+0x254>
 80113a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80113ac:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80113b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80113b4:	ed84 7a00 	vstr	s14, [r4]
 80113b8:	e7bc      	b.n	8011334 <__ieee754_rem_pio2f+0x104>
 80113ba:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80113be:	d306      	bcc.n	80113ce <__ieee754_rem_pio2f+0x19e>
 80113c0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80113c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80113c8:	edc0 7a00 	vstr	s15, [r0]
 80113cc:	e73e      	b.n	801124c <__ieee754_rem_pio2f+0x1c>
 80113ce:	15ea      	asrs	r2, r5, #23
 80113d0:	3a86      	subs	r2, #134	@ 0x86
 80113d2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80113d6:	ee07 3a90 	vmov	s15, r3
 80113da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113de:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011488 <__ieee754_rem_pio2f+0x258>
 80113e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80113e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113ea:	ed8d 7a03 	vstr	s14, [sp, #12]
 80113ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80113fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113fe:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011406:	eef5 7a40 	vcmp.f32	s15, #0.0
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	edcd 7a05 	vstr	s15, [sp, #20]
 8011412:	d11e      	bne.n	8011452 <__ieee754_rem_pio2f+0x222>
 8011414:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141c:	bf0c      	ite	eq
 801141e:	2301      	moveq	r3, #1
 8011420:	2302      	movne	r3, #2
 8011422:	491a      	ldr	r1, [pc, #104]	@ (801148c <__ieee754_rem_pio2f+0x25c>)
 8011424:	9101      	str	r1, [sp, #4]
 8011426:	2102      	movs	r1, #2
 8011428:	9100      	str	r1, [sp, #0]
 801142a:	a803      	add	r0, sp, #12
 801142c:	4621      	mov	r1, r4
 801142e:	f000 f837 	bl	80114a0 <__kernel_rem_pio2f>
 8011432:	2e00      	cmp	r6, #0
 8011434:	f6bf af2f 	bge.w	8011296 <__ieee754_rem_pio2f+0x66>
 8011438:	edd4 7a00 	vldr	s15, [r4]
 801143c:	eef1 7a67 	vneg.f32	s15, s15
 8011440:	edc4 7a00 	vstr	s15, [r4]
 8011444:	edd4 7a01 	vldr	s15, [r4, #4]
 8011448:	eef1 7a67 	vneg.f32	s15, s15
 801144c:	edc4 7a01 	vstr	s15, [r4, #4]
 8011450:	e782      	b.n	8011358 <__ieee754_rem_pio2f+0x128>
 8011452:	2303      	movs	r3, #3
 8011454:	e7e5      	b.n	8011422 <__ieee754_rem_pio2f+0x1f2>
 8011456:	bf00      	nop
 8011458:	3f490fd8 	.word	0x3f490fd8
 801145c:	4016cbe3 	.word	0x4016cbe3
 8011460:	3fc90f80 	.word	0x3fc90f80
 8011464:	3fc90fd0 	.word	0x3fc90fd0
 8011468:	37354400 	.word	0x37354400
 801146c:	37354443 	.word	0x37354443
 8011470:	2e85a308 	.word	0x2e85a308
 8011474:	43490f80 	.word	0x43490f80
 8011478:	3f22f984 	.word	0x3f22f984
 801147c:	08011fc8 	.word	0x08011fc8
 8011480:	2e85a300 	.word	0x2e85a300
 8011484:	248d3132 	.word	0x248d3132
 8011488:	43800000 	.word	0x43800000
 801148c:	08012048 	.word	0x08012048

08011490 <fabsf>:
 8011490:	ee10 3a10 	vmov	r3, s0
 8011494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011498:	ee00 3a10 	vmov	s0, r3
 801149c:	4770      	bx	lr
	...

080114a0 <__kernel_rem_pio2f>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	ed2d 8b04 	vpush	{d8-d9}
 80114a8:	b0d9      	sub	sp, #356	@ 0x164
 80114aa:	4690      	mov	r8, r2
 80114ac:	9001      	str	r0, [sp, #4]
 80114ae:	4ab9      	ldr	r2, [pc, #740]	@ (8011794 <__kernel_rem_pio2f+0x2f4>)
 80114b0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80114b2:	f118 0f04 	cmn.w	r8, #4
 80114b6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80114ba:	460f      	mov	r7, r1
 80114bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80114c0:	db27      	blt.n	8011512 <__kernel_rem_pio2f+0x72>
 80114c2:	f1b8 0203 	subs.w	r2, r8, #3
 80114c6:	bf48      	it	mi
 80114c8:	f108 0204 	addmi.w	r2, r8, #4
 80114cc:	10d2      	asrs	r2, r2, #3
 80114ce:	1c55      	adds	r5, r2, #1
 80114d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80114d2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 80114d6:	00e8      	lsls	r0, r5, #3
 80114d8:	eba2 060b 	sub.w	r6, r2, fp
 80114dc:	9002      	str	r0, [sp, #8]
 80114de:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80114e2:	eb0a 0c0b 	add.w	ip, sl, fp
 80114e6:	ac1c      	add	r4, sp, #112	@ 0x70
 80114e8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80114ec:	2000      	movs	r0, #0
 80114ee:	4560      	cmp	r0, ip
 80114f0:	dd11      	ble.n	8011516 <__kernel_rem_pio2f+0x76>
 80114f2:	a91c      	add	r1, sp, #112	@ 0x70
 80114f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80114f8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80114fc:	f04f 0c00 	mov.w	ip, #0
 8011500:	45d4      	cmp	ip, sl
 8011502:	dc27      	bgt.n	8011554 <__kernel_rem_pio2f+0xb4>
 8011504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011508:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 801150c:	4606      	mov	r6, r0
 801150e:	2400      	movs	r4, #0
 8011510:	e016      	b.n	8011540 <__kernel_rem_pio2f+0xa0>
 8011512:	2200      	movs	r2, #0
 8011514:	e7db      	b.n	80114ce <__kernel_rem_pio2f+0x2e>
 8011516:	42c6      	cmn	r6, r0
 8011518:	bf5d      	ittte	pl
 801151a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801151e:	ee07 1a90 	vmovpl	s15, r1
 8011522:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011526:	eef0 7a47 	vmovmi.f32	s15, s14
 801152a:	ece4 7a01 	vstmia	r4!, {s15}
 801152e:	3001      	adds	r0, #1
 8011530:	e7dd      	b.n	80114ee <__kernel_rem_pio2f+0x4e>
 8011532:	ecfe 6a01 	vldmia	lr!, {s13}
 8011536:	ed96 7a00 	vldr	s14, [r6]
 801153a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801153e:	3401      	adds	r4, #1
 8011540:	455c      	cmp	r4, fp
 8011542:	f1a6 0604 	sub.w	r6, r6, #4
 8011546:	ddf4      	ble.n	8011532 <__kernel_rem_pio2f+0x92>
 8011548:	ece9 7a01 	vstmia	r9!, {s15}
 801154c:	f10c 0c01 	add.w	ip, ip, #1
 8011550:	3004      	adds	r0, #4
 8011552:	e7d5      	b.n	8011500 <__kernel_rem_pio2f+0x60>
 8011554:	a908      	add	r1, sp, #32
 8011556:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801155a:	9104      	str	r1, [sp, #16]
 801155c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801155e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80117a0 <__kernel_rem_pio2f+0x300>
 8011562:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801179c <__kernel_rem_pio2f+0x2fc>
 8011566:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801156a:	9203      	str	r2, [sp, #12]
 801156c:	4654      	mov	r4, sl
 801156e:	00a2      	lsls	r2, r4, #2
 8011570:	9205      	str	r2, [sp, #20]
 8011572:	aa58      	add	r2, sp, #352	@ 0x160
 8011574:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011578:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801157c:	a944      	add	r1, sp, #272	@ 0x110
 801157e:	aa08      	add	r2, sp, #32
 8011580:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011584:	4694      	mov	ip, r2
 8011586:	4626      	mov	r6, r4
 8011588:	2e00      	cmp	r6, #0
 801158a:	f1a0 0004 	sub.w	r0, r0, #4
 801158e:	dc4c      	bgt.n	801162a <__kernel_rem_pio2f+0x18a>
 8011590:	4628      	mov	r0, r5
 8011592:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011596:	f000 f9f5 	bl	8011984 <scalbnf>
 801159a:	eeb0 8a40 	vmov.f32	s16, s0
 801159e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80115a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80115a6:	f000 fa53 	bl	8011a50 <floorf>
 80115aa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80115ae:	eea0 8a67 	vfms.f32	s16, s0, s15
 80115b2:	2d00      	cmp	r5, #0
 80115b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80115bc:	ee17 9a90 	vmov	r9, s15
 80115c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115c4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80115c8:	dd41      	ble.n	801164e <__kernel_rem_pio2f+0x1ae>
 80115ca:	f104 3cff 	add.w	ip, r4, #4294967295
 80115ce:	a908      	add	r1, sp, #32
 80115d0:	f1c5 0e08 	rsb	lr, r5, #8
 80115d4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80115d8:	fa46 f00e 	asr.w	r0, r6, lr
 80115dc:	4481      	add	r9, r0
 80115de:	fa00 f00e 	lsl.w	r0, r0, lr
 80115e2:	1a36      	subs	r6, r6, r0
 80115e4:	f1c5 0007 	rsb	r0, r5, #7
 80115e8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80115ec:	4106      	asrs	r6, r0
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	dd3c      	ble.n	801166c <__kernel_rem_pio2f+0x1cc>
 80115f2:	f04f 0e00 	mov.w	lr, #0
 80115f6:	f109 0901 	add.w	r9, r9, #1
 80115fa:	4670      	mov	r0, lr
 80115fc:	4574      	cmp	r4, lr
 80115fe:	dc68      	bgt.n	80116d2 <__kernel_rem_pio2f+0x232>
 8011600:	2d00      	cmp	r5, #0
 8011602:	dd03      	ble.n	801160c <__kernel_rem_pio2f+0x16c>
 8011604:	2d01      	cmp	r5, #1
 8011606:	d074      	beq.n	80116f2 <__kernel_rem_pio2f+0x252>
 8011608:	2d02      	cmp	r5, #2
 801160a:	d07d      	beq.n	8011708 <__kernel_rem_pio2f+0x268>
 801160c:	2e02      	cmp	r6, #2
 801160e:	d12d      	bne.n	801166c <__kernel_rem_pio2f+0x1cc>
 8011610:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011614:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011618:	b340      	cbz	r0, 801166c <__kernel_rem_pio2f+0x1cc>
 801161a:	4628      	mov	r0, r5
 801161c:	9306      	str	r3, [sp, #24]
 801161e:	f000 f9b1 	bl	8011984 <scalbnf>
 8011622:	9b06      	ldr	r3, [sp, #24]
 8011624:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011628:	e020      	b.n	801166c <__kernel_rem_pio2f+0x1cc>
 801162a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801162e:	3e01      	subs	r6, #1
 8011630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011638:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801163c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011640:	ecac 0a01 	vstmia	ip!, {s0}
 8011644:	ed90 0a00 	vldr	s0, [r0]
 8011648:	ee37 0a80 	vadd.f32	s0, s15, s0
 801164c:	e79c      	b.n	8011588 <__kernel_rem_pio2f+0xe8>
 801164e:	d105      	bne.n	801165c <__kernel_rem_pio2f+0x1bc>
 8011650:	1e60      	subs	r0, r4, #1
 8011652:	a908      	add	r1, sp, #32
 8011654:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011658:	11f6      	asrs	r6, r6, #7
 801165a:	e7c8      	b.n	80115ee <__kernel_rem_pio2f+0x14e>
 801165c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011660:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	da31      	bge.n	80116ce <__kernel_rem_pio2f+0x22e>
 801166a:	2600      	movs	r6, #0
 801166c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	f040 8098 	bne.w	80117a8 <__kernel_rem_pio2f+0x308>
 8011678:	1e60      	subs	r0, r4, #1
 801167a:	2200      	movs	r2, #0
 801167c:	4550      	cmp	r0, sl
 801167e:	da4b      	bge.n	8011718 <__kernel_rem_pio2f+0x278>
 8011680:	2a00      	cmp	r2, #0
 8011682:	d065      	beq.n	8011750 <__kernel_rem_pio2f+0x2b0>
 8011684:	3c01      	subs	r4, #1
 8011686:	ab08      	add	r3, sp, #32
 8011688:	3d08      	subs	r5, #8
 801168a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d0f8      	beq.n	8011684 <__kernel_rem_pio2f+0x1e4>
 8011692:	4628      	mov	r0, r5
 8011694:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011698:	f000 f974 	bl	8011984 <scalbnf>
 801169c:	1c63      	adds	r3, r4, #1
 801169e:	aa44      	add	r2, sp, #272	@ 0x110
 80116a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80117a0 <__kernel_rem_pio2f+0x300>
 80116a4:	0099      	lsls	r1, r3, #2
 80116a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80116aa:	4623      	mov	r3, r4
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f280 80a9 	bge.w	8011804 <__kernel_rem_pio2f+0x364>
 80116b2:	4623      	mov	r3, r4
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f2c0 80c7 	blt.w	8011848 <__kernel_rem_pio2f+0x3a8>
 80116ba:	aa44      	add	r2, sp, #272	@ 0x110
 80116bc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80116c0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011798 <__kernel_rem_pio2f+0x2f8>
 80116c4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 80116c8:	2000      	movs	r0, #0
 80116ca:	1ae2      	subs	r2, r4, r3
 80116cc:	e0b1      	b.n	8011832 <__kernel_rem_pio2f+0x392>
 80116ce:	2602      	movs	r6, #2
 80116d0:	e78f      	b.n	80115f2 <__kernel_rem_pio2f+0x152>
 80116d2:	f852 1b04 	ldr.w	r1, [r2], #4
 80116d6:	b948      	cbnz	r0, 80116ec <__kernel_rem_pio2f+0x24c>
 80116d8:	b121      	cbz	r1, 80116e4 <__kernel_rem_pio2f+0x244>
 80116da:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80116de:	f842 1c04 	str.w	r1, [r2, #-4]
 80116e2:	2101      	movs	r1, #1
 80116e4:	f10e 0e01 	add.w	lr, lr, #1
 80116e8:	4608      	mov	r0, r1
 80116ea:	e787      	b.n	80115fc <__kernel_rem_pio2f+0x15c>
 80116ec:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80116f0:	e7f5      	b.n	80116de <__kernel_rem_pio2f+0x23e>
 80116f2:	f104 3cff 	add.w	ip, r4, #4294967295
 80116f6:	aa08      	add	r2, sp, #32
 80116f8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80116fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011700:	a908      	add	r1, sp, #32
 8011702:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011706:	e781      	b.n	801160c <__kernel_rem_pio2f+0x16c>
 8011708:	f104 3cff 	add.w	ip, r4, #4294967295
 801170c:	aa08      	add	r2, sp, #32
 801170e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011712:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011716:	e7f3      	b.n	8011700 <__kernel_rem_pio2f+0x260>
 8011718:	a908      	add	r1, sp, #32
 801171a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801171e:	3801      	subs	r0, #1
 8011720:	430a      	orrs	r2, r1
 8011722:	e7ab      	b.n	801167c <__kernel_rem_pio2f+0x1dc>
 8011724:	3201      	adds	r2, #1
 8011726:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801172a:	2e00      	cmp	r6, #0
 801172c:	d0fa      	beq.n	8011724 <__kernel_rem_pio2f+0x284>
 801172e:	9905      	ldr	r1, [sp, #20]
 8011730:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8011734:	eb0d 0001 	add.w	r0, sp, r1
 8011738:	18e6      	adds	r6, r4, r3
 801173a:	a91c      	add	r1, sp, #112	@ 0x70
 801173c:	f104 0c01 	add.w	ip, r4, #1
 8011740:	384c      	subs	r0, #76	@ 0x4c
 8011742:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8011746:	4422      	add	r2, r4
 8011748:	4562      	cmp	r2, ip
 801174a:	da04      	bge.n	8011756 <__kernel_rem_pio2f+0x2b6>
 801174c:	4614      	mov	r4, r2
 801174e:	e70e      	b.n	801156e <__kernel_rem_pio2f+0xce>
 8011750:	9804      	ldr	r0, [sp, #16]
 8011752:	2201      	movs	r2, #1
 8011754:	e7e7      	b.n	8011726 <__kernel_rem_pio2f+0x286>
 8011756:	9903      	ldr	r1, [sp, #12]
 8011758:	f8dd e004 	ldr.w	lr, [sp, #4]
 801175c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011760:	9105      	str	r1, [sp, #20]
 8011762:	ee07 1a90 	vmov	s15, r1
 8011766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801176a:	2400      	movs	r4, #0
 801176c:	ece6 7a01 	vstmia	r6!, {s15}
 8011770:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 8011774:	46b1      	mov	r9, r6
 8011776:	455c      	cmp	r4, fp
 8011778:	dd04      	ble.n	8011784 <__kernel_rem_pio2f+0x2e4>
 801177a:	ece0 7a01 	vstmia	r0!, {s15}
 801177e:	f10c 0c01 	add.w	ip, ip, #1
 8011782:	e7e1      	b.n	8011748 <__kernel_rem_pio2f+0x2a8>
 8011784:	ecfe 6a01 	vldmia	lr!, {s13}
 8011788:	ed39 7a01 	vldmdb	r9!, {s14}
 801178c:	3401      	adds	r4, #1
 801178e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011792:	e7f0      	b.n	8011776 <__kernel_rem_pio2f+0x2d6>
 8011794:	0801238c 	.word	0x0801238c
 8011798:	08012360 	.word	0x08012360
 801179c:	43800000 	.word	0x43800000
 80117a0:	3b800000 	.word	0x3b800000
 80117a4:	00000000 	.word	0x00000000
 80117a8:	9b02      	ldr	r3, [sp, #8]
 80117aa:	eeb0 0a48 	vmov.f32	s0, s16
 80117ae:	eba3 0008 	sub.w	r0, r3, r8
 80117b2:	f000 f8e7 	bl	8011984 <scalbnf>
 80117b6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801179c <__kernel_rem_pio2f+0x2fc>
 80117ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80117be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c2:	db19      	blt.n	80117f8 <__kernel_rem_pio2f+0x358>
 80117c4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80117a0 <__kernel_rem_pio2f+0x300>
 80117c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80117cc:	aa08      	add	r2, sp, #32
 80117ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117d2:	3508      	adds	r5, #8
 80117d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80117dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80117e4:	ee10 3a10 	vmov	r3, s0
 80117e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80117ec:	ee17 3a90 	vmov	r3, s15
 80117f0:	3401      	adds	r4, #1
 80117f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80117f6:	e74c      	b.n	8011692 <__kernel_rem_pio2f+0x1f2>
 80117f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80117fc:	aa08      	add	r2, sp, #32
 80117fe:	ee10 3a10 	vmov	r3, s0
 8011802:	e7f6      	b.n	80117f2 <__kernel_rem_pio2f+0x352>
 8011804:	a808      	add	r0, sp, #32
 8011806:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801180a:	9001      	str	r0, [sp, #4]
 801180c:	ee07 0a90 	vmov	s15, r0
 8011810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011814:	3b01      	subs	r3, #1
 8011816:	ee67 7a80 	vmul.f32	s15, s15, s0
 801181a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801181e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011822:	e743      	b.n	80116ac <__kernel_rem_pio2f+0x20c>
 8011824:	ecfc 6a01 	vldmia	ip!, {s13}
 8011828:	ecb5 7a01 	vldmia	r5!, {s14}
 801182c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011830:	3001      	adds	r0, #1
 8011832:	4550      	cmp	r0, sl
 8011834:	dc01      	bgt.n	801183a <__kernel_rem_pio2f+0x39a>
 8011836:	4282      	cmp	r2, r0
 8011838:	daf4      	bge.n	8011824 <__kernel_rem_pio2f+0x384>
 801183a:	a858      	add	r0, sp, #352	@ 0x160
 801183c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011840:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8011844:	3b01      	subs	r3, #1
 8011846:	e735      	b.n	80116b4 <__kernel_rem_pio2f+0x214>
 8011848:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801184a:	2b02      	cmp	r3, #2
 801184c:	dc09      	bgt.n	8011862 <__kernel_rem_pio2f+0x3c2>
 801184e:	2b00      	cmp	r3, #0
 8011850:	dc2b      	bgt.n	80118aa <__kernel_rem_pio2f+0x40a>
 8011852:	d044      	beq.n	80118de <__kernel_rem_pio2f+0x43e>
 8011854:	f009 0007 	and.w	r0, r9, #7
 8011858:	b059      	add	sp, #356	@ 0x164
 801185a:	ecbd 8b04 	vpop	{d8-d9}
 801185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011862:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011864:	2b03      	cmp	r3, #3
 8011866:	d1f5      	bne.n	8011854 <__kernel_rem_pio2f+0x3b4>
 8011868:	aa30      	add	r2, sp, #192	@ 0xc0
 801186a:	1f0b      	subs	r3, r1, #4
 801186c:	4413      	add	r3, r2
 801186e:	461a      	mov	r2, r3
 8011870:	4620      	mov	r0, r4
 8011872:	2800      	cmp	r0, #0
 8011874:	f1a2 0204 	sub.w	r2, r2, #4
 8011878:	dc52      	bgt.n	8011920 <__kernel_rem_pio2f+0x480>
 801187a:	4622      	mov	r2, r4
 801187c:	2a01      	cmp	r2, #1
 801187e:	f1a3 0304 	sub.w	r3, r3, #4
 8011882:	dc5d      	bgt.n	8011940 <__kernel_rem_pio2f+0x4a0>
 8011884:	ab30      	add	r3, sp, #192	@ 0xc0
 8011886:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 801188a:	440b      	add	r3, r1
 801188c:	2c01      	cmp	r4, #1
 801188e:	dc67      	bgt.n	8011960 <__kernel_rem_pio2f+0x4c0>
 8011890:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011894:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011898:	2e00      	cmp	r6, #0
 801189a:	d167      	bne.n	801196c <__kernel_rem_pio2f+0x4cc>
 801189c:	edc7 6a00 	vstr	s13, [r7]
 80118a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80118a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80118a8:	e7d4      	b.n	8011854 <__kernel_rem_pio2f+0x3b4>
 80118aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80118ac:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 80118b0:	440b      	add	r3, r1
 80118b2:	4622      	mov	r2, r4
 80118b4:	2a00      	cmp	r2, #0
 80118b6:	da24      	bge.n	8011902 <__kernel_rem_pio2f+0x462>
 80118b8:	b34e      	cbz	r6, 801190e <__kernel_rem_pio2f+0x46e>
 80118ba:	eef1 7a47 	vneg.f32	s15, s14
 80118be:	edc7 7a00 	vstr	s15, [r7]
 80118c2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80118c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118ca:	aa31      	add	r2, sp, #196	@ 0xc4
 80118cc:	2301      	movs	r3, #1
 80118ce:	429c      	cmp	r4, r3
 80118d0:	da20      	bge.n	8011914 <__kernel_rem_pio2f+0x474>
 80118d2:	b10e      	cbz	r6, 80118d8 <__kernel_rem_pio2f+0x438>
 80118d4:	eef1 7a67 	vneg.f32	s15, s15
 80118d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80118dc:	e7ba      	b.n	8011854 <__kernel_rem_pio2f+0x3b4>
 80118de:	ab30      	add	r3, sp, #192	@ 0xc0
 80118e0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80117a4 <__kernel_rem_pio2f+0x304>
 80118e4:	440b      	add	r3, r1
 80118e6:	2c00      	cmp	r4, #0
 80118e8:	da05      	bge.n	80118f6 <__kernel_rem_pio2f+0x456>
 80118ea:	b10e      	cbz	r6, 80118f0 <__kernel_rem_pio2f+0x450>
 80118ec:	eef1 7a67 	vneg.f32	s15, s15
 80118f0:	edc7 7a00 	vstr	s15, [r7]
 80118f4:	e7ae      	b.n	8011854 <__kernel_rem_pio2f+0x3b4>
 80118f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80118fa:	3c01      	subs	r4, #1
 80118fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011900:	e7f1      	b.n	80118e6 <__kernel_rem_pio2f+0x446>
 8011902:	ed73 7a01 	vldmdb	r3!, {s15}
 8011906:	3a01      	subs	r2, #1
 8011908:	ee37 7a27 	vadd.f32	s14, s14, s15
 801190c:	e7d2      	b.n	80118b4 <__kernel_rem_pio2f+0x414>
 801190e:	eef0 7a47 	vmov.f32	s15, s14
 8011912:	e7d4      	b.n	80118be <__kernel_rem_pio2f+0x41e>
 8011914:	ecb2 7a01 	vldmia	r2!, {s14}
 8011918:	3301      	adds	r3, #1
 801191a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801191e:	e7d6      	b.n	80118ce <__kernel_rem_pio2f+0x42e>
 8011920:	edd2 7a00 	vldr	s15, [r2]
 8011924:	edd2 6a01 	vldr	s13, [r2, #4]
 8011928:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801192c:	3801      	subs	r0, #1
 801192e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011932:	ed82 7a00 	vstr	s14, [r2]
 8011936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801193a:	edc2 7a01 	vstr	s15, [r2, #4]
 801193e:	e798      	b.n	8011872 <__kernel_rem_pio2f+0x3d2>
 8011940:	edd3 7a00 	vldr	s15, [r3]
 8011944:	edd3 6a01 	vldr	s13, [r3, #4]
 8011948:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801194c:	3a01      	subs	r2, #1
 801194e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011952:	ed83 7a00 	vstr	s14, [r3]
 8011956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801195a:	edc3 7a01 	vstr	s15, [r3, #4]
 801195e:	e78d      	b.n	801187c <__kernel_rem_pio2f+0x3dc>
 8011960:	ed33 7a01 	vldmdb	r3!, {s14}
 8011964:	3c01      	subs	r4, #1
 8011966:	ee77 7a87 	vadd.f32	s15, s15, s14
 801196a:	e78f      	b.n	801188c <__kernel_rem_pio2f+0x3ec>
 801196c:	eef1 6a66 	vneg.f32	s13, s13
 8011970:	eeb1 7a47 	vneg.f32	s14, s14
 8011974:	edc7 6a00 	vstr	s13, [r7]
 8011978:	ed87 7a01 	vstr	s14, [r7, #4]
 801197c:	eef1 7a67 	vneg.f32	s15, s15
 8011980:	e790      	b.n	80118a4 <__kernel_rem_pio2f+0x404>
 8011982:	bf00      	nop

08011984 <scalbnf>:
 8011984:	ee10 3a10 	vmov	r3, s0
 8011988:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801198c:	d02b      	beq.n	80119e6 <scalbnf+0x62>
 801198e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011992:	d302      	bcc.n	801199a <scalbnf+0x16>
 8011994:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011998:	4770      	bx	lr
 801199a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801199e:	d123      	bne.n	80119e8 <scalbnf+0x64>
 80119a0:	4b24      	ldr	r3, [pc, #144]	@ (8011a34 <scalbnf+0xb0>)
 80119a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011a38 <scalbnf+0xb4>
 80119a6:	4298      	cmp	r0, r3
 80119a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80119ac:	db17      	blt.n	80119de <scalbnf+0x5a>
 80119ae:	ee10 3a10 	vmov	r3, s0
 80119b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80119b6:	3a19      	subs	r2, #25
 80119b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80119bc:	4288      	cmp	r0, r1
 80119be:	dd15      	ble.n	80119ec <scalbnf+0x68>
 80119c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011a3c <scalbnf+0xb8>
 80119c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011a40 <scalbnf+0xbc>
 80119c8:	ee10 3a10 	vmov	r3, s0
 80119cc:	eeb0 7a67 	vmov.f32	s14, s15
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	bfb8      	it	lt
 80119d4:	eef0 7a66 	vmovlt.f32	s15, s13
 80119d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80119dc:	4770      	bx	lr
 80119de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011a44 <scalbnf+0xc0>
 80119e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80119e6:	4770      	bx	lr
 80119e8:	0dd2      	lsrs	r2, r2, #23
 80119ea:	e7e5      	b.n	80119b8 <scalbnf+0x34>
 80119ec:	4410      	add	r0, r2
 80119ee:	28fe      	cmp	r0, #254	@ 0xfe
 80119f0:	dce6      	bgt.n	80119c0 <scalbnf+0x3c>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	dd06      	ble.n	8011a04 <scalbnf+0x80>
 80119f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80119fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80119fe:	ee00 3a10 	vmov	s0, r3
 8011a02:	4770      	bx	lr
 8011a04:	f110 0f16 	cmn.w	r0, #22
 8011a08:	da09      	bge.n	8011a1e <scalbnf+0x9a>
 8011a0a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011a44 <scalbnf+0xc0>
 8011a0e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011a48 <scalbnf+0xc4>
 8011a12:	ee10 3a10 	vmov	r3, s0
 8011a16:	eeb0 7a67 	vmov.f32	s14, s15
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	e7d9      	b.n	80119d2 <scalbnf+0x4e>
 8011a1e:	3019      	adds	r0, #25
 8011a20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011a24:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011a28:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011a4c <scalbnf+0xc8>
 8011a2c:	ee07 3a90 	vmov	s15, r3
 8011a30:	e7d7      	b.n	80119e2 <scalbnf+0x5e>
 8011a32:	bf00      	nop
 8011a34:	ffff3cb0 	.word	0xffff3cb0
 8011a38:	4c000000 	.word	0x4c000000
 8011a3c:	7149f2ca 	.word	0x7149f2ca
 8011a40:	f149f2ca 	.word	0xf149f2ca
 8011a44:	0da24260 	.word	0x0da24260
 8011a48:	8da24260 	.word	0x8da24260
 8011a4c:	33000000 	.word	0x33000000

08011a50 <floorf>:
 8011a50:	ee10 3a10 	vmov	r3, s0
 8011a54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011a58:	3a7f      	subs	r2, #127	@ 0x7f
 8011a5a:	2a16      	cmp	r2, #22
 8011a5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011a60:	dc2b      	bgt.n	8011aba <floorf+0x6a>
 8011a62:	2a00      	cmp	r2, #0
 8011a64:	da12      	bge.n	8011a8c <floorf+0x3c>
 8011a66:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011acc <floorf+0x7c>
 8011a6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	dd06      	ble.n	8011a86 <floorf+0x36>
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	da24      	bge.n	8011ac6 <floorf+0x76>
 8011a7c:	2900      	cmp	r1, #0
 8011a7e:	4b14      	ldr	r3, [pc, #80]	@ (8011ad0 <floorf+0x80>)
 8011a80:	bf08      	it	eq
 8011a82:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011a86:	ee00 3a10 	vmov	s0, r3
 8011a8a:	4770      	bx	lr
 8011a8c:	4911      	ldr	r1, [pc, #68]	@ (8011ad4 <floorf+0x84>)
 8011a8e:	4111      	asrs	r1, r2
 8011a90:	420b      	tst	r3, r1
 8011a92:	d0fa      	beq.n	8011a8a <floorf+0x3a>
 8011a94:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011acc <floorf+0x7c>
 8011a98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa4:	ddef      	ble.n	8011a86 <floorf+0x36>
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	bfbe      	ittt	lt
 8011aaa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011aae:	fa40 f202 	asrlt.w	r2, r0, r2
 8011ab2:	189b      	addlt	r3, r3, r2
 8011ab4:	ea23 0301 	bic.w	r3, r3, r1
 8011ab8:	e7e5      	b.n	8011a86 <floorf+0x36>
 8011aba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011abe:	d3e4      	bcc.n	8011a8a <floorf+0x3a>
 8011ac0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011ac4:	4770      	bx	lr
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e7dd      	b.n	8011a86 <floorf+0x36>
 8011aca:	bf00      	nop
 8011acc:	7149f2ca 	.word	0x7149f2ca
 8011ad0:	bf800000 	.word	0xbf800000
 8011ad4:	007fffff 	.word	0x007fffff

08011ad8 <_init>:
 8011ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ada:	bf00      	nop
 8011adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ade:	bc08      	pop	{r3}
 8011ae0:	469e      	mov	lr, r3
 8011ae2:	4770      	bx	lr

08011ae4 <_fini>:
 8011ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ae6:	bf00      	nop
 8011ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aea:	bc08      	pop	{r3}
 8011aec:	469e      	mov	lr, r3
 8011aee:	4770      	bx	lr
